{"version":3,"sources":["jsnes/src/utils.js","jsnes/src/controller.js","jsnes/src/tile.js","jsnes/src/index.js","jsnes/src/nes.js","jsnes/src/cpu.js","jsnes/src/ppu.js","jsnes/src/papu.js","jsnes/src/rom.js","jsnes/src/mappers.js","config.js","RomLibrary.js","ListPage.js","ControlMapperRow.js","ControlsModal.js","FrameTimer.js","GamepadController.js","KeyboardController.js","Screen.js","utils.js","Speakers.js","Emulator.js","RunPage.js","App.js","index.js"],"names":["module","exports","copyArrayElements","src","srcPos","dest","destPos","length","i","copyArray","slice","fromJSON","obj","state","JSON_PROPERTIES","toJSON","Controller","this","Array","BUTTON_A","BUTTON_B","BUTTON_SELECT","BUTTON_START","BUTTON_UP","BUTTON_DOWN","BUTTON_LEFT","BUTTON_RIGHT","prototype","buttonDown","key","buttonUp","Tile","pix","fbIndex","tIndex","x","y","w","h","incX","incY","palIndex","tpri","c","initialized","opaque","setBuffer","scanline","setScanline","sline","b1","b2","render","buffer","srcx1","srcy1","srcx2","srcy2","dx","dy","palAdd","palette","flipHorizontal","flipVertical","pri","priTable","isTransparent","s","require","NES","CPU","PPU","PAPU","ROM","opts","onFrame","onAudioSample","onStatusUpdate","onBatteryRamWrite","preferredFrameRate","emulateSound","sampleRate","frameTime","ui","writeFrame","updateStatus","cpu","ppu","papu","mmap","controllers","1","2","frame","bind","zapperMove","zapperFireDown","zapperFireUp","fpsFrameCount","romData","reset","lastFpsTime","startFrame","cycles","FRAMELOOP","cyclesToHalt","emulate","clockFrameCounter","curX","spr0HitX","f_spVisibility","spr0HitY","setStatusFlag","STATUS_SPRITE0HIT","requestEndFrame","nmiCounter","startVBlank","endScanline","controller","button","zapperX","zapperY","zapperFired","getFPS","now","Date","fps","reloadROM","loadROM","data","rom","load","createMapper","setMirroring","getMirroringType","setFramerate","rate","setSampleRate","utils","nes","mem","REG_ACC","REG_X","REG_Y","REG_SP","REG_PC","REG_PC_NEW","REG_STATUS","F_CARRY","F_DECIMAL","F_INTERRUPT","F_INTERRUPT_NEW","F_OVERFLOW","F_SIGN","F_ZERO","F_NOTUSED","F_NOTUSED_NEW","F_BRK","F_BRK_NEW","opdata","crash","irqRequested","irqType","IRQ_NORMAL","IRQ_NMI","IRQ_RESET","p","j","k","setStatus","OpData","temp","add","doIrq","doNonMaskableInterrupt","doResetInterrupt","opinf","cycleCount","cycleAdd","addrMode","opaddr","addr","load16bit","write","push","pull","stackWrap","stop","crashMessage","toString","val","requestIrq","type","value","pageCrossed","addr1","addr2","haltCycles","status","getStatus","st","setOp","INS_ADC","ADDR_IMM","ADDR_ZP","ADDR_ZPX","ADDR_ABS","ADDR_ABSX","ADDR_ABSY","ADDR_PREIDXIND","ADDR_POSTIDXIND","INS_AND","INS_ASL","ADDR_ACC","INS_BCC","ADDR_REL","INS_BCS","INS_BEQ","INS_BIT","INS_BMI","INS_BNE","INS_BPL","INS_BRK","ADDR_IMP","INS_BVC","INS_BVS","INS_CLC","INS_CLD","INS_CLI","INS_CLV","INS_CMP","INS_CPX","INS_CPY","INS_DEC","INS_DEX","INS_DEY","INS_EOR","INS_INC","INS_INX","INS_INY","INS_JMP","ADDR_INDABS","INS_JSR","INS_LDA","INS_LDX","ADDR_ZPY","INS_LDY","INS_LSR","INS_NOP","INS_ORA","INS_PHA","INS_PHP","INS_PLA","INS_PLP","INS_ROL","INS_ROR","INS_RTI","INS_RTS","INS_SBC","INS_SEC","INS_SED","INS_SEI","INS_STA","INS_STX","INS_STY","INS_TAX","INS_TAY","INS_TSX","INS_TXA","INS_TXS","INS_TYA","INS_ALR","INS_ANC","INS_ARR","INS_AXS","INS_LAX","INS_SAX","INS_DCP","INS_ISC","INS_RLA","INS_RRA","INS_SLO","INS_SRE","INS_SKB","INS_IGN","cycTable","instname","addrDesc","INS_DUMMY","inst","op","size","vramMem","spriteMem","vramAddress","vramTmpAddress","vramBufferedReadValue","firstWrite","sramAddress","currentMirroring","nmiOk","dummyCycleToggle","validTileData","scanlineAlreadyRendered","f_nmiOnVblank","f_spriteSize","f_bgPatternTable","f_spPatternTable","f_addrInc","f_nTblAddress","f_color","f_bgVisibility","f_spClipping","f_bgClipping","f_dispType","cntFV","cntV","cntH","cntVT","cntHT","regFV","regV","regH","regVT","regHT","regFH","regS","curNt","attrib","bgbuffer","pixrendered","scantile","lastRenderedScanline","sprX","sprY","sprTile","sprCol","vertFlip","horiFlip","bgPriority","hitSpr0","sprPalette","imgPalette","ptTile","ntable1","nameTable","vramMirrorTable","palTable","showSpr0Hit","clipToTvSize","STATUS_VRAMWRITE","STATUS_SLSPRITECOUNT","STATUS_VBLANK","NameTable","PaletteTable","loadNTSCPalette","updateControlReg1","updateControlReg2","mirroring","triggerRendering","defineMirrorRegion","HORIZONTAL_MIRRORING","VERTICAL_MIRRORING","SINGLESCREEN_MIRRORING","SINGLESCREEN_MIRRORING2","fromStart","toStart","renderFramePartially","endFrame","renderBgScanline","checkSprite0","clockIrqCounter","regsToAddress","cntsToAddress","bgColor","setEmphasis","updatePalettes","flag","n","readStatusRegister","tmp","writeSRAMAddress","address","sramLoad","sramWrite","spriteRamWriteUpdate","scrollWrite","writeVRAMAddress","latchAccess","vramLoad","mirroredLoad","cntsFromAddress","regsFromAddress","vramWrite","mirroredWrite","writeMem","sramDMA","baseAddress","incTileCounter","count","Error","startScan","scanCount","renderSpritesPartially","si","ei","destIndex","scan","baseTile","t","tpix","att","col","tscanoffset","targetBuffer","tile","getTileIndex","getAttrib","sx","startscan","scancount","bgPri","top","toffset","bufferIndex","tIndexAdd","patternWrite","nameTableWrite","attribTableWrite","getEntry","tileIndex","Math","floor","leftOver","index","writeAttrib","doNMI","isPixelWhite","width","height","name","tx","attindex","basex","basey","sqy","sqx","curTable","emphTable","currentEmph","makeTables","loadPALPalette","r","g","b","rFactor","gFactor","bFactor","emph","getRed","getGreen","getBlue","getRgb","yiq","rgb","loadDefaultPalette","square1","ChannelSquare","square2","triangle","ChannelTriangle","noise","ChannelNoise","dmc","ChannelDM","frameIrqCounter","frameIrqCounterMax","initCounter","channelEnableValue","lengthLookup","dmcFreqLookup","noiseWavelengthLookup","square_table","tnd_table","frameIrqEnabled","frameIrqActive","frameClockNow","startedPlaying","recordOutput","initingHardware","masterFrameCounter","derivedFrameCounter","countSequence","sampleTimer","sampleTimerMax","sampleCount","triValue","smpSquare1","smpSquare2","smpTriangle","smpDmc","accCount","prevSampleL","prevSampleR","smpAccumL","smpAccumR","dacRange","dcValue","masterVolume","stereoPosLSquare1","stereoPosLSquare2","stereoPosLTriangle","stereoPosLNoise","stereoPosLDMC","stereoPosRSquare1","stereoPosRSquare2","stereoPosRTriangle","stereoPosRNoise","stereoPosRDMC","extraCycles","maxSample","minSample","panning","setPanning","initLengthLookup","initDmcFrequencyLookup","initNoiseWavelengthLookup","initDACtables","writeReg","updateChannelEnable","resetCounter","readReg","getLengthStatus","getIrqStatus","irqGenerated","frameCounterTick","setEnabled","nCycles","maxCycles","isEnabled","shiftCounter","dmaFrequency","clockDmc","progTimerMax","progTimerCount","linearCounter","lengthCounter","triangleCounter","sampleValue","squareCounter","updateSampleValue","acc_c","accValue","shiftReg","randomMode","randomBit","accSample","sample","sampleCondition","clockLengthCounter","clockSweep","clockEnvDecay","clockLinearCounter","sq_index","tnd_index","smpNoise","sampleValueL","sampleValueR","smpDiffL","smpDiffR","getLengthMax","getDmcFrequency","getNoiseWaveLength","pos","updateStereoPos","setMasterVolume","ival","max_sqr","max_tnd","MODE_NORMAL","MODE_LOOP","MODE_IRQ","hasSample","playMode","dmaCounter","deltaCounter","playStartAddress","playAddress","playLength","playLengthCounter","reg4012","reg4013","dacLsb","endOfSample","nextSample","envDecayDisable","envDecayLoopEnable","lengthCounterEnable","envReset","shiftNow","envDecayRate","envDecayCounter","envVolume","dutyLookup","impLookup","sqr1","sweepActive","sweepCarry","updateSweepPeriod","sweepCounter","sweepCounterMax","sweepMode","sweepShiftAmount","dutyMode","sweepResult","vol","addrAdd","lcHalt","lcControl","lcLoadValue","updateSampleCondition","clockProgrammableTimer","clockTriangleGenerator","Mappers","mapperName","FOURSCREEN_MIRRORING","SINGLESCREEN_MIRRORING3","SINGLESCREEN_MIRRORING4","CHRROM_MIRRORING","header","vrom","vromTile","romCount","vromCount","batteryRam","trainer","fourScreen","mapperType","valid","v","indexOf","charCodeAt","foundError","offset","getMapperName","mapperSupported","joy1StrobeState","joy2StrobeState","joypadLastWrite","regWrite","writelow","regLoad","joy1Read","joy2Read","ret","loadPRGROM","loadCHRROM","loadBatteryRam","loadRomBank","loadVromBank","ram","bank","load32kRomBank","load8kVromBank","bank4kStart","load1kVromBank","bank1k","bank4k","bankoffset","baseIndex","load2kVromBank","bank2k","load8kRomBank","bank8k","bank16k","apply","regBuffer","regBufferCounter","oneScreenMirroring","prgSwitchingArea","prgSwitchingSize","vromSwitchingSize","romSelectionReg0","romSelectionReg1","romBankSelect","arguments","getRegNumber","setReg","reg","baseBank","switchLowHighPrgRom","oldSetting","switch16to32","switch32to16","CMD_SEL_2_1K_VROM_0000","CMD_SEL_2_1K_VROM_0800","CMD_SEL_1K_VROM_1000","CMD_SEL_1K_VROM_1400","CMD_SEL_1K_VROM_1800","CMD_SEL_1K_VROM_1C00","CMD_SEL_ROM_PAGE1","CMD_SEL_ROM_PAGE2","command","prgAddressSelect","chrAddressSelect","pageNumber","irqCounter","irqLatchValue","irqEnable","prgAddressChanged","executeCommand","cmd","arg","prg_size","chr_size","sram_we_a","sram_we_b","graphic_mode","nametable_mode","nametable_type","fill_chr","fill_pal","SetBank_SRAM","SetBank_CPU","chr_mode","chr_page","SetBank_PPU","split_control","split_scroll","split_page","irq_line","ClearIRQ","irq_enable","mult_a","mult_b","exWrite","irq_status","prgbank1","prgbank2","config","ROMS","owlia","description","href","target","rel","url","nomolos","croom","jmj","GOOGLE_ANALYTICS_CODE","process","REACT_APP_GOOGLE_ANALYTICS_CODE","SENTRY_URI","REACT_APP_SENTRY_URI","RomLibrary","getRomInfoByHash","hash","find","save","file","Promise","resolve","reject","reader","FileReader","onload","readAsBinaryString","pFileReader","then","readFile","byteString","result","ab","ArrayBuffer","ia","Uint8Array","crypto","subtle","digest","from","map","padStart","join","hashFile","savedRomInfo","localStorage","getItem","existingLibrary","JSON","parse","added","newRomInfo","stringify","concat","setItem","delete","removeItem","filter","Component","ListPage","ControlMapperRow","constructor","props","super","playerOneButton","playerTwoButton","waitingForKey","handleClick","componentDidMount","keys","playerButtons","console","log","setState","componentDidUpdate","prevProps","prevState","gamepadButton","newButton","searchButton","gamepadConfig","buttonId","buttons","searchNewButton","prevGamepadConfig","some","waitingForKeyPlayer","gamepadButtonName","code","playerGamepadId","configs","prevButton","newState","currentPromptButton","Object","player","buttonName","onClick","GAMEPAD_ICON","ControlsModal","undefined","modified","handleKeyDown","handleGamepadButtonDown","listenForKey","controllerIcon","gamepadId","controllerIconAlt","componentWillUnmount","setKeys","setGamepadConfig","removeKeyListener","promptButton","document","addEventListener","buttonInfo","playerId","newConfig","assign","event","newKeys","keyCode","String","toUpperCase","removeEventListener","Modal","isOpen","toggle","className","ModalHeader","ModalBody","Table","alt","ModalFooter","Button","outline","color","FrameTimer","onAnimationFrame","time","requestAnimationFrame","excess","interval","newFrameTime","lastFrameTime","numFrames","round","generateFrame","onWriteFrame","timeToNextFrame","setTimeout","onGenerateFrame","running","start","_requestID","window","cancelAnimationFrame","GamepadController","options","disableIfGamepadEnabled","callback","self","_getPlayerNumberFromGamepad","gamepad","id","poll","gamepads","navigator","getGamepads","webkitGetGamepads","usedPlayers","gamepadIndex","previousGamepad","gamepadState","previousButtons","buttonCallback","axes","axis","previousAxis","previousButton","pressed","playerNumber","configButtons","configButton","onButtonDown","onButtonUp","f","loadGamepadConfig","e","startPolling","stopped","loop","KEYS","88","89","90","17","13","38","40","37","39","103","105","99","97","104","98","100","102","KeyboardController","loadKeys","preventDefault","handleKeyUp","handleKeyPress","Screen","buf32","writeBuffer","imageData","set","buf8","context","putImageData","fitInParent","parent","canvas","parentNode","parentWidth","clientWidth","parentHeight","clientHeight","style","handleMouseDown","onMouseDown","scale","parseFloat","rect","getBoundingClientRect","clientX","left","clientY","onMouseUp","ref","initCanvas","getContext","getImageData","fillStyle","fillRect","buf","Uint8ClampedArray","Uint32Array","screenshot","img","Image","toDataURL","handleError","error","errorInfo","Raven","captureException","extra","Speakers","onBufferUnderrun","writeSample","right","bufferSize","deqN","enq","onaudioprocess","outputBuffer","getChannelData","samples","RingBuffer","getSampleRate","AudioContext","myCtx","close","audioCtx","scriptNode","createScriptProcessor","connect","destination","disconnect","catch","Emulator","frameTimer","speakers","fpsInterval","setInterval","clearInterval","screen","actualSize","desiredSize","paused","wrap","gamepadController","gamepadPolling","keyboardController","RunPage","slug","isLocalROM","test","romHash","split","romInfo","romName","localROMData","handleLoaded","currentRequest","path","handleProgress","req","XMLHttpRequest","open","overrideMimeType","responseText","match","statusText","onerror","onprogress","send","loadBinary","err","message","lengthComputable","loadedPercent","loaded","total","loading","handlePauseResume","layout","navbarHeight","getComputedStyle","navbar","screenContainer","innerHeight","emulator","toggleControlsModal","controlsModalOpen","el","to","loadState","Progress","position","fetch","res","text","decodedData","saveState","xx","abort","App","recordPageview","location","GoogleAnalytics","pageview","pathname","initialize","exact","component","componentDidCatch","install","ReactDOM","getElementById"],"mappings":"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,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q,SAAS,IAAM,MACpB7Q,KAAK6Q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","file":"static/js/main.0080ca6f.chunk.js","sourcesContent":["module.exports = {\n  copyArrayElements: function(src, srcPos, dest, destPos, length) {\n    for (var i = 0; i < length; ++i) {\n      dest[destPos + i] = src[srcPos + i];\n    }\n  },\n\n  copyArray: function(src) {\n    return src.slice(0);\n  },\n\n  fromJSON: function(obj, state) {\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      obj[obj.JSON_PROPERTIES[i]] = state[obj.JSON_PROPERTIES[i]];\n    }\n  },\n\n  toJSON: function(obj) {\n    var state = {};\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      state[obj.JSON_PROPERTIES[i]] = obj[obj.JSON_PROPERTIES[i]];\n    }\n    return state;\n  }\n};\n","var Controller = function() {\n  this.state = new Array(8);\n  for (var i = 0; i < this.state.length; i++) {\n    this.state[i] = 0x40;\n  }\n};\n\nController.BUTTON_A = 0;\nController.BUTTON_B = 1;\nController.BUTTON_SELECT = 2;\nController.BUTTON_START = 3;\nController.BUTTON_UP = 4;\nController.BUTTON_DOWN = 5;\nController.BUTTON_LEFT = 6;\nController.BUTTON_RIGHT = 7;\n\nController.prototype = {\n  buttonDown: function(key) {\n    this.state[key] = 0x41;\n  },\n\n  buttonUp: function(key) {\n    this.state[key] = 0x40;\n  }\n};\n\nmodule.exports = Controller;\n","var Tile = function() {\n  // Tile data:\n  this.pix = new Array(64);\n\n  this.fbIndex = null;\n  this.tIndex = null;\n  this.x = null;\n  this.y = null;\n  this.w = null;\n  this.h = null;\n  this.incX = null;\n  this.incY = null;\n  this.palIndex = null;\n  this.tpri = null;\n  this.c = null;\n  this.initialized = false;\n  this.opaque = new Array(8);\n};\n\nTile.prototype = {\n  setBuffer: function(scanline) {\n    for (this.y = 0; this.y < 8; this.y++) {\n      this.setScanline(this.y, scanline[this.y], scanline[this.y + 8]);\n    }\n  },\n\n  setScanline: function(sline, b1, b2) {\n    this.initialized = true;\n    this.tIndex = sline << 3;\n    for (this.x = 0; this.x < 8; this.x++) {\n      this.pix[this.tIndex + this.x] =\n        ((b1 >> (7 - this.x)) & 1) + (((b2 >> (7 - this.x)) & 1) << 1);\n      if (this.pix[this.tIndex + this.x] === 0) {\n        this.opaque[sline] = false;\n      }\n    }\n  },\n\n  render: function(\n    buffer,\n    srcx1,\n    srcy1,\n    srcx2,\n    srcy2,\n    dx,\n    dy,\n    palAdd,\n    palette,\n    flipHorizontal,\n    flipVertical,\n    pri,\n    priTable\n  ) {\n    if (dx < -7 || dx >= 256 || dy < -7 || dy >= 240) {\n      return;\n    }\n\n    this.w = srcx2 - srcx1;\n    this.h = srcy2 - srcy1;\n\n    if (dx < 0) {\n      srcx1 -= dx;\n    }\n    if (dx + srcx2 >= 256) {\n      srcx2 = 256 - dx;\n    }\n\n    if (dy < 0) {\n      srcy1 -= dy;\n    }\n    if (dy + srcy2 >= 240) {\n      srcy2 = 240 - dy;\n    }\n\n    if (!flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 0;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              //console.log(\"Rendering upright tile to buffer\");\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    } else if (flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 7;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex += 16;\n      }\n    } else if (flipVertical && !flipHorizontal) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 56;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex -= 16;\n      }\n    } else {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 63;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    }\n  },\n\n  isTransparent: function(x, y) {\n    return this.pix[(y << 3) + x] === 0;\n  },\n\n  toJSON: function() {\n    return {\n      opaque: this.opaque,\n      pix: this.pix\n    };\n  },\n\n  fromJSON: function(s) {\n    this.opaque = s.opaque;\n    this.pix = s.pix;\n  }\n};\n\nmodule.exports = Tile;\n","module.exports = {\n  Controller: require(\"./controller\"),\n  NES: require(\"./nes\")\n};\n","var CPU = require(\"./cpu\");\nvar Controller = require(\"./controller\");\nvar PPU = require(\"./ppu\");\nvar PAPU = require(\"./papu\");\nvar ROM = require(\"./rom\");\n\nvar NES = function(opts) {\n  this.opts = {\n    onFrame: function() {},\n    onAudioSample: null,\n    onStatusUpdate: function() {},\n    onBatteryRamWrite: function() {},\n\n    // FIXME: not actually used except for in PAPU\n    preferredFrameRate: 60,\n\n    emulateSound: true,\n    sampleRate: 44100 // Sound sample rate in hz\n  };\n  if (typeof opts !== \"undefined\") {\n    var key;\n    for (key in this.opts) {\n      if (typeof opts[key] !== \"undefined\") {\n        this.opts[key] = opts[key];\n      }\n    }\n  }\n\n  this.frameTime = 1000 / this.opts.preferredFrameRate;\n\n  this.ui = {\n    writeFrame: this.opts.onFrame,\n    updateStatus: this.opts.onStatusUpdate\n  };\n  this.cpu = new CPU(this);\n  this.ppu = new PPU(this);\n  this.papu = new PAPU(this);\n  this.mmap = null; // set in loadROM()\n  this.controllers = {\n    1: new Controller(),\n    2: new Controller()\n  };\n\n  this.ui.updateStatus(\"Ready to load a ROM.\");\n\n  this.frame = this.frame.bind(this);\n  this.buttonDown = this.buttonDown.bind(this);\n  this.buttonUp = this.buttonUp.bind(this);\n  this.zapperMove = this.zapperMove.bind(this);\n  this.zapperFireDown = this.zapperFireDown.bind(this);\n  this.zapperFireUp = this.zapperFireUp.bind(this);\n};\n\nNES.prototype = {\n  fpsFrameCount: 0,\n  romData: null,\n\n  // Resets the system\n  reset: function() {\n    if (this.mmap !== null) {\n      this.mmap.reset();\n    }\n\n    this.cpu.reset();\n    this.ppu.reset();\n    this.papu.reset();\n\n    this.lastFpsTime = null;\n    this.fpsFrameCount = 0;\n  },\n\n  frame: function() {\n    this.ppu.startFrame();\n    var cycles = 0;\n    var emulateSound = this.opts.emulateSound;\n    var cpu = this.cpu;\n    var ppu = this.ppu;\n    var papu = this.papu;\n    FRAMELOOP: for (;;) {\n      if (cpu.cyclesToHalt === 0) {\n        // Execute a CPU instruction\n        cycles = cpu.emulate();\n        if (emulateSound) {\n          papu.clockFrameCounter(cycles);\n        }\n        cycles *= 3;\n      } else {\n        if (cpu.cyclesToHalt > 8) {\n          cycles = 24;\n          if (emulateSound) {\n            papu.clockFrameCounter(8);\n          }\n          cpu.cyclesToHalt -= 8;\n        } else {\n          cycles = cpu.cyclesToHalt * 3;\n          if (emulateSound) {\n            papu.clockFrameCounter(cpu.cyclesToHalt);\n          }\n          cpu.cyclesToHalt = 0;\n        }\n      }\n\n      for (; cycles > 0; cycles--) {\n        if (\n          ppu.curX === ppu.spr0HitX &&\n          ppu.f_spVisibility === 1 &&\n          ppu.scanline - 21 === ppu.spr0HitY\n        ) {\n          // Set sprite 0 hit flag:\n          ppu.setStatusFlag(ppu.STATUS_SPRITE0HIT, true);\n        }\n\n        if (ppu.requestEndFrame) {\n          ppu.nmiCounter--;\n          if (ppu.nmiCounter === 0) {\n            ppu.requestEndFrame = false;\n            ppu.startVBlank();\n            break FRAMELOOP;\n          }\n        }\n\n        ppu.curX++;\n        if (ppu.curX === 341) {\n          ppu.curX = 0;\n          ppu.endScanline();\n        }\n      }\n    }\n    this.fpsFrameCount++;\n  },\n\n  buttonDown: function(controller, button) {\n    this.controllers[controller].buttonDown(button);\n  },\n\n  buttonUp: function(controller, button) {\n    this.controllers[controller].buttonUp(button);\n  },\n\n  zapperMove: function(x, y) {\n    if (!this.mmap) return;\n    this.mmap.zapperX = x;\n    this.mmap.zapperY = y;\n  },\n\n  zapperFireDown: function() {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = true;\n  },\n\n  zapperFireUp: function() {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = false;\n  },\n\n  getFPS: function() {\n    var now = +new Date();\n    var fps = null;\n    if (this.lastFpsTime) {\n      fps = this.fpsFrameCount / ((now - this.lastFpsTime) / 1000);\n    }\n    this.fpsFrameCount = 0;\n    this.lastFpsTime = now;\n    return fps;\n  },\n\n  reloadROM: function() {\n    if (this.romData !== null) {\n      this.loadROM(this.romData);\n    }\n  },\n\n  // Loads a ROM file into the CPU and PPU.\n  // The ROM file is validated first.\n  loadROM: function(data) {\n    // Load ROM file:\n    this.rom = new ROM(this);\n    this.rom.load(data);\n\n    this.reset();\n    this.mmap = this.rom.createMapper();\n    this.mmap.loadROM();\n    this.ppu.setMirroring(this.rom.getMirroringType());\n    this.romData = data;\n  },\n\n  setFramerate: function(rate) {\n    this.opts.preferredFrameRate = rate;\n    this.frameTime = 1000 / rate;\n    this.papu.setSampleRate(this.opts.sampleRate, false);\n  },\n\n  toJSON: function() {\n    return {\n      romData: this.romData,\n      cpu: this.cpu.toJSON(),\n      mmap: this.mmap.toJSON(),\n      ppu: this.ppu.toJSON()\n    };\n  },\n\n  fromJSON: function(s) {\n    // this.loadROM(s.romData);\n    this.cpu.fromJSON(s.cpu);\n    this.mmap.fromJSON(s.mmap);\n    this.ppu.fromJSON(s.ppu);\n  }\n};\n\nmodule.exports = NES;\n","var utils = require(\"./utils\");\n\nvar CPU = function(nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.mem = null;\n  this.REG_ACC = null;\n  this.REG_X = null;\n  this.REG_Y = null;\n  this.REG_SP = null;\n  this.REG_PC = null;\n  this.REG_PC_NEW = null;\n  this.REG_STATUS = null;\n  this.F_CARRY = null;\n  this.F_DECIMAL = null;\n  this.F_INTERRUPT = null;\n  this.F_INTERRUPT_NEW = null;\n  this.F_OVERFLOW = null;\n  this.F_SIGN = null;\n  this.F_ZERO = null;\n  this.F_NOTUSED = null;\n  this.F_NOTUSED_NEW = null;\n  this.F_BRK = null;\n  this.F_BRK_NEW = null;\n  this.opdata = null;\n  this.cyclesToHalt = null;\n  this.crash = null;\n  this.irqRequested = null;\n  this.irqType = null;\n\n  this.reset();\n};\n\nCPU.prototype = {\n  // IRQ Types\n  IRQ_NORMAL: 0,\n  IRQ_NMI: 1,\n  IRQ_RESET: 2,\n\n  reset: function() {\n    // Main memory\n    this.mem = new Array(0x10000);\n\n    for (var i = 0; i < 0x2000; i++) {\n      this.mem[i] = 0xff;\n    }\n    for (var p = 0; p < 4; p++) {\n      var j = p * 0x800;\n      this.mem[j + 0x008] = 0xf7;\n      this.mem[j + 0x009] = 0xef;\n      this.mem[j + 0x00a] = 0xdf;\n      this.mem[j + 0x00f] = 0xbf;\n    }\n    for (var k = 0x2001; k < this.mem.length; k++) {\n      this.mem[k] = 0;\n    }\n\n    // CPU Registers:\n    this.REG_ACC = 0;\n    this.REG_X = 0;\n    this.REG_Y = 0;\n    // Reset Stack pointer:\n    this.REG_SP = 0x01ff;\n    // Reset Program counter:\n    this.REG_PC = 0x8000 - 1;\n    this.REG_PC_NEW = 0x8000 - 1;\n    // Reset Status register:\n    this.REG_STATUS = 0x28;\n\n    this.setStatus(0x28);\n\n    // Set flags:\n    this.F_CARRY = 0;\n    this.F_DECIMAL = 0;\n    this.F_INTERRUPT = 1;\n    this.F_INTERRUPT_NEW = 1;\n    this.F_OVERFLOW = 0;\n    this.F_SIGN = 0;\n    this.F_ZERO = 1;\n\n    this.F_NOTUSED = 1;\n    this.F_NOTUSED_NEW = 1;\n    this.F_BRK = 1;\n    this.F_BRK_NEW = 1;\n\n    this.opdata = new OpData().opdata;\n    this.cyclesToHalt = 0;\n\n    // Reset crash flag:\n    this.crash = false;\n\n    // Interrupt notification:\n    this.irqRequested = false;\n    this.irqType = null;\n  },\n\n  // Emulates a single CPU instruction, returns the number of cycles\n  emulate: function() {\n    var temp;\n    var add;\n\n    // Check interrupts:\n    if (this.irqRequested) {\n      temp =\n        this.F_CARRY |\n        ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n        (this.F_INTERRUPT << 2) |\n        (this.F_DECIMAL << 3) |\n        (this.F_BRK << 4) |\n        (this.F_NOTUSED << 5) |\n        (this.F_OVERFLOW << 6) |\n        (this.F_SIGN << 7);\n\n      this.REG_PC_NEW = this.REG_PC;\n      this.F_INTERRUPT_NEW = this.F_INTERRUPT;\n      switch (this.irqType) {\n        case 0: {\n          // Normal IRQ:\n          if (this.F_INTERRUPT !== 0) {\n            // console.log(\"Interrupt was masked.\");\n            break;\n          }\n          this.doIrq(temp);\n          // console.log(\"Did normal IRQ. I=\"+this.F_INTERRUPT);\n          break;\n        }\n        case 1: {\n          // NMI:\n          this.doNonMaskableInterrupt(temp);\n          break;\n        }\n        case 2: {\n          // Reset:\n          this.doResetInterrupt();\n          break;\n        }\n      }\n\n      this.REG_PC = this.REG_PC_NEW;\n      this.F_INTERRUPT = this.F_INTERRUPT_NEW;\n      this.F_BRK = this.F_BRK_NEW;\n      this.irqRequested = false;\n    }\n\n    var opinf = this.opdata[this.nes.mmap.load(this.REG_PC + 1)];\n    var cycleCount = opinf >> 24;\n    var cycleAdd = 0;\n\n    // Find address mode:\n    var addrMode = (opinf >> 8) & 0xff;\n\n    // Increment PC by number of op bytes:\n    var opaddr = this.REG_PC;\n    this.REG_PC += (opinf >> 16) & 0xff;\n\n    var addr = 0;\n    switch (addrMode) {\n      case 0: {\n        // Zero Page mode. Use the address given after the opcode,\n        // but without high byte.\n        addr = this.load(opaddr + 2);\n        break;\n      }\n      case 1: {\n        // Relative mode.\n        addr = this.load(opaddr + 2);\n        if (addr < 0x80) {\n          addr += this.REG_PC;\n        } else {\n          addr += this.REG_PC - 256;\n        }\n        break;\n      }\n      case 2: {\n        // Ignore. Address is implied in instruction.\n        break;\n      }\n      case 3: {\n        // Absolute mode. Use the two bytes following the opcode as\n        // an address.\n        addr = this.load16bit(opaddr + 2);\n        break;\n      }\n      case 4: {\n        // Accumulator mode. The address is in the accumulator\n        // register.\n        addr = this.REG_ACC;\n        break;\n      }\n      case 5: {\n        // Immediate mode. The value is given after the opcode.\n        addr = this.REG_PC;\n        break;\n      }\n      case 6: {\n        // Zero Page Indexed mode, X as index. Use the address given\n        // after the opcode, then add the\n        // X register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_X) & 0xff;\n        break;\n      }\n      case 7: {\n        // Zero Page Indexed mode, Y as index. Use the address given\n        // after the opcode, then add the\n        // Y register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_Y) & 0xff;\n        break;\n      }\n      case 8: {\n        // Absolute Indexed Mode, X as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        break;\n      }\n      case 9: {\n        // Absolute Indexed Mode, Y as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 10: {\n        // Pre-indexed Indirect mode. Find the 16-bit address\n        // starting at the given location plus\n        // the current X register. The value is the contents of that\n        // address.\n        addr = this.load(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        addr &= 0xff;\n        addr = this.load16bit(addr);\n        break;\n      }\n      case 11: {\n        // Post-indexed Indirect mode. Find the 16-bit address\n        // contained in the given location\n        // (and the one following). Add to that address the contents\n        // of the Y register. Fetch the value\n        // stored at that adress.\n        addr = this.load16bit(this.load(opaddr + 2));\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 12: {\n        // Indirect Absolute mode. Find the 16-bit address contained\n        // at the given location.\n        addr = this.load16bit(opaddr + 2); // Find op\n        if (addr < 0x1fff) {\n          addr =\n            this.mem[addr] +\n            (this.mem[(addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)] << 8); // Read from address given in op\n        } else {\n          addr =\n            this.nes.mmap.load(addr) +\n            (this.nes.mmap.load(\n              (addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)\n            ) <<\n              8);\n        }\n        break;\n      }\n    }\n    // Wrap around for addresses above 0xFFFF:\n    addr &= 0xffff;\n\n    // ----------------------------------------------------------------------------------------------------\n    // Decode & execute instruction:\n    // ----------------------------------------------------------------------------------------------------\n\n    // This should be compiled to a jump table.\n    switch (opinf & 0xff) {\n      case 0: {\n        // *******\n        // * ADC *\n        // *******\n\n        // Add with carry.\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 1: {\n        // *******\n        // * AND *\n        // *******\n\n        // AND memory with accumulator.\n        this.REG_ACC = this.REG_ACC & this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 2: {\n        // *******\n        // * ASL *\n        // *******\n\n        // Shift left one bit\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          this.F_CARRY = (this.REG_ACC >> 7) & 1;\n          this.REG_ACC = (this.REG_ACC << 1) & 255;\n          this.F_SIGN = (this.REG_ACC >> 7) & 1;\n          this.F_ZERO = this.REG_ACC;\n        } else {\n          temp = this.load(addr);\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = (temp << 1) & 255;\n          this.F_SIGN = (temp >> 7) & 1;\n          this.F_ZERO = temp;\n          this.write(addr, temp);\n        }\n        break;\n      }\n      case 3: {\n        // *******\n        // * BCC *\n        // *******\n\n        // Branch on carry clear\n        if (this.F_CARRY === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 4: {\n        // *******\n        // * BCS *\n        // *******\n\n        // Branch on carry set\n        if (this.F_CARRY === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 5: {\n        // *******\n        // * BEQ *\n        // *******\n\n        // Branch on zero\n        if (this.F_ZERO === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 6: {\n        // *******\n        // * BIT *\n        // *******\n\n        temp = this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        temp &= this.REG_ACC;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 7: {\n        // *******\n        // * BMI *\n        // *******\n\n        // Branch on negative result\n        if (this.F_SIGN === 1) {\n          cycleCount++;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 8: {\n        // *******\n        // * BNE *\n        // *******\n\n        // Branch on not zero\n        if (this.F_ZERO !== 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 9: {\n        // *******\n        // * BPL *\n        // *******\n\n        // Branch on positive result\n        if (this.F_SIGN === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 10: {\n        // *******\n        // * BRK *\n        // *******\n\n        this.REG_PC += 2;\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.F_BRK = 1;\n\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n\n        this.F_INTERRUPT = 1;\n        //this.REG_PC = load(0xFFFE) | (load(0xFFFF) << 8);\n        this.REG_PC = this.load16bit(0xfffe);\n        this.REG_PC--;\n        break;\n      }\n      case 11: {\n        // *******\n        // * BVC *\n        // *******\n\n        // Branch on overflow clear\n        if (this.F_OVERFLOW === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 12: {\n        // *******\n        // * BVS *\n        // *******\n\n        // Branch on overflow set\n        if (this.F_OVERFLOW === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 13: {\n        // *******\n        // * CLC *\n        // *******\n\n        // Clear carry flag\n        this.F_CARRY = 0;\n        break;\n      }\n      case 14: {\n        // *******\n        // * CLD *\n        // *******\n\n        // Clear decimal flag\n        this.F_DECIMAL = 0;\n        break;\n      }\n      case 15: {\n        // *******\n        // * CLI *\n        // *******\n\n        // Clear interrupt flag\n        this.F_INTERRUPT = 0;\n        break;\n      }\n      case 16: {\n        // *******\n        // * CLV *\n        // *******\n\n        // Clear overflow flag\n        this.F_OVERFLOW = 0;\n        break;\n      }\n      case 17: {\n        // *******\n        // * CMP *\n        // *******\n\n        // Compare memory and accumulator:\n        temp = this.REG_ACC - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 18: {\n        // *******\n        // * CPX *\n        // *******\n\n        // Compare memory and index X:\n        temp = this.REG_X - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 19: {\n        // *******\n        // * CPY *\n        // *******\n\n        // Compare memory and index Y:\n        temp = this.REG_Y - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 20: {\n        // *******\n        // * DEC *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp);\n        break;\n      }\n      case 21: {\n        // *******\n        // * DEX *\n        // *******\n\n        // Decrement index X by one:\n        this.REG_X = (this.REG_X - 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 22: {\n        // *******\n        // * DEY *\n        // *******\n\n        // Decrement index Y by one:\n        this.REG_Y = (this.REG_Y - 1) & 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 23: {\n        // *******\n        // * EOR *\n        // *******\n\n        // XOR Memory with accumulator, store in accumulator:\n        this.REG_ACC = (this.load(addr) ^ this.REG_ACC) & 0xff;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 24: {\n        // *******\n        // * INC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp & 0xff);\n        break;\n      }\n      case 25: {\n        // *******\n        // * INX *\n        // *******\n\n        // Increment index X by one:\n        this.REG_X = (this.REG_X + 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 26: {\n        // *******\n        // * INY *\n        // *******\n\n        // Increment index Y by one:\n        this.REG_Y++;\n        this.REG_Y &= 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 27: {\n        // *******\n        // * JMP *\n        // *******\n\n        // Jump to new location:\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 28: {\n        // *******\n        // * JSR *\n        // *******\n\n        // Jump to new location, saving return address.\n        // Push return address on stack:\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 29: {\n        // *******\n        // * LDA *\n        // *******\n\n        // Load accumulator with memory:\n        this.REG_ACC = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 30: {\n        // *******\n        // * LDX *\n        // *******\n\n        // Load index X with memory:\n        this.REG_X = this.load(addr);\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 31: {\n        // *******\n        // * LDY *\n        // *******\n\n        // Load index Y with memory:\n        this.REG_Y = this.load(addr);\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 32: {\n        // *******\n        // * LSR *\n        // *******\n\n        // Shift right one bit:\n        if (addrMode === 4) {\n          // ADDR_ACC\n\n          temp = this.REG_ACC & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr) & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = 0;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 33: {\n        // *******\n        // * NOP *\n        // *******\n\n        // No OPeration.\n        // Ignore.\n        break;\n      }\n      case 34: {\n        // *******\n        // * ORA *\n        // *******\n\n        // OR memory with accumulator, store in accumulator.\n        temp = (this.load(addr) | this.REG_ACC) & 255;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.REG_ACC = temp;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 35: {\n        // *******\n        // * PHA *\n        // *******\n\n        // Push accumulator on stack\n        this.push(this.REG_ACC);\n        break;\n      }\n      case 36: {\n        // *******\n        // * PHP *\n        // *******\n\n        // Push processor status on stack\n        this.F_BRK = 1;\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n        break;\n      }\n      case 37: {\n        // *******\n        // * PLA *\n        // *******\n\n        // Pull accumulator from stack\n        this.REG_ACC = this.pull();\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 38: {\n        // *******\n        // * PLP *\n        // *******\n\n        // Pull processor status from stack\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 1 ? 0 : 1;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 39: {\n        // *******\n        // * ROL *\n        // *******\n\n        // Rotate one bit left\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          temp = this.REG_ACC;\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 40: {\n        // *******\n        // * ROR *\n        // *******\n\n        // Rotate one bit right\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          add = this.F_CARRY << 7;\n          this.F_CARRY = this.REG_ACC & 1;\n          temp = (this.REG_ACC >> 1) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY << 7;\n          this.F_CARRY = temp & 1;\n          temp = (temp >> 1) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 41: {\n        // *******\n        // * RTI *\n        // *******\n\n        // Return from interrupt. Pull status and PC from stack.\n\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 0 ? 1 : 0;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n        if (this.REG_PC === 0xffff) {\n          return;\n        }\n        this.REG_PC--;\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 42: {\n        // *******\n        // * RTS *\n        // *******\n\n        // Return from subroutine. Pull PC from stack.\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n\n        if (this.REG_PC === 0xffff) {\n          return; // return from NSF play routine:\n        }\n        break;\n      }\n      case 43: {\n        // *******\n        // * SBC *\n        // *******\n\n        temp = this.REG_ACC - this.load(addr) - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 44: {\n        // *******\n        // * SEC *\n        // *******\n\n        // Set carry flag\n        this.F_CARRY = 1;\n        break;\n      }\n      case 45: {\n        // *******\n        // * SED *\n        // *******\n\n        // Set decimal mode\n        this.F_DECIMAL = 1;\n        break;\n      }\n      case 46: {\n        // *******\n        // * SEI *\n        // *******\n\n        // Set interrupt disable status\n        this.F_INTERRUPT = 1;\n        break;\n      }\n      case 47: {\n        // *******\n        // * STA *\n        // *******\n\n        // Store accumulator in memory\n        this.write(addr, this.REG_ACC);\n        break;\n      }\n      case 48: {\n        // *******\n        // * STX *\n        // *******\n\n        // Store index X in memory\n        this.write(addr, this.REG_X);\n        break;\n      }\n      case 49: {\n        // *******\n        // * STY *\n        // *******\n\n        // Store index Y in memory:\n        this.write(addr, this.REG_Y);\n        break;\n      }\n      case 50: {\n        // *******\n        // * TAX *\n        // *******\n\n        // Transfer accumulator to index X:\n        this.REG_X = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 51: {\n        // *******\n        // * TAY *\n        // *******\n\n        // Transfer accumulator to index Y:\n        this.REG_Y = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 52: {\n        // *******\n        // * TSX *\n        // *******\n\n        // Transfer stack pointer to index X:\n        this.REG_X = this.REG_SP - 0x0100;\n        this.F_SIGN = (this.REG_SP >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 53: {\n        // *******\n        // * TXA *\n        // *******\n\n        // Transfer index X to accumulator:\n        this.REG_ACC = this.REG_X;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 54: {\n        // *******\n        // * TXS *\n        // *******\n\n        // Transfer index X to stack pointer:\n        this.REG_SP = this.REG_X + 0x0100;\n        this.stackWrap();\n        break;\n      }\n      case 55: {\n        // *******\n        // * TYA *\n        // *******\n\n        // Transfer index Y to accumulator:\n        this.REG_ACC = this.REG_Y;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 56: {\n        // *******\n        // * ALR *\n        // *******\n\n        // Shift right one bit after ANDing:\n        temp = this.REG_ACC & this.load(addr);\n        this.F_CARRY = temp & 1;\n        this.REG_ACC = this.F_ZERO = temp >> 1;\n        this.F_SIGN = 0;\n        break;\n      }\n      case 57: {\n        // *******\n        // * ANC *\n        // *******\n\n        // AND accumulator, setting carry to bit 7 result.\n        this.REG_ACC = this.F_ZERO = this.REG_ACC & this.load(addr);\n        this.F_CARRY = this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        break;\n      }\n      case 58: {\n        // *******\n        // * ARR *\n        // *******\n\n        // Rotate right one bit after ANDing:\n        temp = this.REG_ACC & this.load(addr);\n        this.REG_ACC = this.F_ZERO = (temp >> 1) + (this.F_CARRY << 7);\n        this.F_SIGN = this.F_CARRY;\n        this.F_CARRY = (temp >> 7) & 1;\n        this.F_OVERFLOW = ((temp >> 7) ^ (temp >> 6)) & 1;\n        break;\n      }\n      case 59: {\n        // *******\n        // * AXS *\n        // *******\n\n        // Set X to (X AND A) - value.\n        temp = (this.REG_X & this.REG_ACC) - this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_X ^ temp) & 0x80) !== 0 &&\n          ((this.REG_X ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_X = temp & 0xff;\n        break;\n      }\n      case 60: {\n        // *******\n        // * LAX *\n        // *******\n\n        // Load A and X with memory:\n        this.REG_ACC = this.REG_X = this.F_ZERO = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 61: {\n        // *******\n        // * SAX *\n        // *******\n\n        // Store A AND X in memory:\n        this.write(addr, this.REG_ACC & this.REG_X);\n        break;\n      }\n      case 62: {\n        // *******\n        // * DCP *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.write(addr, temp);\n\n        // Then compare with the accumulator:\n        temp = this.REG_ACC - temp;\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 63: {\n        // *******\n        // * ISC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.write(addr, temp);\n\n        // Then subtract from the accumulator:\n        temp = this.REG_ACC - temp - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 64: {\n        // *******\n        // * RLA *\n        // *******\n\n        // Rotate one bit left\n        temp = this.load(addr);\n        add = this.F_CARRY;\n        this.F_CARRY = (temp >> 7) & 1;\n        temp = ((temp << 1) & 0xff) + add;\n        this.write(addr, temp);\n\n        // Then AND with the accumulator.\n        this.REG_ACC = this.REG_ACC & temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 65: {\n        // *******\n        // * RRA *\n        // *******\n\n        // Rotate one bit right\n        temp = this.load(addr);\n        add = this.F_CARRY << 7;\n        this.F_CARRY = temp & 1;\n        temp = (temp >> 1) + add;\n        this.write(addr, temp);\n\n        // Then add to the accumulator\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 66: {\n        // *******\n        // * SLO *\n        // *******\n\n        // Shift one bit left\n        temp = this.load(addr);\n        this.F_CARRY = (temp >> 7) & 1;\n        temp = (temp << 1) & 255;\n        this.write(addr, temp);\n\n        // Then OR with the accumulator.\n        this.REG_ACC = this.REG_ACC | temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 67: {\n        // *******\n        // * SRE *\n        // *******\n\n        // Shift one bit right\n        temp = this.load(addr) & 0xff;\n        this.F_CARRY = temp & 1;\n        temp >>= 1;\n        this.write(addr, temp);\n\n        // Then XOR with the accumulator.\n        this.REG_ACC = this.REG_ACC ^ temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 68: {\n        // *******\n        // * SKB *\n        // *******\n\n        // Do nothing\n        break;\n      }\n      case 69: {\n        // *******\n        // * IGN *\n        // *******\n\n        // Do nothing but load.\n        // TODO: Properly implement the double-reads.\n        this.load(addr);\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n\n      default: {\n        // *******\n        // * ??? *\n        // *******\n\n        this.nes.stop();\n        this.nes.crashMessage =\n          \"Game crashed, invalid opcode at address $\" + opaddr.toString(16);\n        break;\n      }\n    } // end of switch\n\n    return cycleCount;\n  },\n\n  load: function(addr) {\n    if (addr < 0x2000) {\n      return this.mem[addr & 0x7ff];\n    } else {\n      return this.nes.mmap.load(addr);\n    }\n  },\n\n  load16bit: function(addr) {\n    if (addr < 0x1fff) {\n      return this.mem[addr & 0x7ff] | (this.mem[(addr + 1) & 0x7ff] << 8);\n    } else {\n      return this.nes.mmap.load(addr) | (this.nes.mmap.load(addr + 1) << 8);\n    }\n  },\n\n  write: function(addr, val) {\n    if (addr < 0x2000) {\n      this.mem[addr & 0x7ff] = val;\n    } else {\n      this.nes.mmap.write(addr, val);\n    }\n  },\n\n  requestIrq: function(type) {\n    if (this.irqRequested) {\n      if (type === this.IRQ_NORMAL) {\n        return;\n      }\n      // console.log(\"too fast irqs. type=\"+type);\n    }\n    this.irqRequested = true;\n    this.irqType = type;\n  },\n\n  push: function(value) {\n    this.nes.mmap.write(this.REG_SP, value);\n    this.REG_SP--;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  stackWrap: function() {\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  pull: function() {\n    this.REG_SP++;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n    return this.nes.mmap.load(this.REG_SP);\n  },\n\n  pageCrossed: function(addr1, addr2) {\n    return (addr1 & 0xff00) !== (addr2 & 0xff00);\n  },\n\n  haltCycles: function(cycles) {\n    this.cyclesToHalt += cycles;\n  },\n\n  doNonMaskableInterrupt: function(status) {\n    if ((this.nes.mmap.load(0x2000) & 128) !== 0) {\n      // Check whether VBlank Interrupts are enabled\n\n      this.REG_PC_NEW++;\n      this.push((this.REG_PC_NEW >> 8) & 0xff);\n      this.push(this.REG_PC_NEW & 0xff);\n      //this.F_INTERRUPT_NEW = 1;\n      this.push(status);\n\n      this.REG_PC_NEW =\n        this.nes.mmap.load(0xfffa) | (this.nes.mmap.load(0xfffb) << 8);\n      this.REG_PC_NEW--;\n    }\n  },\n\n  doResetInterrupt: function() {\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffc) | (this.nes.mmap.load(0xfffd) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  doIrq: function(status) {\n    this.REG_PC_NEW++;\n    this.push((this.REG_PC_NEW >> 8) & 0xff);\n    this.push(this.REG_PC_NEW & 0xff);\n    this.push(status);\n    this.F_INTERRUPT_NEW = 1;\n    this.F_BRK_NEW = 0;\n\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffe) | (this.nes.mmap.load(0xffff) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  getStatus: function() {\n    return (\n      this.F_CARRY |\n      (this.F_ZERO << 1) |\n      (this.F_INTERRUPT << 2) |\n      (this.F_DECIMAL << 3) |\n      (this.F_BRK << 4) |\n      (this.F_NOTUSED << 5) |\n      (this.F_OVERFLOW << 6) |\n      (this.F_SIGN << 7)\n    );\n  },\n\n  setStatus: function(st) {\n    this.F_CARRY = st & 1;\n    this.F_ZERO = (st >> 1) & 1;\n    this.F_INTERRUPT = (st >> 2) & 1;\n    this.F_DECIMAL = (st >> 3) & 1;\n    this.F_BRK = (st >> 4) & 1;\n    this.F_NOTUSED = (st >> 5) & 1;\n    this.F_OVERFLOW = (st >> 6) & 1;\n    this.F_SIGN = (st >> 7) & 1;\n  },\n\n  JSON_PROPERTIES: [\n    \"mem\",\n    \"cyclesToHalt\",\n    \"irqRequested\",\n    \"irqType\",\n    // Registers\n    \"REG_ACC\",\n    \"REG_X\",\n    \"REG_Y\",\n    \"REG_SP\",\n    \"REG_PC\",\n    \"REG_PC_NEW\",\n    \"REG_STATUS\",\n    // Status\n    \"F_CARRY\",\n    \"F_DECIMAL\",\n    \"F_INTERRUPT\",\n    \"F_INTERRUPT_NEW\",\n    \"F_OVERFLOW\",\n    \"F_SIGN\",\n    \"F_ZERO\",\n    \"F_NOTUSED\",\n    \"F_NOTUSED_NEW\",\n    \"F_BRK\",\n    \"F_BRK_NEW\"\n  ],\n\n  toJSON: function() {\n    return utils.toJSON(this);\n  },\n\n  fromJSON: function(s) {\n    utils.fromJSON(this, s);\n  }\n};\n\n// Generates and provides an array of details about instructions\nvar OpData = function() {\n  this.opdata = new Array(256);\n\n  // Set all to invalid instruction (to detect crashes):\n  for (var i = 0; i < 256; i++) this.opdata[i] = 0xff;\n\n  // Now fill in all valid opcodes:\n\n  // ADC:\n  this.setOp(this.INS_ADC, 0x69, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ADC, 0x65, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ADC, 0x75, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ADC, 0x6d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ADC, 0x7d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ADC, 0x79, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ADC, 0x61, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ADC, 0x71, this.ADDR_POSTIDXIND, 2, 5);\n\n  // AND:\n  this.setOp(this.INS_AND, 0x29, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_AND, 0x25, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_AND, 0x35, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_AND, 0x2d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_AND, 0x3d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_AND, 0x39, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_AND, 0x21, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_AND, 0x31, this.ADDR_POSTIDXIND, 2, 5);\n\n  // ASL:\n  this.setOp(this.INS_ASL, 0x0a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ASL, 0x06, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ASL, 0x16, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ASL, 0x0e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ASL, 0x1e, this.ADDR_ABSX, 3, 7);\n\n  // BCC:\n  this.setOp(this.INS_BCC, 0x90, this.ADDR_REL, 2, 2);\n\n  // BCS:\n  this.setOp(this.INS_BCS, 0xb0, this.ADDR_REL, 2, 2);\n\n  // BEQ:\n  this.setOp(this.INS_BEQ, 0xf0, this.ADDR_REL, 2, 2);\n\n  // BIT:\n  this.setOp(this.INS_BIT, 0x24, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_BIT, 0x2c, this.ADDR_ABS, 3, 4);\n\n  // BMI:\n  this.setOp(this.INS_BMI, 0x30, this.ADDR_REL, 2, 2);\n\n  // BNE:\n  this.setOp(this.INS_BNE, 0xd0, this.ADDR_REL, 2, 2);\n\n  // BPL:\n  this.setOp(this.INS_BPL, 0x10, this.ADDR_REL, 2, 2);\n\n  // BRK:\n  this.setOp(this.INS_BRK, 0x00, this.ADDR_IMP, 1, 7);\n\n  // BVC:\n  this.setOp(this.INS_BVC, 0x50, this.ADDR_REL, 2, 2);\n\n  // BVS:\n  this.setOp(this.INS_BVS, 0x70, this.ADDR_REL, 2, 2);\n\n  // CLC:\n  this.setOp(this.INS_CLC, 0x18, this.ADDR_IMP, 1, 2);\n\n  // CLD:\n  this.setOp(this.INS_CLD, 0xd8, this.ADDR_IMP, 1, 2);\n\n  // CLI:\n  this.setOp(this.INS_CLI, 0x58, this.ADDR_IMP, 1, 2);\n\n  // CLV:\n  this.setOp(this.INS_CLV, 0xb8, this.ADDR_IMP, 1, 2);\n\n  // CMP:\n  this.setOp(this.INS_CMP, 0xc9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CMP, 0xc5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CMP, 0xd5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_CMP, 0xcd, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_CMP, 0xdd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_CMP, 0xd9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_CMP, 0xc1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_CMP, 0xd1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // CPX:\n  this.setOp(this.INS_CPX, 0xe0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPX, 0xe4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPX, 0xec, this.ADDR_ABS, 3, 4);\n\n  // CPY:\n  this.setOp(this.INS_CPY, 0xc0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPY, 0xc4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPY, 0xcc, this.ADDR_ABS, 3, 4);\n\n  // DEC:\n  this.setOp(this.INS_DEC, 0xc6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DEC, 0xd6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DEC, 0xce, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DEC, 0xde, this.ADDR_ABSX, 3, 7);\n\n  // DEX:\n  this.setOp(this.INS_DEX, 0xca, this.ADDR_IMP, 1, 2);\n\n  // DEY:\n  this.setOp(this.INS_DEY, 0x88, this.ADDR_IMP, 1, 2);\n\n  // EOR:\n  this.setOp(this.INS_EOR, 0x49, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_EOR, 0x45, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_EOR, 0x55, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_EOR, 0x4d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_EOR, 0x5d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_EOR, 0x59, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_EOR, 0x41, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_EOR, 0x51, this.ADDR_POSTIDXIND, 2, 5);\n\n  // INC:\n  this.setOp(this.INS_INC, 0xe6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_INC, 0xf6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_INC, 0xee, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_INC, 0xfe, this.ADDR_ABSX, 3, 7);\n\n  // INX:\n  this.setOp(this.INS_INX, 0xe8, this.ADDR_IMP, 1, 2);\n\n  // INY:\n  this.setOp(this.INS_INY, 0xc8, this.ADDR_IMP, 1, 2);\n\n  // JMP:\n  this.setOp(this.INS_JMP, 0x4c, this.ADDR_ABS, 3, 3);\n  this.setOp(this.INS_JMP, 0x6c, this.ADDR_INDABS, 3, 5);\n\n  // JSR:\n  this.setOp(this.INS_JSR, 0x20, this.ADDR_ABS, 3, 6);\n\n  // LDA:\n  this.setOp(this.INS_LDA, 0xa9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDA, 0xa5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDA, 0xb5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDA, 0xad, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDA, 0xbd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_LDA, 0xb9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_LDA, 0xa1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LDA, 0xb1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // LDX:\n  this.setOp(this.INS_LDX, 0xa2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDX, 0xa6, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDX, 0xb6, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LDX, 0xae, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDX, 0xbe, this.ADDR_ABSY, 3, 4);\n\n  // LDY:\n  this.setOp(this.INS_LDY, 0xa0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDY, 0xa4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDY, 0xb4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDY, 0xac, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDY, 0xbc, this.ADDR_ABSX, 3, 4);\n\n  // LSR:\n  this.setOp(this.INS_LSR, 0x4a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_LSR, 0x46, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_LSR, 0x56, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_LSR, 0x4e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_LSR, 0x5e, this.ADDR_ABSX, 3, 7);\n\n  // NOP:\n  this.setOp(this.INS_NOP, 0x1a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x3a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x5a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x7a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xda, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xea, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xfa, this.ADDR_IMP, 1, 2);\n\n  // ORA:\n  this.setOp(this.INS_ORA, 0x09, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ORA, 0x05, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ORA, 0x15, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ORA, 0x0d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ORA, 0x1d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ORA, 0x19, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ORA, 0x01, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ORA, 0x11, this.ADDR_POSTIDXIND, 2, 5);\n\n  // PHA:\n  this.setOp(this.INS_PHA, 0x48, this.ADDR_IMP, 1, 3);\n\n  // PHP:\n  this.setOp(this.INS_PHP, 0x08, this.ADDR_IMP, 1, 3);\n\n  // PLA:\n  this.setOp(this.INS_PLA, 0x68, this.ADDR_IMP, 1, 4);\n\n  // PLP:\n  this.setOp(this.INS_PLP, 0x28, this.ADDR_IMP, 1, 4);\n\n  // ROL:\n  this.setOp(this.INS_ROL, 0x2a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROL, 0x26, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROL, 0x36, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROL, 0x2e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROL, 0x3e, this.ADDR_ABSX, 3, 7);\n\n  // ROR:\n  this.setOp(this.INS_ROR, 0x6a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROR, 0x66, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROR, 0x76, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROR, 0x6e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROR, 0x7e, this.ADDR_ABSX, 3, 7);\n\n  // RTI:\n  this.setOp(this.INS_RTI, 0x40, this.ADDR_IMP, 1, 6);\n\n  // RTS:\n  this.setOp(this.INS_RTS, 0x60, this.ADDR_IMP, 1, 6);\n\n  // SBC:\n  this.setOp(this.INS_SBC, 0xe9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SBC, 0xe5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SBC, 0xf5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_SBC, 0xed, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SBC, 0xfd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_SBC, 0xf9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_SBC, 0xe1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SBC, 0xf1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // SEC:\n  this.setOp(this.INS_SEC, 0x38, this.ADDR_IMP, 1, 2);\n\n  // SED:\n  this.setOp(this.INS_SED, 0xf8, this.ADDR_IMP, 1, 2);\n\n  // SEI:\n  this.setOp(this.INS_SEI, 0x78, this.ADDR_IMP, 1, 2);\n\n  // STA:\n  this.setOp(this.INS_STA, 0x85, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STA, 0x95, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STA, 0x8d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_STA, 0x9d, this.ADDR_ABSX, 3, 5);\n  this.setOp(this.INS_STA, 0x99, this.ADDR_ABSY, 3, 5);\n  this.setOp(this.INS_STA, 0x81, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_STA, 0x91, this.ADDR_POSTIDXIND, 2, 6);\n\n  // STX:\n  this.setOp(this.INS_STX, 0x86, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STX, 0x96, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_STX, 0x8e, this.ADDR_ABS, 3, 4);\n\n  // STY:\n  this.setOp(this.INS_STY, 0x84, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STY, 0x94, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STY, 0x8c, this.ADDR_ABS, 3, 4);\n\n  // TAX:\n  this.setOp(this.INS_TAX, 0xaa, this.ADDR_IMP, 1, 2);\n\n  // TAY:\n  this.setOp(this.INS_TAY, 0xa8, this.ADDR_IMP, 1, 2);\n\n  // TSX:\n  this.setOp(this.INS_TSX, 0xba, this.ADDR_IMP, 1, 2);\n\n  // TXA:\n  this.setOp(this.INS_TXA, 0x8a, this.ADDR_IMP, 1, 2);\n\n  // TXS:\n  this.setOp(this.INS_TXS, 0x9a, this.ADDR_IMP, 1, 2);\n\n  // TYA:\n  this.setOp(this.INS_TYA, 0x98, this.ADDR_IMP, 1, 2);\n\n  // ALR:\n  this.setOp(this.INS_ALR, 0x4b, this.ADDR_IMM, 2, 2);\n\n  // ANC:\n  this.setOp(this.INS_ANC, 0x0b, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ANC, 0x2b, this.ADDR_IMM, 2, 2);\n\n  // ARR:\n  this.setOp(this.INS_ARR, 0x6b, this.ADDR_IMM, 2, 2);\n\n  // AXS:\n  this.setOp(this.INS_AXS, 0xcb, this.ADDR_IMM, 2, 2);\n\n  // LAX:\n  this.setOp(this.INS_LAX, 0xa3, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LAX, 0xa7, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LAX, 0xaf, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LAX, 0xb3, this.ADDR_POSTIDXIND, 2, 5);\n  this.setOp(this.INS_LAX, 0xb7, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LAX, 0xbf, this.ADDR_ABSY, 3, 4);\n\n  // SAX:\n  this.setOp(this.INS_SAX, 0x83, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SAX, 0x87, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SAX, 0x8f, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SAX, 0x97, this.ADDR_ZPY, 2, 4);\n\n  // DCP:\n  this.setOp(this.INS_DCP, 0xc3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xc7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DCP, 0xcf, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DCP, 0xd3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xd7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DCP, 0xdb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_DCP, 0xdf, this.ADDR_ABSX, 3, 7);\n\n  // ISC:\n  this.setOp(this.INS_ISC, 0xe3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xe7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ISC, 0xef, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ISC, 0xf3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xf7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ISC, 0xfb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_ISC, 0xff, this.ADDR_ABSX, 3, 7);\n\n  // RLA:\n  this.setOp(this.INS_RLA, 0x23, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x27, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RLA, 0x2f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RLA, 0x33, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x37, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RLA, 0x3b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RLA, 0x3f, this.ADDR_ABSX, 3, 7);\n\n  // RRA:\n  this.setOp(this.INS_RRA, 0x63, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x67, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RRA, 0x6f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RRA, 0x73, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x77, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RRA, 0x7b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RRA, 0x7f, this.ADDR_ABSX, 3, 7);\n\n  // SLO:\n  this.setOp(this.INS_SLO, 0x03, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x07, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SLO, 0x0f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SLO, 0x13, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x17, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SLO, 0x1b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SLO, 0x1f, this.ADDR_ABSX, 3, 7);\n\n  // SRE:\n  this.setOp(this.INS_SRE, 0x43, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x47, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SRE, 0x4f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SRE, 0x53, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x57, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SRE, 0x5b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SRE, 0x5f, this.ADDR_ABSX, 3, 7);\n\n  // SKB:\n  this.setOp(this.INS_SKB, 0x80, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x82, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x89, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xc2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xe2, this.ADDR_IMM, 2, 2);\n\n  // SKB:\n  this.setOp(this.INS_IGN, 0x0c, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_IGN, 0x1c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x3c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x5c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x7c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xdc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xfc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x04, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x44, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x64, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x14, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x34, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x54, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x74, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xd4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xf4, this.ADDR_ZPX, 2, 4);\n\n  // prettier-ignore\n  this.cycTable = new Array(\n    /*0x00*/ 7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,\n    /*0x10*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x20*/ 6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,\n    /*0x30*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x40*/ 6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,\n    /*0x50*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x60*/ 6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,\n    /*0x70*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x80*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0x90*/ 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,\n    /*0xA0*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0xB0*/ 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,\n    /*0xC0*/ 2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xD0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0xE0*/ 2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xF0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7\n  );\n\n  this.instname = new Array(70);\n\n  // Instruction Names:\n  this.instname[0] = \"ADC\";\n  this.instname[1] = \"AND\";\n  this.instname[2] = \"ASL\";\n  this.instname[3] = \"BCC\";\n  this.instname[4] = \"BCS\";\n  this.instname[5] = \"BEQ\";\n  this.instname[6] = \"BIT\";\n  this.instname[7] = \"BMI\";\n  this.instname[8] = \"BNE\";\n  this.instname[9] = \"BPL\";\n  this.instname[10] = \"BRK\";\n  this.instname[11] = \"BVC\";\n  this.instname[12] = \"BVS\";\n  this.instname[13] = \"CLC\";\n  this.instname[14] = \"CLD\";\n  this.instname[15] = \"CLI\";\n  this.instname[16] = \"CLV\";\n  this.instname[17] = \"CMP\";\n  this.instname[18] = \"CPX\";\n  this.instname[19] = \"CPY\";\n  this.instname[20] = \"DEC\";\n  this.instname[21] = \"DEX\";\n  this.instname[22] = \"DEY\";\n  this.instname[23] = \"EOR\";\n  this.instname[24] = \"INC\";\n  this.instname[25] = \"INX\";\n  this.instname[26] = \"INY\";\n  this.instname[27] = \"JMP\";\n  this.instname[28] = \"JSR\";\n  this.instname[29] = \"LDA\";\n  this.instname[30] = \"LDX\";\n  this.instname[31] = \"LDY\";\n  this.instname[32] = \"LSR\";\n  this.instname[33] = \"NOP\";\n  this.instname[34] = \"ORA\";\n  this.instname[35] = \"PHA\";\n  this.instname[36] = \"PHP\";\n  this.instname[37] = \"PLA\";\n  this.instname[38] = \"PLP\";\n  this.instname[39] = \"ROL\";\n  this.instname[40] = \"ROR\";\n  this.instname[41] = \"RTI\";\n  this.instname[42] = \"RTS\";\n  this.instname[43] = \"SBC\";\n  this.instname[44] = \"SEC\";\n  this.instname[45] = \"SED\";\n  this.instname[46] = \"SEI\";\n  this.instname[47] = \"STA\";\n  this.instname[48] = \"STX\";\n  this.instname[49] = \"STY\";\n  this.instname[50] = \"TAX\";\n  this.instname[51] = \"TAY\";\n  this.instname[52] = \"TSX\";\n  this.instname[53] = \"TXA\";\n  this.instname[54] = \"TXS\";\n  this.instname[55] = \"TYA\";\n  this.instname[56] = \"ALR\";\n  this.instname[57] = \"ANC\";\n  this.instname[58] = \"ARR\";\n  this.instname[59] = \"AXS\";\n  this.instname[60] = \"LAX\";\n  this.instname[61] = \"SAX\";\n  this.instname[62] = \"DCP\";\n  this.instname[63] = \"ISC\";\n  this.instname[64] = \"RLA\";\n  this.instname[65] = \"RRA\";\n  this.instname[66] = \"SLO\";\n  this.instname[67] = \"SRE\";\n  this.instname[68] = \"SKB\";\n  this.instname[69] = \"IGN\";\n\n  this.addrDesc = new Array(\n    \"Zero Page           \",\n    \"Relative            \",\n    \"Implied             \",\n    \"Absolute            \",\n    \"Accumulator         \",\n    \"Immediate           \",\n    \"Zero Page,X         \",\n    \"Zero Page,Y         \",\n    \"Absolute,X          \",\n    \"Absolute,Y          \",\n    \"Preindexed Indirect \",\n    \"Postindexed Indirect\",\n    \"Indirect Absolute   \"\n  );\n};\n\nOpData.prototype = {\n  INS_ADC: 0,\n  INS_AND: 1,\n  INS_ASL: 2,\n\n  INS_BCC: 3,\n  INS_BCS: 4,\n  INS_BEQ: 5,\n  INS_BIT: 6,\n  INS_BMI: 7,\n  INS_BNE: 8,\n  INS_BPL: 9,\n  INS_BRK: 10,\n  INS_BVC: 11,\n  INS_BVS: 12,\n\n  INS_CLC: 13,\n  INS_CLD: 14,\n  INS_CLI: 15,\n  INS_CLV: 16,\n  INS_CMP: 17,\n  INS_CPX: 18,\n  INS_CPY: 19,\n\n  INS_DEC: 20,\n  INS_DEX: 21,\n  INS_DEY: 22,\n\n  INS_EOR: 23,\n\n  INS_INC: 24,\n  INS_INX: 25,\n  INS_INY: 26,\n\n  INS_JMP: 27,\n  INS_JSR: 28,\n\n  INS_LDA: 29,\n  INS_LDX: 30,\n  INS_LDY: 31,\n  INS_LSR: 32,\n\n  INS_NOP: 33,\n\n  INS_ORA: 34,\n\n  INS_PHA: 35,\n  INS_PHP: 36,\n  INS_PLA: 37,\n  INS_PLP: 38,\n\n  INS_ROL: 39,\n  INS_ROR: 40,\n  INS_RTI: 41,\n  INS_RTS: 42,\n\n  INS_SBC: 43,\n  INS_SEC: 44,\n  INS_SED: 45,\n  INS_SEI: 46,\n  INS_STA: 47,\n  INS_STX: 48,\n  INS_STY: 49,\n\n  INS_TAX: 50,\n  INS_TAY: 51,\n  INS_TSX: 52,\n  INS_TXA: 53,\n  INS_TXS: 54,\n  INS_TYA: 55,\n\n  INS_ALR: 56,\n  INS_ANC: 57,\n  INS_ARR: 58,\n  INS_AXS: 59,\n  INS_LAX: 60,\n  INS_SAX: 61,\n  INS_DCP: 62,\n  INS_ISC: 63,\n  INS_RLA: 64,\n  INS_RRA: 65,\n  INS_SLO: 66,\n  INS_SRE: 67,\n  INS_SKB: 68,\n  INS_IGN: 69,\n\n  INS_DUMMY: 70, // dummy instruction used for 'halting' the processor some cycles\n\n  // -------------------------------- //\n\n  // Addressing modes:\n  ADDR_ZP: 0,\n  ADDR_REL: 1,\n  ADDR_IMP: 2,\n  ADDR_ABS: 3,\n  ADDR_ACC: 4,\n  ADDR_IMM: 5,\n  ADDR_ZPX: 6,\n  ADDR_ZPY: 7,\n  ADDR_ABSX: 8,\n  ADDR_ABSY: 9,\n  ADDR_PREIDXIND: 10,\n  ADDR_POSTIDXIND: 11,\n  ADDR_INDABS: 12,\n\n  setOp: function(inst, op, addr, size, cycles) {\n    this.opdata[op] =\n      (inst & 0xff) |\n      ((addr & 0xff) << 8) |\n      ((size & 0xff) << 16) |\n      ((cycles & 0xff) << 24);\n  }\n};\n\nmodule.exports = CPU;\n","var Tile = require(\"./tile\");\nvar utils = require(\"./utils\");\n\nvar PPU = function(nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.vramMem = null;\n  this.spriteMem = null;\n  this.vramAddress = null;\n  this.vramTmpAddress = null;\n  this.vramBufferedReadValue = null;\n  this.firstWrite = null;\n  this.sramAddress = null;\n  this.currentMirroring = null;\n  this.requestEndFrame = null;\n  this.nmiOk = null;\n  this.dummyCycleToggle = null;\n  this.validTileData = null;\n  this.nmiCounter = null;\n  this.scanlineAlreadyRendered = null;\n  this.f_nmiOnVblank = null;\n  this.f_spriteSize = null;\n  this.f_bgPatternTable = null;\n  this.f_spPatternTable = null;\n  this.f_addrInc = null;\n  this.f_nTblAddress = null;\n  this.f_color = null;\n  this.f_spVisibility = null;\n  this.f_bgVisibility = null;\n  this.f_spClipping = null;\n  this.f_bgClipping = null;\n  this.f_dispType = null;\n  this.cntFV = null;\n  this.cntV = null;\n  this.cntH = null;\n  this.cntVT = null;\n  this.cntHT = null;\n  this.regFV = null;\n  this.regV = null;\n  this.regH = null;\n  this.regVT = null;\n  this.regHT = null;\n  this.regFH = null;\n  this.regS = null;\n  this.curNt = null;\n  this.attrib = null;\n  this.buffer = null;\n  this.bgbuffer = null;\n  this.pixrendered = null;\n\n  this.validTileData = null;\n  this.scantile = null;\n  this.scanline = null;\n  this.lastRenderedScanline = null;\n  this.curX = null;\n  this.sprX = null;\n  this.sprY = null;\n  this.sprTile = null;\n  this.sprCol = null;\n  this.vertFlip = null;\n  this.horiFlip = null;\n  this.bgPriority = null;\n  this.spr0HitX = null;\n  this.spr0HitY = null;\n  this.hitSpr0 = null;\n  this.sprPalette = null;\n  this.imgPalette = null;\n  this.ptTile = null;\n  this.ntable1 = null;\n  this.currentMirroring = null;\n  this.nameTable = null;\n  this.vramMirrorTable = null;\n  this.palTable = null;\n\n  // Rendering Options:\n  this.showSpr0Hit = false;\n  this.clipToTvSize = true;\n\n  this.reset();\n};\n\nPPU.prototype = {\n  // Status flags:\n  STATUS_VRAMWRITE: 4,\n  STATUS_SLSPRITECOUNT: 5,\n  STATUS_SPRITE0HIT: 6,\n  STATUS_VBLANK: 7,\n\n  reset: function() {\n    var i;\n\n    // Memory\n    this.vramMem = new Array(0x8000);\n    this.spriteMem = new Array(0x100);\n    for (i = 0; i < this.vramMem.length; i++) {\n      this.vramMem[i] = 0;\n    }\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteMem[i] = 0;\n    }\n\n    // VRAM I/O:\n    this.vramAddress = null;\n    this.vramTmpAddress = null;\n    this.vramBufferedReadValue = 0;\n    this.firstWrite = true; // VRAM/Scroll Hi/Lo latch\n\n    // SPR-RAM I/O:\n    this.sramAddress = 0; // 8-bit only.\n\n    this.currentMirroring = -1;\n    this.requestEndFrame = false;\n    this.nmiOk = false;\n    this.dummyCycleToggle = false;\n    this.validTileData = false;\n    this.nmiCounter = 0;\n    this.scanlineAlreadyRendered = null;\n\n    // Control Flags Register 1:\n    this.f_nmiOnVblank = 0; // NMI on VBlank. 0=disable, 1=enable\n    this.f_spriteSize = 0; // Sprite size. 0=8x8, 1=8x16\n    this.f_bgPatternTable = 0; // Background Pattern Table address. 0=0x0000,1=0x1000\n    this.f_spPatternTable = 0; // Sprite Pattern Table address. 0=0x0000,1=0x1000\n    this.f_addrInc = 0; // PPU Address Increment. 0=1,1=32\n    this.f_nTblAddress = 0; // Name Table Address. 0=0x2000,1=0x2400,2=0x2800,3=0x2C00\n\n    // Control Flags Register 2:\n    this.f_color = 0; // Background color. 0=black, 1=blue, 2=green, 4=red\n    this.f_spVisibility = 0; // Sprite visibility. 0=not displayed,1=displayed\n    this.f_bgVisibility = 0; // Background visibility. 0=Not Displayed,1=displayed\n    this.f_spClipping = 0; // Sprite clipping. 0=Sprites invisible in left 8-pixel column,1=No clipping\n    this.f_bgClipping = 0; // Background clipping. 0=BG invisible in left 8-pixel column, 1=No clipping\n    this.f_dispType = 0; // Display type. 0=color, 1=monochrome\n\n    // Counters:\n    this.cntFV = 0;\n    this.cntV = 0;\n    this.cntH = 0;\n    this.cntVT = 0;\n    this.cntHT = 0;\n\n    // Registers:\n    this.regFV = 0;\n    this.regV = 0;\n    this.regH = 0;\n    this.regVT = 0;\n    this.regHT = 0;\n    this.regFH = 0;\n    this.regS = 0;\n\n    // These are temporary variables used in rendering and sound procedures.\n    // Their states outside of those procedures can be ignored.\n    // TODO: the use of this is a bit weird, investigate\n    this.curNt = null;\n\n    // Variables used when rendering:\n    this.attrib = new Array(32);\n    this.buffer = new Array(256 * 240);\n    this.bgbuffer = new Array(256 * 240);\n    this.pixrendered = new Array(256 * 240);\n\n    this.validTileData = null;\n\n    this.scantile = new Array(32);\n\n    // Initialize misc vars:\n    this.scanline = 0;\n    this.lastRenderedScanline = -1;\n    this.curX = 0;\n\n    // Sprite data:\n    this.sprX = new Array(64); // X coordinate\n    this.sprY = new Array(64); // Y coordinate\n    this.sprTile = new Array(64); // Tile Index (into pattern table)\n    this.sprCol = new Array(64); // Upper two bits of color\n    this.vertFlip = new Array(64); // Vertical Flip\n    this.horiFlip = new Array(64); // Horizontal Flip\n    this.bgPriority = new Array(64); // Background priority\n    this.spr0HitX = 0; // Sprite #0 hit X coordinate\n    this.spr0HitY = 0; // Sprite #0 hit Y coordinate\n    this.hitSpr0 = false;\n\n    // Palette data:\n    this.sprPalette = new Array(16);\n    this.imgPalette = new Array(16);\n\n    // Create pattern table tile buffers:\n    this.ptTile = new Array(512);\n    for (i = 0; i < 512; i++) {\n      this.ptTile[i] = new Tile();\n    }\n\n    // Create nametable buffers:\n    // Name table data:\n    this.ntable1 = new Array(4);\n    this.currentMirroring = -1;\n    this.nameTable = new Array(4);\n    for (i = 0; i < 4; i++) {\n      this.nameTable[i] = new NameTable(32, 32, \"Nt\" + i);\n    }\n\n    // Initialize mirroring lookup table:\n    this.vramMirrorTable = new Array(0x8000);\n    for (i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    this.palTable = new PaletteTable();\n    this.palTable.loadNTSCPalette();\n    //this.palTable.loadDefaultPalette();\n\n    this.updateControlReg1(0);\n    this.updateControlReg2(0);\n  },\n\n  // Sets Nametable mirroring.\n  setMirroring: function(mirroring) {\n    if (mirroring === this.currentMirroring) {\n      return;\n    }\n\n    this.currentMirroring = mirroring;\n    this.triggerRendering();\n\n    // Remove mirroring:\n    if (this.vramMirrorTable === null) {\n      this.vramMirrorTable = new Array(0x8000);\n    }\n    for (var i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    // Palette mirroring:\n    this.defineMirrorRegion(0x3f20, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f40, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f80, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3fc0, 0x3f00, 0x20);\n\n    // Additional mirroring:\n    this.defineMirrorRegion(0x3000, 0x2000, 0xf00);\n    this.defineMirrorRegion(0x4000, 0x0000, 0x4000);\n\n    if (mirroring === this.nes.rom.HORIZONTAL_MIRRORING) {\n      // Horizontal mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2800, 0x400);\n    } else if (mirroring === this.nes.rom.VERTICAL_MIRRORING) {\n      // Vertical mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING) {\n      // Single Screen mirroring\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 0;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2000, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING2) {\n      this.ntable1[0] = 1;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else {\n      // Assume Four-screen mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 2;\n      this.ntable1[3] = 3;\n    }\n  },\n\n  // Define a mirrored area in the address lookup table.\n  // Assumes the regions don't overlap.\n  // The 'to' region is the region that is physically in memory.\n  defineMirrorRegion: function(fromStart, toStart, size) {\n    for (var i = 0; i < size; i++) {\n      this.vramMirrorTable[fromStart + i] = toStart + i;\n    }\n  },\n\n  startVBlank: function() {\n    // Do NMI:\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n\n    // Make sure everything is rendered:\n    if (this.lastRenderedScanline < 239) {\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        240 - this.lastRenderedScanline\n      );\n    }\n\n    // End frame:\n    this.endFrame();\n\n    // Reset scanline counter:\n    this.lastRenderedScanline = -1;\n  },\n\n  endScanline: function() {\n    switch (this.scanline) {\n      case 19:\n        // Dummy scanline.\n        // May be variable length:\n        if (this.dummyCycleToggle) {\n          // Remove dead cycle at end of scanline,\n          // for next scanline:\n          this.curX = 1;\n          this.dummyCycleToggle = !this.dummyCycleToggle;\n        }\n        break;\n\n      case 20:\n        // Clear VBlank flag:\n        this.setStatusFlag(this.STATUS_VBLANK, false);\n\n        // Clear Sprite #0 hit flag:\n        this.setStatusFlag(this.STATUS_SPRITE0HIT, false);\n        this.hitSpr0 = false;\n        this.spr0HitX = -1;\n        this.spr0HitY = -1;\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Update counters:\n          this.cntFV = this.regFV;\n          this.cntV = this.regV;\n          this.cntH = this.regH;\n          this.cntVT = this.regVT;\n          this.cntHT = this.regHT;\n\n          if (this.f_bgVisibility === 1) {\n            // Render dummy scanline:\n            this.renderBgScanline(false, 0);\n          }\n        }\n\n        if (this.f_bgVisibility === 1 && this.f_spVisibility === 1) {\n          // Check sprite 0 hit for first scanline:\n          this.checkSprite0(0);\n        }\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Clock mapper IRQ Counter:\n          this.nes.mmap.clockIrqCounter();\n        }\n        break;\n\n      case 261:\n        // Dead scanline, no rendering.\n        // Set VINT:\n        this.setStatusFlag(this.STATUS_VBLANK, true);\n        this.requestEndFrame = true;\n        this.nmiCounter = 9;\n\n        // Wrap around:\n        this.scanline = -1; // will be incremented to 0\n\n        break;\n\n      default:\n        if (this.scanline >= 21 && this.scanline <= 260) {\n          // Render normally:\n          if (this.f_bgVisibility === 1) {\n            if (!this.scanlineAlreadyRendered) {\n              // update scroll:\n              this.cntHT = this.regHT;\n              this.cntH = this.regH;\n              this.renderBgScanline(true, this.scanline + 1 - 21);\n            }\n            this.scanlineAlreadyRendered = false;\n\n            // Check for sprite 0 (next scanline):\n            if (!this.hitSpr0 && this.f_spVisibility === 1) {\n              if (\n                this.sprX[0] >= -7 &&\n                this.sprX[0] < 256 &&\n                this.sprY[0] + 1 <= this.scanline - 20 &&\n                this.sprY[0] + 1 + (this.f_spriteSize === 0 ? 8 : 16) >=\n                  this.scanline - 20\n              ) {\n                if (this.checkSprite0(this.scanline - 20)) {\n                  this.hitSpr0 = true;\n                }\n              }\n            }\n          }\n\n          if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n            // Clock mapper IRQ Counter:\n            this.nes.mmap.clockIrqCounter();\n          }\n        }\n    }\n\n    this.scanline++;\n    this.regsToAddress();\n    this.cntsToAddress();\n  },\n\n  startFrame: function() {\n    // Set background color:\n    var bgColor = 0;\n\n    if (this.f_dispType === 0) {\n      // Color display.\n      // f_color determines color emphasis.\n      // Use first entry of image palette as BG color.\n      bgColor = this.imgPalette[0];\n    } else {\n      // Monochrome display.\n      // f_color determines the bg color.\n      switch (this.f_color) {\n        case 0:\n          // Black\n          bgColor = 0x00000;\n          break;\n        case 1:\n          // Green\n          bgColor = 0x00ff00;\n          break;\n        case 2:\n          // Blue\n          bgColor = 0xff0000;\n          break;\n        case 3:\n          // Invalid. Use black.\n          bgColor = 0x000000;\n          break;\n        case 4:\n          // Red\n          bgColor = 0x0000ff;\n          break;\n        default:\n          // Invalid. Use black.\n          bgColor = 0x0;\n      }\n    }\n\n    var buffer = this.buffer;\n    var i;\n    for (i = 0; i < 256 * 240; i++) {\n      buffer[i] = bgColor;\n    }\n    var pixrendered = this.pixrendered;\n    for (i = 0; i < pixrendered.length; i++) {\n      pixrendered[i] = 65;\n    }\n  },\n\n  endFrame: function() {\n    var i, x, y;\n    var buffer = this.buffer;\n\n    // Draw spr#0 hit coordinates:\n    if (this.showSpr0Hit) {\n      // Spr 0 position:\n      if (\n        this.sprX[0] >= 0 &&\n        this.sprX[0] < 256 &&\n        this.sprY[0] >= 0 &&\n        this.sprY[0] < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.sprY[0] << 8) + i] = 0xff5555;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.sprX[0]] = 0xff5555;\n        }\n      }\n      // Hit position:\n      if (\n        this.spr0HitX >= 0 &&\n        this.spr0HitX < 256 &&\n        this.spr0HitY >= 0 &&\n        this.spr0HitY < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.spr0HitY << 8) + i] = 0x55ff55;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.spr0HitX] = 0x55ff55;\n        }\n      }\n    }\n\n    // This is a bit lazy..\n    // if either the sprites or the background should be clipped,\n    // both are clipped after rendering is finished.\n    if (\n      this.clipToTvSize ||\n      this.f_bgClipping === 0 ||\n      this.f_spClipping === 0\n    ) {\n      // Clip left 8-pixels column:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + x] = 0;\n        }\n      }\n    }\n\n    if (this.clipToTvSize) {\n      // Clip right 8-pixels column too:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + 255 - x] = 0;\n        }\n      }\n    }\n\n    // Clip top and bottom 8 pixels:\n    if (this.clipToTvSize) {\n      for (y = 0; y < 8; y++) {\n        for (x = 0; x < 256; x++) {\n          buffer[(y << 8) + x] = 0;\n          buffer[((239 - y) << 8) + x] = 0;\n        }\n      }\n    }\n\n    this.nes.ui.writeFrame(buffer);\n  },\n\n  updateControlReg1: function(value) {\n    this.triggerRendering();\n\n    this.f_nmiOnVblank = (value >> 7) & 1;\n    this.f_spriteSize = (value >> 5) & 1;\n    this.f_bgPatternTable = (value >> 4) & 1;\n    this.f_spPatternTable = (value >> 3) & 1;\n    this.f_addrInc = (value >> 2) & 1;\n    this.f_nTblAddress = value & 3;\n\n    this.regV = (value >> 1) & 1;\n    this.regH = value & 1;\n    this.regS = (value >> 4) & 1;\n  },\n\n  updateControlReg2: function(value) {\n    this.triggerRendering();\n\n    this.f_color = (value >> 5) & 7;\n    this.f_spVisibility = (value >> 4) & 1;\n    this.f_bgVisibility = (value >> 3) & 1;\n    this.f_spClipping = (value >> 2) & 1;\n    this.f_bgClipping = (value >> 1) & 1;\n    this.f_dispType = value & 1;\n\n    if (this.f_dispType === 0) {\n      this.palTable.setEmphasis(this.f_color);\n    }\n    this.updatePalettes();\n  },\n\n  setStatusFlag: function(flag, value) {\n    var n = 1 << flag;\n    this.nes.cpu.mem[0x2002] =\n      (this.nes.cpu.mem[0x2002] & (255 - n)) | (value ? n : 0);\n  },\n\n  // CPU Register $2002:\n  // Read the Status Register.\n  readStatusRegister: function() {\n    var tmp = this.nes.cpu.mem[0x2002];\n\n    // Reset scroll & VRAM Address toggle:\n    this.firstWrite = true;\n\n    // Clear VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, false);\n\n    // Fetch status data:\n    return tmp;\n  },\n\n  // CPU Register $2003:\n  // Write the SPR-RAM address that is used for sramWrite (Register 0x2004 in CPU memory map)\n  writeSRAMAddress: function(address) {\n    this.sramAddress = address;\n  },\n\n  // CPU Register $2004 (R):\n  // Read from SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramLoad: function() {\n    /*short tmp = sprMem.load(sramAddress);\n        sramAddress++; // Increment address\n        sramAddress%=0x100;\n        return tmp;*/\n    return this.spriteMem[this.sramAddress];\n  },\n\n  // CPU Register $2004 (W):\n  // Write to SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramWrite: function(value) {\n    this.spriteMem[this.sramAddress] = value;\n    this.spriteRamWriteUpdate(this.sramAddress, value);\n    this.sramAddress++; // Increment address\n    this.sramAddress %= 0x100;\n  },\n\n  // CPU Register $2005:\n  // Write to scroll registers.\n  // The first write is the vertical offset, the second is the\n  // horizontal offset:\n  scrollWrite: function(value) {\n    this.triggerRendering();\n\n    if (this.firstWrite) {\n      // First write, horizontal scroll:\n      this.regHT = (value >> 3) & 31;\n      this.regFH = value & 7;\n    } else {\n      // Second write, vertical scroll:\n      this.regFV = value & 7;\n      this.regVT = (value >> 3) & 31;\n    }\n    this.firstWrite = !this.firstWrite;\n  },\n\n  // CPU Register $2006:\n  // Sets the adress used when reading/writing from/to VRAM.\n  // The first write sets the high byte, the second the low byte.\n  writeVRAMAddress: function(address) {\n    if (this.firstWrite) {\n      this.regFV = (address >> 4) & 3;\n      this.regV = (address >> 3) & 1;\n      this.regH = (address >> 2) & 1;\n      this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n    } else {\n      this.triggerRendering();\n\n      this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n      this.regHT = address & 31;\n\n      this.cntFV = this.regFV;\n      this.cntV = this.regV;\n      this.cntH = this.regH;\n      this.cntVT = this.regVT;\n      this.cntHT = this.regHT;\n\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    this.firstWrite = !this.firstWrite;\n\n    // Invoke mapper latch:\n    this.cntsToAddress();\n    if (this.vramAddress < 0x2000) {\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n  },\n\n  // CPU Register $2007(R):\n  // Read from PPU memory. The address should be set first.\n  vramLoad: function() {\n    var tmp;\n\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    // If address is in range 0x0000-0x3EFF, return buffered values:\n    if (this.vramAddress <= 0x3eff) {\n      tmp = this.vramBufferedReadValue;\n\n      // Update buffered value:\n      if (this.vramAddress < 0x2000) {\n        this.vramBufferedReadValue = this.vramMem[this.vramAddress];\n      } else {\n        this.vramBufferedReadValue = this.mirroredLoad(this.vramAddress);\n      }\n\n      // Mapper latch access:\n      if (this.vramAddress < 0x2000) {\n        this.nes.mmap.latchAccess(this.vramAddress);\n      }\n\n      // Increment by either 1 or 32, depending on d2 of Control Register 1:\n      this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n      this.cntsFromAddress();\n      this.regsFromAddress();\n\n      return tmp; // Return the previous buffered value.\n    }\n\n    // No buffering in this mem range. Read normally.\n    tmp = this.mirroredLoad(this.vramAddress);\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n    this.cntsFromAddress();\n    this.regsFromAddress();\n\n    return tmp;\n  },\n\n  // CPU Register $2007(W):\n  // Write to PPU memory. The address should be set first.\n  vramWrite: function(value) {\n    this.triggerRendering();\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    if (this.vramAddress >= 0x2000) {\n      // Mirroring is used.\n      this.mirroredWrite(this.vramAddress, value);\n    } else {\n      // Write normally.\n      this.writeMem(this.vramAddress, value);\n\n      // Invoke mapper latch:\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n    this.regsFromAddress();\n    this.cntsFromAddress();\n  },\n\n  // CPU Register $4014:\n  // Write 256 bytes of main memory\n  // into Sprite RAM.\n  sramDMA: function(value) {\n    var baseAddress = value * 0x100;\n    var data;\n    for (var i = this.sramAddress; i < 256; i++) {\n      data = this.nes.cpu.mem[baseAddress + i];\n      this.spriteMem[i] = data;\n      this.spriteRamWriteUpdate(i, data);\n    }\n\n    this.nes.cpu.haltCycles(513);\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  regsFromAddress: function() {\n    var address = (this.vramTmpAddress >> 8) & 0xff;\n    this.regFV = (address >> 4) & 7;\n    this.regV = (address >> 3) & 1;\n    this.regH = (address >> 2) & 1;\n    this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n\n    address = this.vramTmpAddress & 0xff;\n    this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n    this.regHT = address & 31;\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  cntsFromAddress: function() {\n    var address = (this.vramAddress >> 8) & 0xff;\n    this.cntFV = (address >> 4) & 3;\n    this.cntV = (address >> 3) & 1;\n    this.cntH = (address >> 2) & 1;\n    this.cntVT = (this.cntVT & 7) | ((address & 3) << 3);\n\n    address = this.vramAddress & 0xff;\n    this.cntVT = (this.cntVT & 24) | ((address >> 5) & 7);\n    this.cntHT = address & 31;\n  },\n\n  regsToAddress: function() {\n    var b1 = (this.regFV & 7) << 4;\n    b1 |= (this.regV & 1) << 3;\n    b1 |= (this.regH & 1) << 2;\n    b1 |= (this.regVT >> 3) & 3;\n\n    var b2 = (this.regVT & 7) << 5;\n    b2 |= this.regHT & 31;\n\n    this.vramTmpAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  cntsToAddress: function() {\n    var b1 = (this.cntFV & 7) << 4;\n    b1 |= (this.cntV & 1) << 3;\n    b1 |= (this.cntH & 1) << 2;\n    b1 |= (this.cntVT >> 3) & 3;\n\n    var b2 = (this.cntVT & 7) << 5;\n    b2 |= this.cntHT & 31;\n\n    this.vramAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  incTileCounter: function(count) {\n    for (var i = count; i !== 0; i--) {\n      this.cntHT++;\n      if (this.cntHT === 32) {\n        this.cntHT = 0;\n        this.cntVT++;\n        if (this.cntVT >= 30) {\n          this.cntH++;\n          if (this.cntH === 2) {\n            this.cntH = 0;\n            this.cntV++;\n            if (this.cntV === 2) {\n              this.cntV = 0;\n              this.cntFV++;\n              this.cntFV &= 0x7;\n            }\n          }\n        }\n      }\n    }\n  },\n\n  // Reads from memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredLoad: function(address) {\n    return this.vramMem[this.vramMirrorTable[address]];\n  },\n\n  // Writes to memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredWrite: function(address, value) {\n    if (address >= 0x3f00 && address < 0x3f20) {\n      // Palette write mirroring.\n      if (address === 0x3f00 || address === 0x3f10) {\n        this.writeMem(0x3f00, value);\n        this.writeMem(0x3f10, value);\n      } else if (address === 0x3f04 || address === 0x3f14) {\n        this.writeMem(0x3f04, value);\n        this.writeMem(0x3f14, value);\n      } else if (address === 0x3f08 || address === 0x3f18) {\n        this.writeMem(0x3f08, value);\n        this.writeMem(0x3f18, value);\n      } else if (address === 0x3f0c || address === 0x3f1c) {\n        this.writeMem(0x3f0c, value);\n        this.writeMem(0x3f1c, value);\n      } else {\n        this.writeMem(address, value);\n      }\n    } else {\n      // Use lookup table for mirrored address:\n      if (address < this.vramMirrorTable.length) {\n        this.writeMem(this.vramMirrorTable[address], value);\n      } else {\n        throw new Error(\"Invalid VRAM address: \" + address.toString(16));\n      }\n    }\n  },\n\n  triggerRendering: function() {\n    if (this.scanline >= 21 && this.scanline <= 260) {\n      // Render sprites, and combine:\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        this.scanline - 21 - this.lastRenderedScanline\n      );\n\n      // Set last rendered scanline:\n      this.lastRenderedScanline = this.scanline - 21;\n    }\n  },\n\n  renderFramePartially: function(startScan, scanCount) {\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, true);\n    }\n\n    if (this.f_bgVisibility === 1) {\n      var si = startScan << 8;\n      var ei = (startScan + scanCount) << 8;\n      if (ei > 0xf000) {\n        ei = 0xf000;\n      }\n      var buffer = this.buffer;\n      var bgbuffer = this.bgbuffer;\n      var pixrendered = this.pixrendered;\n      for (var destIndex = si; destIndex < ei; destIndex++) {\n        if (pixrendered[destIndex] > 0xff) {\n          buffer[destIndex] = bgbuffer[destIndex];\n        }\n      }\n    }\n\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, false);\n    }\n\n    this.validTileData = false;\n  },\n\n  renderBgScanline: function(bgbuffer, scan) {\n    var baseTile = this.regS === 0 ? 0 : 256;\n    var destIndex = (scan << 8) - this.regFH;\n\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    this.cntHT = this.regHT;\n    this.cntH = this.regH;\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    if (scan < 240 && scan - this.cntFV >= 0) {\n      var tscanoffset = this.cntFV << 3;\n      var scantile = this.scantile;\n      var attrib = this.attrib;\n      var ptTile = this.ptTile;\n      var nameTable = this.nameTable;\n      var imgPalette = this.imgPalette;\n      var pixrendered = this.pixrendered;\n      var targetBuffer = bgbuffer ? this.bgbuffer : this.buffer;\n\n      var t, tpix, att, col;\n\n      for (var tile = 0; tile < 32; tile++) {\n        if (scan >= 0) {\n          // Fetch tile & attrib data:\n          if (this.validTileData) {\n            // Get data from array:\n            t = scantile[tile];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = attrib[tile];\n          } else {\n            // Fetch data:\n            t =\n              ptTile[\n                baseTile +\n                  nameTable[this.curNt].getTileIndex(this.cntHT, this.cntVT)\n              ];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = nameTable[this.curNt].getAttrib(this.cntHT, this.cntVT);\n            scantile[tile] = t;\n            attrib[tile] = att;\n          }\n\n          // Render tile scanline:\n          var sx = 0;\n          var x = (tile << 3) - this.regFH;\n\n          if (x > -8) {\n            if (x < 0) {\n              destIndex -= x;\n              sx = -x;\n            }\n            if (t.opaque[this.cntFV]) {\n              for (; sx < 8; sx++) {\n                targetBuffer[destIndex] =\n                  imgPalette[tpix[tscanoffset + sx] + att];\n                pixrendered[destIndex] |= 256;\n                destIndex++;\n              }\n            } else {\n              for (; sx < 8; sx++) {\n                col = tpix[tscanoffset + sx];\n                if (col !== 0) {\n                  targetBuffer[destIndex] = imgPalette[col + att];\n                  pixrendered[destIndex] |= 256;\n                }\n                destIndex++;\n              }\n            }\n          }\n        }\n\n        // Increase Horizontal Tile Counter:\n        if (++this.cntHT === 32) {\n          this.cntHT = 0;\n          this.cntH++;\n          this.cntH %= 2;\n          this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n        }\n      }\n\n      // Tile data for one row should now have been fetched,\n      // so the data in the array is valid.\n      this.validTileData = true;\n    }\n\n    // update vertical scroll:\n    this.cntFV++;\n    if (this.cntFV === 8) {\n      this.cntFV = 0;\n      this.cntVT++;\n      if (this.cntVT === 30) {\n        this.cntVT = 0;\n        this.cntV++;\n        this.cntV %= 2;\n        this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n      } else if (this.cntVT === 32) {\n        this.cntVT = 0;\n      }\n\n      // Invalidate fetched data:\n      this.validTileData = false;\n    }\n  },\n\n  renderSpritesPartially: function(startscan, scancount, bgPri) {\n    if (this.f_spVisibility === 1) {\n      for (var i = 0; i < 64; i++) {\n        if (\n          this.bgPriority[i] === bgPri &&\n          this.sprX[i] >= 0 &&\n          this.sprX[i] < 256 &&\n          this.sprY[i] + 8 >= startscan &&\n          this.sprY[i] < startscan + scancount\n        ) {\n          // Show sprite.\n          if (this.f_spriteSize === 0) {\n            // 8x8 sprites\n\n            this.srcy1 = 0;\n            this.srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              this.srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              this.srcy2 = startscan + scancount - this.sprY[i] + 1;\n            }\n\n            if (this.f_spPatternTable === 0) {\n              this.ptTile[this.sprTile[i]].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            } else {\n              this.ptTile[this.sprTile[i] + 256].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            }\n          } else {\n            // 8x16 sprites\n            var top = this.sprTile[i];\n            if ((top & 1) !== 0) {\n              top = this.sprTile[i] - 1 + 256;\n            }\n\n            var srcy1 = 0;\n            var srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              srcy2 = startscan + scancount - this.sprY[i];\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 1 : 0)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n\n            srcy1 = 0;\n            srcy2 = 8;\n\n            if (this.sprY[i] + 8 < startscan) {\n              srcy1 = startscan - (this.sprY[i] + 8 + 1);\n            }\n\n            if (this.sprY[i] + 16 > startscan + scancount) {\n              srcy2 = startscan + scancount - (this.sprY[i] + 8);\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 0 : 1)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1 + 8,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n          }\n        }\n      }\n    }\n  },\n\n  checkSprite0: function(scan) {\n    this.spr0HitX = -1;\n    this.spr0HitY = -1;\n\n    var toffset;\n    var tIndexAdd = this.f_spPatternTable === 0 ? 0 : 256;\n    var x, y, t, i;\n    var bufferIndex;\n\n    x = this.sprX[0];\n    y = this.sprY[0] + 1;\n\n    if (this.f_spriteSize === 0) {\n      // 8x8 sprites.\n\n      // Check range:\n      if (y <= scan && y + 8 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n        t = this.ptTile[this.sprTile[0] + tIndexAdd];\n\n        if (this.vertFlip[0]) {\n          toffset = 7 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    } else {\n      // 8x16 sprites:\n\n      // Check range:\n      if (y <= scan && y + 16 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n\n        if (this.vertFlip[0]) {\n          toffset = 15 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n\n        if (toffset < 8) {\n          // first half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 1 : 0) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n        } else {\n          // second half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 0 : 1) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n          if (this.vertFlip[0]) {\n            toffset = 15 - toffset;\n          } else {\n            toffset -= 8;\n          }\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n\n  // This will write to PPU memory, and\n  // update internally buffered data\n  // appropriately.\n  writeMem: function(address, value) {\n    this.vramMem[address] = value;\n\n    // Update internally buffered data:\n    if (address < 0x2000) {\n      this.vramMem[address] = value;\n      this.patternWrite(address, value);\n    } else if (address >= 0x2000 && address < 0x23c0) {\n      this.nameTableWrite(this.ntable1[0], address - 0x2000, value);\n    } else if (address >= 0x23c0 && address < 0x2400) {\n      this.attribTableWrite(this.ntable1[0], address - 0x23c0, value);\n    } else if (address >= 0x2400 && address < 0x27c0) {\n      this.nameTableWrite(this.ntable1[1], address - 0x2400, value);\n    } else if (address >= 0x27c0 && address < 0x2800) {\n      this.attribTableWrite(this.ntable1[1], address - 0x27c0, value);\n    } else if (address >= 0x2800 && address < 0x2bc0) {\n      this.nameTableWrite(this.ntable1[2], address - 0x2800, value);\n    } else if (address >= 0x2bc0 && address < 0x2c00) {\n      this.attribTableWrite(this.ntable1[2], address - 0x2bc0, value);\n    } else if (address >= 0x2c00 && address < 0x2fc0) {\n      this.nameTableWrite(this.ntable1[3], address - 0x2c00, value);\n    } else if (address >= 0x2fc0 && address < 0x3000) {\n      this.attribTableWrite(this.ntable1[3], address - 0x2fc0, value);\n    } else if (address >= 0x3f00 && address < 0x3f20) {\n      this.updatePalettes();\n    }\n  },\n\n  // Reads data from $3f00 to $f20\n  // into the two buffered palettes.\n  updatePalettes: function() {\n    var i;\n\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 63\n        );\n      } else {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 32\n        );\n      }\n    }\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 63\n        );\n      } else {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 32\n        );\n      }\n    }\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new byte.\n  // In vNES, there is a version of this with 4 arguments which isn't used.\n  patternWrite: function(address, value) {\n    var tileIndex = Math.floor(address / 16);\n    var leftOver = address % 16;\n    if (leftOver < 8) {\n      this.ptTile[tileIndex].setScanline(\n        leftOver,\n        value,\n        this.vramMem[address + 8]\n      );\n    } else {\n      this.ptTile[tileIndex].setScanline(\n        leftOver - 8,\n        this.vramMem[address - 8],\n        value\n      );\n    }\n  },\n\n  // Updates the internal name table buffers\n  // with this new byte.\n  nameTableWrite: function(index, address, value) {\n    this.nameTable[index].tile[address] = value;\n\n    // Update Sprite #0 hit:\n    //updateSpr0Hit();\n    this.checkSprite0(this.scanline - 20);\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new attribute\n  // table byte.\n  attribTableWrite: function(index, address, value) {\n    this.nameTable[index].writeAttrib(address, value);\n  },\n\n  // Updates the internally buffered sprite\n  // data with this new byte of info.\n  spriteRamWriteUpdate: function(address, value) {\n    var tIndex = Math.floor(address / 4);\n\n    if (tIndex === 0) {\n      //updateSpr0Hit();\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    if (address % 4 === 0) {\n      // Y coordinate\n      this.sprY[tIndex] = value;\n    } else if (address % 4 === 1) {\n      // Tile index\n      this.sprTile[tIndex] = value;\n    } else if (address % 4 === 2) {\n      // Attributes\n      this.vertFlip[tIndex] = (value & 0x80) !== 0;\n      this.horiFlip[tIndex] = (value & 0x40) !== 0;\n      this.bgPriority[tIndex] = (value & 0x20) !== 0;\n      this.sprCol[tIndex] = (value & 3) << 2;\n    } else if (address % 4 === 3) {\n      // X coordinate\n      this.sprX[tIndex] = value;\n    }\n  },\n\n  doNMI: function() {\n    // Set VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, true);\n    //nes.getCpu().doNonMaskableInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n  },\n\n  isPixelWhite: function(x, y) {\n    this.triggerRendering();\n    return this.nes.ppu.buffer[(y << 8) + x] === 0xffffff;\n  },\n\n  JSON_PROPERTIES: [\n    // Memory\n    \"vramMem\",\n    \"spriteMem\",\n    // Counters\n    \"cntFV\",\n    \"cntV\",\n    \"cntH\",\n    \"cntVT\",\n    \"cntHT\",\n    // Registers\n    \"regFV\",\n    \"regV\",\n    \"regH\",\n    \"regVT\",\n    \"regHT\",\n    \"regFH\",\n    \"regS\",\n    // VRAM addr\n    \"vramAddress\",\n    \"vramTmpAddress\",\n    // Control/Status registers\n    \"f_nmiOnVblank\",\n    \"f_spriteSize\",\n    \"f_bgPatternTable\",\n    \"f_spPatternTable\",\n    \"f_addrInc\",\n    \"f_nTblAddress\",\n    \"f_color\",\n    \"f_spVisibility\",\n    \"f_bgVisibility\",\n    \"f_spClipping\",\n    \"f_bgClipping\",\n    \"f_dispType\",\n    // VRAM I/O\n    \"vramBufferedReadValue\",\n    \"firstWrite\",\n    // Mirroring\n    \"currentMirroring\",\n    \"vramMirrorTable\",\n    \"ntable1\",\n    // SPR-RAM I/O\n    \"sramAddress\",\n    // Sprites. Most sprite data is rebuilt from spriteMem\n    \"hitSpr0\",\n    // Palettes\n    \"sprPalette\",\n    \"imgPalette\",\n    // Rendering progression\n    \"curX\",\n    \"scanline\",\n    \"lastRenderedScanline\",\n    \"curNt\",\n    \"scantile\",\n    // Used during rendering\n    \"attrib\",\n    \"buffer\",\n    \"bgbuffer\",\n    \"pixrendered\",\n    // Misc\n    \"requestEndFrame\",\n    \"nmiOk\",\n    \"dummyCycleToggle\",\n    \"nmiCounter\",\n    \"validTileData\",\n    \"scanlineAlreadyRendered\"\n  ],\n\n  toJSON: function() {\n    var i;\n    var state = utils.toJSON(this);\n\n    state.nameTable = [];\n    for (i = 0; i < this.nameTable.length; i++) {\n      state.nameTable[i] = this.nameTable[i].toJSON();\n    }\n\n    state.ptTile = [];\n    for (i = 0; i < this.ptTile.length; i++) {\n      state.ptTile[i] = this.ptTile[i].toJSON();\n    }\n\n    return state;\n  },\n\n  fromJSON: function(state) {\n    var i;\n\n    utils.fromJSON(this, state);\n\n    for (i = 0; i < this.nameTable.length; i++) {\n      this.nameTable[i].fromJSON(state.nameTable[i]);\n    }\n\n    for (i = 0; i < this.ptTile.length; i++) {\n      this.ptTile[i].fromJSON(state.ptTile[i]);\n    }\n\n    // Sprite data:\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteRamWriteUpdate(i, this.spriteMem[i]);\n    }\n  }\n};\n\nvar NameTable = function(width, height, name) {\n  this.width = width;\n  this.height = height;\n  this.name = name;\n\n  this.tile = new Array(width * height);\n  this.attrib = new Array(width * height);\n  for (var i = 0; i < width * height; i++) {\n    this.tile[i] = 0;\n    this.attrib[i] = 0;\n  }\n};\n\nNameTable.prototype = {\n  getTileIndex: function(x, y) {\n    return this.tile[y * this.width + x];\n  },\n\n  getAttrib: function(x, y) {\n    return this.attrib[y * this.width + x];\n  },\n\n  writeAttrib: function(index, value) {\n    var basex = (index % 8) * 4;\n    var basey = Math.floor(index / 8) * 4;\n    var add;\n    var tx, ty;\n    var attindex;\n\n    for (var sqy = 0; sqy < 2; sqy++) {\n      for (var sqx = 0; sqx < 2; sqx++) {\n        add = (value >> (2 * (sqy * 2 + sqx))) & 3;\n        for (var y = 0; y < 2; y++) {\n          for (var x = 0; x < 2; x++) {\n            tx = basex + sqx * 2 + x;\n            ty = basey + sqy * 2 + y;\n            attindex = ty * this.width + tx;\n            this.attrib[attindex] = (add << 2) & 12;\n          }\n        }\n      }\n    }\n  },\n\n  toJSON: function() {\n    return {\n      tile: this.tile,\n      attrib: this.attrib\n    };\n  },\n\n  fromJSON: function(s) {\n    this.tile = s.tile;\n    this.attrib = s.attrib;\n  }\n};\n\nvar PaletteTable = function() {\n  this.curTable = new Array(64);\n  this.emphTable = new Array(8);\n  this.currentEmph = -1;\n};\n\nPaletteTable.prototype = {\n  reset: function() {\n    this.setEmphasis(0);\n  },\n\n  loadNTSCPalette: function() {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  loadPALPalette: function() {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  makeTables: function() {\n    var r, g, b, col, i, rFactor, gFactor, bFactor;\n\n    // Calculate a table for each possible emphasis setting:\n    for (var emph = 0; emph < 8; emph++) {\n      // Determine color component factors:\n      rFactor = 1.0;\n      gFactor = 1.0;\n      bFactor = 1.0;\n\n      if ((emph & 1) !== 0) {\n        rFactor = 0.75;\n        bFactor = 0.75;\n      }\n      if ((emph & 2) !== 0) {\n        rFactor = 0.75;\n        gFactor = 0.75;\n      }\n      if ((emph & 4) !== 0) {\n        gFactor = 0.75;\n        bFactor = 0.75;\n      }\n\n      this.emphTable[emph] = new Array(64);\n\n      // Calculate table:\n      for (i = 0; i < 64; i++) {\n        col = this.curTable[i];\n        r = Math.floor(this.getRed(col) * rFactor);\n        g = Math.floor(this.getGreen(col) * gFactor);\n        b = Math.floor(this.getBlue(col) * bFactor);\n        this.emphTable[emph][i] = this.getRgb(r, g, b);\n      }\n    }\n  },\n\n  setEmphasis: function(emph) {\n    if (emph !== this.currentEmph) {\n      this.currentEmph = emph;\n      for (var i = 0; i < 64; i++) {\n        this.curTable[i] = this.emphTable[emph][i];\n      }\n    }\n  },\n\n  getEntry: function(yiq) {\n    return this.curTable[yiq];\n  },\n\n  getRed: function(rgb) {\n    return (rgb >> 16) & 0xff;\n  },\n\n  getGreen: function(rgb) {\n    return (rgb >> 8) & 0xff;\n  },\n\n  getBlue: function(rgb) {\n    return rgb & 0xff;\n  },\n\n  getRgb: function(r, g, b) {\n    return (r << 16) | (g << 8) | b;\n  },\n\n  loadDefaultPalette: function() {\n    this.curTable[0] = this.getRgb(117, 117, 117);\n    this.curTable[1] = this.getRgb(39, 27, 143);\n    this.curTable[2] = this.getRgb(0, 0, 171);\n    this.curTable[3] = this.getRgb(71, 0, 159);\n    this.curTable[4] = this.getRgb(143, 0, 119);\n    this.curTable[5] = this.getRgb(171, 0, 19);\n    this.curTable[6] = this.getRgb(167, 0, 0);\n    this.curTable[7] = this.getRgb(127, 11, 0);\n    this.curTable[8] = this.getRgb(67, 47, 0);\n    this.curTable[9] = this.getRgb(0, 71, 0);\n    this.curTable[10] = this.getRgb(0, 81, 0);\n    this.curTable[11] = this.getRgb(0, 63, 23);\n    this.curTable[12] = this.getRgb(27, 63, 95);\n    this.curTable[13] = this.getRgb(0, 0, 0);\n    this.curTable[14] = this.getRgb(0, 0, 0);\n    this.curTable[15] = this.getRgb(0, 0, 0);\n    this.curTable[16] = this.getRgb(188, 188, 188);\n    this.curTable[17] = this.getRgb(0, 115, 239);\n    this.curTable[18] = this.getRgb(35, 59, 239);\n    this.curTable[19] = this.getRgb(131, 0, 243);\n    this.curTable[20] = this.getRgb(191, 0, 191);\n    this.curTable[21] = this.getRgb(231, 0, 91);\n    this.curTable[22] = this.getRgb(219, 43, 0);\n    this.curTable[23] = this.getRgb(203, 79, 15);\n    this.curTable[24] = this.getRgb(139, 115, 0);\n    this.curTable[25] = this.getRgb(0, 151, 0);\n    this.curTable[26] = this.getRgb(0, 171, 0);\n    this.curTable[27] = this.getRgb(0, 147, 59);\n    this.curTable[28] = this.getRgb(0, 131, 139);\n    this.curTable[29] = this.getRgb(0, 0, 0);\n    this.curTable[30] = this.getRgb(0, 0, 0);\n    this.curTable[31] = this.getRgb(0, 0, 0);\n    this.curTable[32] = this.getRgb(255, 255, 255);\n    this.curTable[33] = this.getRgb(63, 191, 255);\n    this.curTable[34] = this.getRgb(95, 151, 255);\n    this.curTable[35] = this.getRgb(167, 139, 253);\n    this.curTable[36] = this.getRgb(247, 123, 255);\n    this.curTable[37] = this.getRgb(255, 119, 183);\n    this.curTable[38] = this.getRgb(255, 119, 99);\n    this.curTable[39] = this.getRgb(255, 155, 59);\n    this.curTable[40] = this.getRgb(243, 191, 63);\n    this.curTable[41] = this.getRgb(131, 211, 19);\n    this.curTable[42] = this.getRgb(79, 223, 75);\n    this.curTable[43] = this.getRgb(88, 248, 152);\n    this.curTable[44] = this.getRgb(0, 235, 219);\n    this.curTable[45] = this.getRgb(0, 0, 0);\n    this.curTable[46] = this.getRgb(0, 0, 0);\n    this.curTable[47] = this.getRgb(0, 0, 0);\n    this.curTable[48] = this.getRgb(255, 255, 255);\n    this.curTable[49] = this.getRgb(171, 231, 255);\n    this.curTable[50] = this.getRgb(199, 215, 255);\n    this.curTable[51] = this.getRgb(215, 203, 255);\n    this.curTable[52] = this.getRgb(255, 199, 255);\n    this.curTable[53] = this.getRgb(255, 199, 219);\n    this.curTable[54] = this.getRgb(255, 191, 179);\n    this.curTable[55] = this.getRgb(255, 219, 171);\n    this.curTable[56] = this.getRgb(255, 231, 163);\n    this.curTable[57] = this.getRgb(227, 255, 163);\n    this.curTable[58] = this.getRgb(171, 243, 191);\n    this.curTable[59] = this.getRgb(179, 255, 207);\n    this.curTable[60] = this.getRgb(159, 255, 243);\n    this.curTable[61] = this.getRgb(0, 0, 0);\n    this.curTable[62] = this.getRgb(0, 0, 0);\n    this.curTable[63] = this.getRgb(0, 0, 0);\n\n    this.makeTables();\n    this.setEmphasis(0);\n  }\n};\n\nmodule.exports = PPU;\n","var CPU_FREQ_NTSC = 1789772.5; //1789772.72727272d;\n// var CPU_FREQ_PAL = 1773447.4;\n\nvar PAPU = function(nes) {\n  this.nes = nes;\n\n  this.square1 = new ChannelSquare(this, true);\n  this.square2 = new ChannelSquare(this, false);\n  this.triangle = new ChannelTriangle(this);\n  this.noise = new ChannelNoise(this);\n  this.dmc = new ChannelDM(this);\n\n  this.frameIrqCounter = null;\n  this.frameIrqCounterMax = 4;\n  this.initCounter = 2048;\n  this.channelEnableValue = null;\n\n  this.sampleRate = 44100;\n\n  this.lengthLookup = null;\n  this.dmcFreqLookup = null;\n  this.noiseWavelengthLookup = null;\n  this.square_table = null;\n  this.tnd_table = null;\n\n  this.frameIrqEnabled = false;\n  this.frameIrqActive = null;\n  this.frameClockNow = null;\n  this.startedPlaying = false;\n  this.recordOutput = false;\n  this.initingHardware = false;\n\n  this.masterFrameCounter = null;\n  this.derivedFrameCounter = null;\n  this.countSequence = null;\n  this.sampleTimer = null;\n  this.frameTime = null;\n  this.sampleTimerMax = null;\n  this.sampleCount = null;\n  this.triValue = 0;\n\n  this.smpSquare1 = null;\n  this.smpSquare2 = null;\n  this.smpTriangle = null;\n  this.smpDmc = null;\n  this.accCount = null;\n\n  // DC removal vars:\n  this.prevSampleL = 0;\n  this.prevSampleR = 0;\n  this.smpAccumL = 0;\n  this.smpAccumR = 0;\n\n  // DAC range:\n  this.dacRange = 0;\n  this.dcValue = 0;\n\n  // Master volume:\n  this.masterVolume = 256;\n\n  // Stereo positioning:\n  this.stereoPosLSquare1 = null;\n  this.stereoPosLSquare2 = null;\n  this.stereoPosLTriangle = null;\n  this.stereoPosLNoise = null;\n  this.stereoPosLDMC = null;\n  this.stereoPosRSquare1 = null;\n  this.stereoPosRSquare2 = null;\n  this.stereoPosRTriangle = null;\n  this.stereoPosRNoise = null;\n  this.stereoPosRDMC = null;\n\n  this.extraCycles = null;\n\n  this.maxSample = null;\n  this.minSample = null;\n\n  // Panning:\n  this.panning = [80, 170, 100, 150, 128];\n  this.setPanning(this.panning);\n\n  // Initialize lookup tables:\n  this.initLengthLookup();\n  this.initDmcFrequencyLookup();\n  this.initNoiseWavelengthLookup();\n  this.initDACtables();\n\n  // Init sound registers:\n  for (var i = 0; i < 0x14; i++) {\n    if (i === 0x10) {\n      this.writeReg(0x4010, 0x10);\n    } else {\n      this.writeReg(0x4000 + i, 0);\n    }\n  }\n\n  this.reset();\n};\n\nPAPU.prototype = {\n  reset: function() {\n    this.sampleRate = this.nes.opts.sampleRate;\n    this.sampleTimerMax = Math.floor(\n      (1024.0 * CPU_FREQ_NTSC * this.nes.opts.preferredFrameRate) /\n        (this.sampleRate * 60.0)\n    );\n\n    this.frameTime = Math.floor(\n      (14915.0 * this.nes.opts.preferredFrameRate) / 60.0\n    );\n\n    this.sampleTimer = 0;\n\n    this.updateChannelEnable(0);\n    this.masterFrameCounter = 0;\n    this.derivedFrameCounter = 0;\n    this.countSequence = 0;\n    this.sampleCount = 0;\n    this.initCounter = 2048;\n    this.frameIrqEnabled = false;\n    this.initingHardware = false;\n\n    this.resetCounter();\n\n    this.square1.reset();\n    this.square2.reset();\n    this.triangle.reset();\n    this.noise.reset();\n    this.dmc.reset();\n\n    this.accCount = 0;\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n\n    this.frameIrqEnabled = false;\n    this.frameIrqCounterMax = 4;\n\n    this.channelEnableValue = 0xff;\n    this.startedPlaying = false;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n    this.smpAccumL = 0;\n    this.smpAccumR = 0;\n\n    this.maxSample = -500000;\n    this.minSample = 500000;\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  readReg: function(address) {\n    // Read 0x4015:\n    var tmp = 0;\n    tmp |= this.square1.getLengthStatus();\n    tmp |= this.square2.getLengthStatus() << 1;\n    tmp |= this.triangle.getLengthStatus() << 2;\n    tmp |= this.noise.getLengthStatus() << 3;\n    tmp |= this.dmc.getLengthStatus() << 4;\n    tmp |= (this.frameIrqActive && this.frameIrqEnabled ? 1 : 0) << 6;\n    tmp |= this.dmc.getIrqStatus() << 7;\n\n    this.frameIrqActive = false;\n    this.dmc.irqGenerated = false;\n\n    return tmp & 0xffff;\n  },\n\n  writeReg: function(address, value) {\n    if (address >= 0x4000 && address < 0x4004) {\n      // Square Wave 1 Control\n      this.square1.writeReg(address, value);\n      // console.log(\"Square Write\");\n    } else if (address >= 0x4004 && address < 0x4008) {\n      // Square 2 Control\n      this.square2.writeReg(address, value);\n    } else if (address >= 0x4008 && address < 0x400c) {\n      // Triangle Control\n      this.triangle.writeReg(address, value);\n    } else if (address >= 0x400c && address <= 0x400f) {\n      // Noise Control\n      this.noise.writeReg(address, value);\n    } else if (address === 0x4010) {\n      // DMC Play mode & DMA frequency\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4011) {\n      // DMC Delta Counter\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4012) {\n      // DMC Play code starting address\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4013) {\n      // DMC Play code length\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4015) {\n      // Channel enable\n      this.updateChannelEnable(value);\n\n      if (value !== 0 && this.initCounter > 0) {\n        // Start hardware initialization\n        this.initingHardware = true;\n      }\n\n      // DMC/IRQ Status\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4017) {\n      // Frame counter control\n      this.countSequence = (value >> 7) & 1;\n      this.masterFrameCounter = 0;\n      this.frameIrqActive = false;\n\n      if (((value >> 6) & 0x1) === 0) {\n        this.frameIrqEnabled = true;\n      } else {\n        this.frameIrqEnabled = false;\n      }\n\n      if (this.countSequence === 0) {\n        // NTSC:\n        this.frameIrqCounterMax = 4;\n        this.derivedFrameCounter = 4;\n      } else {\n        // PAL:\n        this.frameIrqCounterMax = 5;\n        this.derivedFrameCounter = 0;\n        this.frameCounterTick();\n      }\n    }\n  },\n\n  resetCounter: function() {\n    if (this.countSequence === 0) {\n      this.derivedFrameCounter = 4;\n    } else {\n      this.derivedFrameCounter = 0;\n    }\n  },\n\n  // Updates channel enable status.\n  // This is done on writes to the\n  // channel enable register (0x4015),\n  // and when the user enables/disables channels\n  // in the GUI.\n  updateChannelEnable: function(value) {\n    this.channelEnableValue = value & 0xffff;\n    this.square1.setEnabled((value & 1) !== 0);\n    this.square2.setEnabled((value & 2) !== 0);\n    this.triangle.setEnabled((value & 4) !== 0);\n    this.noise.setEnabled((value & 8) !== 0);\n    this.dmc.setEnabled((value & 16) !== 0);\n  },\n\n  // Clocks the frame counter. It should be clocked at\n  // twice the cpu speed, so the cycles will be\n  // divided by 2 for those counters that are\n  // clocked at cpu speed.\n  clockFrameCounter: function(nCycles) {\n    if (this.initCounter > 0) {\n      if (this.initingHardware) {\n        this.initCounter -= nCycles;\n        if (this.initCounter <= 0) {\n          this.initingHardware = false;\n        }\n        return;\n      }\n    }\n\n    // Don't process ticks beyond next sampling:\n    nCycles += this.extraCycles;\n    var maxCycles = this.sampleTimerMax - this.sampleTimer;\n    if (nCycles << 10 > maxCycles) {\n      this.extraCycles = ((nCycles << 10) - maxCycles) >> 10;\n      nCycles -= this.extraCycles;\n    } else {\n      this.extraCycles = 0;\n    }\n\n    var dmc = this.dmc;\n    var triangle = this.triangle;\n    var square1 = this.square1;\n    var square2 = this.square2;\n    var noise = this.noise;\n\n    // Clock DMC:\n    if (dmc.isEnabled) {\n      dmc.shiftCounter -= nCycles << 3;\n      while (dmc.shiftCounter <= 0 && dmc.dmaFrequency > 0) {\n        dmc.shiftCounter += dmc.dmaFrequency;\n        dmc.clockDmc();\n      }\n    }\n\n    // Clock Triangle channel Prog timer:\n    if (triangle.progTimerMax > 0) {\n      triangle.progTimerCount -= nCycles;\n      while (triangle.progTimerCount <= 0) {\n        triangle.progTimerCount += triangle.progTimerMax + 1;\n        if (triangle.linearCounter > 0 && triangle.lengthCounter > 0) {\n          triangle.triangleCounter++;\n          triangle.triangleCounter &= 0x1f;\n\n          if (triangle.isEnabled) {\n            if (triangle.triangleCounter >= 0x10) {\n              // Normal value.\n              triangle.sampleValue = triangle.triangleCounter & 0xf;\n            } else {\n              // Inverted value.\n              triangle.sampleValue = 0xf - (triangle.triangleCounter & 0xf);\n            }\n            triangle.sampleValue <<= 4;\n          }\n        }\n      }\n    }\n\n    // Clock Square channel 1 Prog timer:\n    square1.progTimerCount -= nCycles;\n    if (square1.progTimerCount <= 0) {\n      square1.progTimerCount += (square1.progTimerMax + 1) << 1;\n\n      square1.squareCounter++;\n      square1.squareCounter &= 0x7;\n      square1.updateSampleValue();\n    }\n\n    // Clock Square channel 2 Prog timer:\n    square2.progTimerCount -= nCycles;\n    if (square2.progTimerCount <= 0) {\n      square2.progTimerCount += (square2.progTimerMax + 1) << 1;\n\n      square2.squareCounter++;\n      square2.squareCounter &= 0x7;\n      square2.updateSampleValue();\n    }\n\n    // Clock noise channel Prog timer:\n    var acc_c = nCycles;\n    if (noise.progTimerCount - acc_c > 0) {\n      // Do all cycles at once:\n      noise.progTimerCount -= acc_c;\n      noise.accCount += acc_c;\n      noise.accValue += acc_c * noise.sampleValue;\n    } else {\n      // Slow-step:\n      while (acc_c-- > 0) {\n        if (--noise.progTimerCount <= 0 && noise.progTimerMax > 0) {\n          // Update noise shift register:\n          noise.shiftReg <<= 1;\n          noise.tmp =\n            ((noise.shiftReg << (noise.randomMode === 0 ? 1 : 6)) ^\n              noise.shiftReg) &\n            0x8000;\n          if (noise.tmp !== 0) {\n            // Sample value must be 0.\n            noise.shiftReg |= 0x01;\n            noise.randomBit = 0;\n            noise.sampleValue = 0;\n          } else {\n            // Find sample value:\n            noise.randomBit = 1;\n            if (noise.isEnabled && noise.lengthCounter > 0) {\n              noise.sampleValue = noise.masterVolume;\n            } else {\n              noise.sampleValue = 0;\n            }\n          }\n\n          noise.progTimerCount += noise.progTimerMax;\n        }\n\n        noise.accValue += noise.sampleValue;\n        noise.accCount++;\n      }\n    }\n\n    // Frame IRQ handling:\n    if (this.frameIrqEnabled && this.frameIrqActive) {\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n    }\n\n    // Clock frame counter at double CPU speed:\n    this.masterFrameCounter += nCycles << 1;\n    if (this.masterFrameCounter >= this.frameTime) {\n      // 240Hz tick:\n      this.masterFrameCounter -= this.frameTime;\n      this.frameCounterTick();\n    }\n\n    // Accumulate sample value:\n    this.accSample(nCycles);\n\n    // Clock sample timer:\n    this.sampleTimer += nCycles << 10;\n    if (this.sampleTimer >= this.sampleTimerMax) {\n      // Sample channels:\n      this.sample();\n      this.sampleTimer -= this.sampleTimerMax;\n    }\n  },\n\n  accSample: function(cycles) {\n    // Special treatment for triangle channel - need to interpolate.\n    if (this.triangle.sampleCondition) {\n      this.triValue = Math.floor(\n        (this.triangle.progTimerCount << 4) / (this.triangle.progTimerMax + 1)\n      );\n      if (this.triValue > 16) {\n        this.triValue = 16;\n      }\n      if (this.triangle.triangleCounter >= 16) {\n        this.triValue = 16 - this.triValue;\n      }\n\n      // Add non-interpolated sample value:\n      this.triValue += this.triangle.sampleValue;\n    }\n\n    // Now sample normally:\n    if (cycles === 2) {\n      this.smpTriangle += this.triValue << 1;\n      this.smpDmc += this.dmc.sample << 1;\n      this.smpSquare1 += this.square1.sampleValue << 1;\n      this.smpSquare2 += this.square2.sampleValue << 1;\n      this.accCount += 2;\n    } else if (cycles === 4) {\n      this.smpTriangle += this.triValue << 2;\n      this.smpDmc += this.dmc.sample << 2;\n      this.smpSquare1 += this.square1.sampleValue << 2;\n      this.smpSquare2 += this.square2.sampleValue << 2;\n      this.accCount += 4;\n    } else {\n      this.smpTriangle += cycles * this.triValue;\n      this.smpDmc += cycles * this.dmc.sample;\n      this.smpSquare1 += cycles * this.square1.sampleValue;\n      this.smpSquare2 += cycles * this.square2.sampleValue;\n      this.accCount += cycles;\n    }\n  },\n\n  frameCounterTick: function() {\n    this.derivedFrameCounter++;\n    if (this.derivedFrameCounter >= this.frameIrqCounterMax) {\n      this.derivedFrameCounter = 0;\n    }\n\n    if (this.derivedFrameCounter === 1 || this.derivedFrameCounter === 3) {\n      // Clock length & sweep:\n      this.triangle.clockLengthCounter();\n      this.square1.clockLengthCounter();\n      this.square2.clockLengthCounter();\n      this.noise.clockLengthCounter();\n      this.square1.clockSweep();\n      this.square2.clockSweep();\n    }\n\n    if (this.derivedFrameCounter >= 0 && this.derivedFrameCounter < 4) {\n      // Clock linear & decay:\n      this.square1.clockEnvDecay();\n      this.square2.clockEnvDecay();\n      this.noise.clockEnvDecay();\n      this.triangle.clockLinearCounter();\n    }\n\n    if (this.derivedFrameCounter === 3 && this.countSequence === 0) {\n      // Enable IRQ:\n      this.frameIrqActive = true;\n    }\n\n    // End of 240Hz tick\n  },\n\n  // Samples the channels, mixes the output together, then writes to buffer.\n  sample: function() {\n    var sq_index, tnd_index;\n\n    if (this.accCount > 0) {\n      this.smpSquare1 <<= 4;\n      this.smpSquare1 = Math.floor(this.smpSquare1 / this.accCount);\n\n      this.smpSquare2 <<= 4;\n      this.smpSquare2 = Math.floor(this.smpSquare2 / this.accCount);\n\n      this.smpTriangle = Math.floor(this.smpTriangle / this.accCount);\n\n      this.smpDmc <<= 4;\n      this.smpDmc = Math.floor(this.smpDmc / this.accCount);\n\n      this.accCount = 0;\n    } else {\n      this.smpSquare1 = this.square1.sampleValue << 4;\n      this.smpSquare2 = this.square2.sampleValue << 4;\n      this.smpTriangle = this.triangle.sampleValue;\n      this.smpDmc = this.dmc.sample << 4;\n    }\n\n    var smpNoise = Math.floor((this.noise.accValue << 4) / this.noise.accCount);\n    this.noise.accValue = smpNoise >> 4;\n    this.noise.accCount = 1;\n\n    // Stereo sound.\n\n    // Left channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosLSquare1 +\n        this.smpSquare2 * this.stereoPosLSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosLTriangle +\n        (smpNoise << 1) * this.stereoPosLNoise +\n        this.smpDmc * this.stereoPosLDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueL =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Right channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosRSquare1 +\n        this.smpSquare2 * this.stereoPosRSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosRTriangle +\n        (smpNoise << 1) * this.stereoPosRNoise +\n        this.smpDmc * this.stereoPosRDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueR =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Remove DC from left channel:\n    var smpDiffL = sampleValueL - this.prevSampleL;\n    this.prevSampleL += smpDiffL;\n    this.smpAccumL += smpDiffL - (this.smpAccumL >> 10);\n    sampleValueL = this.smpAccumL;\n\n    // Remove DC from right channel:\n    var smpDiffR = sampleValueR - this.prevSampleR;\n    this.prevSampleR += smpDiffR;\n    this.smpAccumR += smpDiffR - (this.smpAccumR >> 10);\n    sampleValueR = this.smpAccumR;\n\n    // Write:\n    if (sampleValueL > this.maxSample) {\n      this.maxSample = sampleValueL;\n    }\n    if (sampleValueL < this.minSample) {\n      this.minSample = sampleValueL;\n    }\n\n    if (this.nes.opts.onAudioSample) {\n      this.nes.opts.onAudioSample(sampleValueL / 32768, sampleValueR / 32768);\n    }\n\n    // Reset sampled values:\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n  },\n\n  getLengthMax: function(value) {\n    return this.lengthLookup[value >> 3];\n  },\n\n  getDmcFrequency: function(value) {\n    if (value >= 0 && value < 0x10) {\n      return this.dmcFreqLookup[value];\n    }\n    return 0;\n  },\n\n  getNoiseWaveLength: function(value) {\n    if (value >= 0 && value < 0x10) {\n      return this.noiseWavelengthLookup[value];\n    }\n    return 0;\n  },\n\n  setPanning: function(pos) {\n    for (var i = 0; i < 5; i++) {\n      this.panning[i] = pos[i];\n    }\n    this.updateStereoPos();\n  },\n\n  setMasterVolume: function(value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 256) {\n      value = 256;\n    }\n    this.masterVolume = value;\n    this.updateStereoPos();\n  },\n\n  updateStereoPos: function() {\n    this.stereoPosLSquare1 = (this.panning[0] * this.masterVolume) >> 8;\n    this.stereoPosLSquare2 = (this.panning[1] * this.masterVolume) >> 8;\n    this.stereoPosLTriangle = (this.panning[2] * this.masterVolume) >> 8;\n    this.stereoPosLNoise = (this.panning[3] * this.masterVolume) >> 8;\n    this.stereoPosLDMC = (this.panning[4] * this.masterVolume) >> 8;\n\n    this.stereoPosRSquare1 = this.masterVolume - this.stereoPosLSquare1;\n    this.stereoPosRSquare2 = this.masterVolume - this.stereoPosLSquare2;\n    this.stereoPosRTriangle = this.masterVolume - this.stereoPosLTriangle;\n    this.stereoPosRNoise = this.masterVolume - this.stereoPosLNoise;\n    this.stereoPosRDMC = this.masterVolume - this.stereoPosLDMC;\n  },\n\n  initLengthLookup: function() {\n    // prettier-ignore\n    this.lengthLookup = [\n            0x0A, 0xFE,\n            0x14, 0x02,\n            0x28, 0x04,\n            0x50, 0x06,\n            0xA0, 0x08,\n            0x3C, 0x0A,\n            0x0E, 0x0C,\n            0x1A, 0x0E,\n            0x0C, 0x10,\n            0x18, 0x12,\n            0x30, 0x14,\n            0x60, 0x16,\n            0xC0, 0x18,\n            0x48, 0x1A,\n            0x10, 0x1C,\n            0x20, 0x1E\n        ];\n  },\n\n  initDmcFrequencyLookup: function() {\n    this.dmcFreqLookup = new Array(16);\n\n    this.dmcFreqLookup[0x0] = 0xd60;\n    this.dmcFreqLookup[0x1] = 0xbe0;\n    this.dmcFreqLookup[0x2] = 0xaa0;\n    this.dmcFreqLookup[0x3] = 0xa00;\n    this.dmcFreqLookup[0x4] = 0x8f0;\n    this.dmcFreqLookup[0x5] = 0x7f0;\n    this.dmcFreqLookup[0x6] = 0x710;\n    this.dmcFreqLookup[0x7] = 0x6b0;\n    this.dmcFreqLookup[0x8] = 0x5f0;\n    this.dmcFreqLookup[0x9] = 0x500;\n    this.dmcFreqLookup[0xa] = 0x470;\n    this.dmcFreqLookup[0xb] = 0x400;\n    this.dmcFreqLookup[0xc] = 0x350;\n    this.dmcFreqLookup[0xd] = 0x2a0;\n    this.dmcFreqLookup[0xe] = 0x240;\n    this.dmcFreqLookup[0xf] = 0x1b0;\n    //for(int i=0;i<16;i++)dmcFreqLookup[i]/=8;\n  },\n\n  initNoiseWavelengthLookup: function() {\n    this.noiseWavelengthLookup = new Array(16);\n\n    this.noiseWavelengthLookup[0x0] = 0x004;\n    this.noiseWavelengthLookup[0x1] = 0x008;\n    this.noiseWavelengthLookup[0x2] = 0x010;\n    this.noiseWavelengthLookup[0x3] = 0x020;\n    this.noiseWavelengthLookup[0x4] = 0x040;\n    this.noiseWavelengthLookup[0x5] = 0x060;\n    this.noiseWavelengthLookup[0x6] = 0x080;\n    this.noiseWavelengthLookup[0x7] = 0x0a0;\n    this.noiseWavelengthLookup[0x8] = 0x0ca;\n    this.noiseWavelengthLookup[0x9] = 0x0fe;\n    this.noiseWavelengthLookup[0xa] = 0x17c;\n    this.noiseWavelengthLookup[0xb] = 0x1fc;\n    this.noiseWavelengthLookup[0xc] = 0x2fa;\n    this.noiseWavelengthLookup[0xd] = 0x3f8;\n    this.noiseWavelengthLookup[0xe] = 0x7f2;\n    this.noiseWavelengthLookup[0xf] = 0xfe4;\n  },\n\n  initDACtables: function() {\n    var value, ival, i;\n    var max_sqr = 0;\n    var max_tnd = 0;\n\n    this.square_table = new Array(32 * 16);\n    this.tnd_table = new Array(204 * 16);\n\n    for (i = 0; i < 32 * 16; i++) {\n      value = 95.52 / (8128.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.square_table[i] = ival;\n      if (ival > max_sqr) {\n        max_sqr = ival;\n      }\n    }\n\n    for (i = 0; i < 204 * 16; i++) {\n      value = 163.67 / (24329.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.tnd_table[i] = ival;\n      if (ival > max_tnd) {\n        max_tnd = ival;\n      }\n    }\n\n    this.dacRange = max_sqr + max_tnd;\n    this.dcValue = this.dacRange / 2;\n  }\n};\n\nvar ChannelDM = function(papu) {\n  this.papu = papu;\n\n  this.MODE_NORMAL = 0;\n  this.MODE_LOOP = 1;\n  this.MODE_IRQ = 2;\n\n  this.isEnabled = null;\n  this.hasSample = null;\n  this.irqGenerated = false;\n\n  this.playMode = null;\n  this.dmaFrequency = null;\n  this.dmaCounter = null;\n  this.deltaCounter = null;\n  this.playStartAddress = null;\n  this.playAddress = null;\n  this.playLength = null;\n  this.playLengthCounter = null;\n  this.shiftCounter = null;\n  this.reg4012 = null;\n  this.reg4013 = null;\n  this.sample = null;\n  this.dacLsb = null;\n  this.data = null;\n\n  this.reset();\n};\n\nChannelDM.prototype = {\n  clockDmc: function() {\n    // Only alter DAC value if the sample buffer has data:\n    if (this.hasSample) {\n      if ((this.data & 1) === 0) {\n        // Decrement delta:\n        if (this.deltaCounter > 0) {\n          this.deltaCounter--;\n        }\n      } else {\n        // Increment delta:\n        if (this.deltaCounter < 63) {\n          this.deltaCounter++;\n        }\n      }\n\n      // Update sample value:\n      this.sample = this.isEnabled ? (this.deltaCounter << 1) + this.dacLsb : 0;\n\n      // Update shift register:\n      this.data >>= 1;\n    }\n\n    this.dmaCounter--;\n    if (this.dmaCounter <= 0) {\n      // No more sample bits.\n      this.hasSample = false;\n      this.endOfSample();\n      this.dmaCounter = 8;\n    }\n\n    if (this.irqGenerated) {\n      this.papu.nes.cpu.requestIrq(this.papu.nes.cpu.IRQ_NORMAL);\n    }\n  },\n\n  endOfSample: function() {\n    if (this.playLengthCounter === 0 && this.playMode === this.MODE_LOOP) {\n      // Start from beginning of sample:\n      this.playAddress = this.playStartAddress;\n      this.playLengthCounter = this.playLength;\n    }\n\n    if (this.playLengthCounter > 0) {\n      // Fetch next sample:\n      this.nextSample();\n\n      if (this.playLengthCounter === 0) {\n        // Last byte of sample fetched, generate IRQ:\n        if (this.playMode === this.MODE_IRQ) {\n          // Generate IRQ:\n          this.irqGenerated = true;\n        }\n      }\n    }\n  },\n\n  nextSample: function() {\n    // Fetch byte:\n    this.data = this.papu.nes.mmap.load(this.playAddress);\n    this.papu.nes.cpu.haltCycles(4);\n\n    this.playLengthCounter--;\n    this.playAddress++;\n    if (this.playAddress > 0xffff) {\n      this.playAddress = 0x8000;\n    }\n\n    this.hasSample = true;\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x4010) {\n      // Play mode, DMA Frequency\n      if (value >> 6 === 0) {\n        this.playMode = this.MODE_NORMAL;\n      } else if (((value >> 6) & 1) === 1) {\n        this.playMode = this.MODE_LOOP;\n      } else if (value >> 6 === 2) {\n        this.playMode = this.MODE_IRQ;\n      }\n\n      if ((value & 0x80) === 0) {\n        this.irqGenerated = false;\n      }\n\n      this.dmaFrequency = this.papu.getDmcFrequency(value & 0xf);\n    } else if (address === 0x4011) {\n      // Delta counter load register:\n      this.deltaCounter = (value >> 1) & 63;\n      this.dacLsb = value & 1;\n      this.sample = (this.deltaCounter << 1) + this.dacLsb; // update sample value\n    } else if (address === 0x4012) {\n      // DMA address load register\n      this.playStartAddress = (value << 6) | 0x0c000;\n      this.playAddress = this.playStartAddress;\n      this.reg4012 = value;\n    } else if (address === 0x4013) {\n      // Length of play code\n      this.playLength = (value << 4) + 1;\n      this.playLengthCounter = this.playLength;\n      this.reg4013 = value;\n    } else if (address === 0x4015) {\n      // DMC/IRQ Status\n      if (((value >> 4) & 1) === 0) {\n        // Disable:\n        this.playLengthCounter = 0;\n      } else {\n        // Restart:\n        this.playAddress = this.playStartAddress;\n        this.playLengthCounter = this.playLength;\n      }\n      this.irqGenerated = false;\n    }\n  },\n\n  setEnabled: function(value) {\n    if (!this.isEnabled && value) {\n      this.playLengthCounter = this.playLength;\n    }\n    this.isEnabled = value;\n  },\n\n  getLengthStatus: function() {\n    return this.playLengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  getIrqStatus: function() {\n    return this.irqGenerated ? 1 : 0;\n  },\n\n  reset: function() {\n    this.isEnabled = false;\n    this.irqGenerated = false;\n    this.playMode = this.MODE_NORMAL;\n    this.dmaFrequency = 0;\n    this.dmaCounter = 0;\n    this.deltaCounter = 0;\n    this.playStartAddress = 0;\n    this.playAddress = 0;\n    this.playLength = 0;\n    this.playLengthCounter = 0;\n    this.sample = 0;\n    this.dacLsb = 0;\n    this.shiftCounter = 0;\n    this.reg4012 = 0;\n    this.reg4013 = 0;\n    this.data = 0;\n  }\n};\n\nvar ChannelNoise = function(papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.lengthCounterEnable = null;\n  this.envReset = null;\n  this.shiftNow = null;\n\n  this.lengthCounter = null;\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.shiftReg = 1 << 14;\n  this.randomBit = null;\n  this.randomMode = null;\n  this.sampleValue = null;\n  this.accValue = 0;\n  this.accCount = 1;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelNoise.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.isEnabled = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n    this.shiftNow = false;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.shiftReg = 1;\n    this.randomBit = 0;\n    this.randomMode = 0;\n    this.sampleValue = 0;\n    this.tmp = 0;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function() {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  updateSampleValue: function() {\n    if (this.isEnabled && this.lengthCounter > 0) {\n      this.sampleValue = this.randomBit * this.masterVolume;\n    }\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x400c) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n    } else if (address === 0x400e) {\n      // Programmable timer:\n      this.progTimerMax = this.papu.getNoiseWaveLength(value & 0xf);\n      this.randomMode = value >> 7;\n    } else if (address === 0x400f) {\n      // Length counter\n      this.lengthCounter = this.papu.getLengthMax(value & 248);\n      this.envReset = true;\n    }\n    // Update:\n    //updateSampleValue();\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\n\nvar ChannelSquare = function(papu, square1) {\n  this.papu = papu;\n\n  // prettier-ignore\n  this.dutyLookup = [\n         0, 1, 0, 0, 0, 0, 0, 0,\n         0, 1, 1, 0, 0, 0, 0, 0,\n         0, 1, 1, 1, 1, 0, 0, 0,\n         1, 0, 0, 1, 1, 1, 1, 1\n    ];\n  // prettier-ignore\n  this.impLookup = [\n         1,-1, 0, 0, 0, 0, 0, 0,\n         1, 0,-1, 0, 0, 0, 0, 0,\n         1, 0, 0, 0,-1, 0, 0, 0,\n        -1, 0, 1, 0, 0, 0, 0, 0\n    ];\n\n  this.sqr1 = square1;\n  this.isEnabled = null;\n  this.lengthCounterEnable = null;\n  this.sweepActive = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.envReset = null;\n  this.sweepCarry = null;\n  this.updateSweepPeriod = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.lengthCounter = null;\n  this.squareCounter = null;\n  this.sweepCounter = null;\n  this.sweepCounterMax = null;\n  this.sweepMode = null;\n  this.sweepShiftAmount = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.dutyMode = null;\n  this.sweepResult = null;\n  this.sampleValue = null;\n  this.vol = null;\n\n  this.reset();\n};\n\nChannelSquare.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.lengthCounter = 0;\n    this.squareCounter = 0;\n    this.sweepCounter = 0;\n    this.sweepCounterMax = 0;\n    this.sweepMode = 0;\n    this.sweepShiftAmount = 0;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.dutyMode = 0;\n    this.vol = 0;\n\n    this.isEnabled = false;\n    this.lengthCounterEnable = false;\n    this.sweepActive = false;\n    this.sweepCarry = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function() {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  clockSweep: function() {\n    if (--this.sweepCounter <= 0) {\n      this.sweepCounter = this.sweepCounterMax + 1;\n      if (\n        this.sweepActive &&\n        this.sweepShiftAmount > 0 &&\n        this.progTimerMax > 7\n      ) {\n        // Calculate result from shifter:\n        this.sweepCarry = false;\n        if (this.sweepMode === 0) {\n          this.progTimerMax += this.progTimerMax >> this.sweepShiftAmount;\n          if (this.progTimerMax > 4095) {\n            this.progTimerMax = 4095;\n            this.sweepCarry = true;\n          }\n        } else {\n          this.progTimerMax =\n            this.progTimerMax -\n            ((this.progTimerMax >> this.sweepShiftAmount) -\n              (this.sqr1 ? 1 : 0));\n        }\n      }\n    }\n\n    if (this.updateSweepPeriod) {\n      this.updateSweepPeriod = false;\n      this.sweepCounter = this.sweepCounterMax + 1;\n    }\n  },\n\n  updateSampleValue: function() {\n    if (this.isEnabled && this.lengthCounter > 0 && this.progTimerMax > 7) {\n      if (\n        this.sweepMode === 0 &&\n        this.progTimerMax + (this.progTimerMax >> this.sweepShiftAmount) > 4095\n      ) {\n        //if (this.sweepCarry) {\n        this.sampleValue = 0;\n      } else {\n        this.sampleValue =\n          this.masterVolume *\n          this.dutyLookup[(this.dutyMode << 3) + this.squareCounter];\n      }\n    } else {\n      this.sampleValue = 0;\n    }\n  },\n\n  writeReg: function(address, value) {\n    var addrAdd = this.sqr1 ? 0 : 4;\n    if (address === 0x4000 + addrAdd) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.dutyMode = (value >> 6) & 0x3;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n      this.updateSampleValue();\n    } else if (address === 0x4001 + addrAdd) {\n      // Sweep:\n      this.sweepActive = (value & 0x80) !== 0;\n      this.sweepCounterMax = (value >> 4) & 7;\n      this.sweepMode = (value >> 3) & 1;\n      this.sweepShiftAmount = value & 7;\n      this.updateSweepPeriod = true;\n    } else if (address === 0x4002 + addrAdd) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x4003 + addrAdd) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x7) << 8;\n\n      if (this.isEnabled) {\n        this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      }\n\n      this.envReset = true;\n    }\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\n\nvar ChannelTriangle = function(papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.sampleCondition = null;\n  this.lengthCounterEnable = null;\n  this.lcHalt = null;\n  this.lcControl = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.triangleCounter = null;\n  this.lengthCounter = null;\n  this.linearCounter = null;\n  this.lcLoadValue = null;\n  this.sampleValue = null;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelTriangle.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.triangleCounter = 0;\n    this.isEnabled = false;\n    this.sampleCondition = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.linearCounter = 0;\n    this.lcLoadValue = 0;\n    this.lcHalt = true;\n    this.lcControl = false;\n    this.tmp = 0;\n    this.sampleValue = 0xf;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleCondition();\n      }\n    }\n  },\n\n  clockLinearCounter: function() {\n    if (this.lcHalt) {\n      // Load:\n      this.linearCounter = this.lcLoadValue;\n      this.updateSampleCondition();\n    } else if (this.linearCounter > 0) {\n      // Decrement:\n      this.linearCounter--;\n      this.updateSampleCondition();\n    }\n    if (!this.lcControl) {\n      // Clear halt flag:\n      this.lcHalt = false;\n    }\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  readReg: function(address) {\n    return 0;\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x4008) {\n      // New values for linear counter:\n      this.lcControl = (value & 0x80) !== 0;\n      this.lcLoadValue = value & 0x7f;\n\n      // Length counter enable:\n      this.lengthCounterEnable = !this.lcControl;\n    } else if (address === 0x400a) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x400b) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x07) << 8;\n      this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      this.lcHalt = true;\n    }\n\n    this.updateSampleCondition();\n  },\n\n  clockProgrammableTimer: function(nCycles) {\n    if (this.progTimerMax > 0) {\n      this.progTimerCount += nCycles;\n      while (\n        this.progTimerMax > 0 &&\n        this.progTimerCount >= this.progTimerMax\n      ) {\n        this.progTimerCount -= this.progTimerMax;\n        if (\n          this.isEnabled &&\n          this.lengthCounter > 0 &&\n          this.linearCounter > 0\n        ) {\n          this.clockTriangleGenerator();\n        }\n      }\n    }\n  },\n\n  clockTriangleGenerator: function() {\n    this.triangleCounter++;\n    this.triangleCounter &= 0x1f;\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleCondition();\n  },\n\n  updateSampleCondition: function() {\n    this.sampleCondition =\n      this.isEnabled &&\n      this.progTimerMax > 7 &&\n      this.linearCounter > 0 &&\n      this.lengthCounter > 0;\n  }\n};\n\nmodule.exports = PAPU;\n","var Mappers = require(\"./mappers\");\nvar Tile = require(\"./tile\");\n\nvar ROM = function(nes) {\n  this.nes = nes;\n\n  this.mapperName = new Array(92);\n\n  for (var i = 0; i < 92; i++) {\n    this.mapperName[i] = \"Unknown Mapper\";\n  }\n  this.mapperName[0] = \"Direct Access\";\n  this.mapperName[1] = \"Nintendo MMC1\";\n  this.mapperName[2] = \"UNROM\";\n  this.mapperName[3] = \"CNROM\";\n  this.mapperName[4] = \"Nintendo MMC3\";\n  this.mapperName[5] = \"Nintendo MMC5\";\n  this.mapperName[6] = \"FFE F4xxx\";\n  this.mapperName[7] = \"AOROM\";\n  this.mapperName[8] = \"FFE F3xxx\";\n  this.mapperName[9] = \"Nintendo MMC2\";\n  this.mapperName[10] = \"Nintendo MMC4\";\n  this.mapperName[11] = \"Color Dreams Chip\";\n  this.mapperName[12] = \"FFE F6xxx\";\n  this.mapperName[15] = \"100-in-1 switch\";\n  this.mapperName[16] = \"Bandai chip\";\n  this.mapperName[17] = \"FFE F8xxx\";\n  this.mapperName[18] = \"Jaleco SS8806 chip\";\n  this.mapperName[19] = \"Namcot 106 chip\";\n  this.mapperName[20] = \"Famicom Disk System\";\n  this.mapperName[21] = \"Konami VRC4a\";\n  this.mapperName[22] = \"Konami VRC2a\";\n  this.mapperName[23] = \"Konami VRC2a\";\n  this.mapperName[24] = \"Konami VRC6\";\n  this.mapperName[25] = \"Konami VRC4b\";\n  this.mapperName[32] = \"Irem G-101 chip\";\n  this.mapperName[33] = \"Taito TC0190/TC0350\";\n  this.mapperName[34] = \"32kB ROM switch\";\n\n  this.mapperName[64] = \"Tengen RAMBO-1 chip\";\n  this.mapperName[65] = \"Irem H-3001 chip\";\n  this.mapperName[66] = \"GNROM switch\";\n  this.mapperName[67] = \"SunSoft3 chip\";\n  this.mapperName[68] = \"SunSoft4 chip\";\n  this.mapperName[69] = \"SunSoft5 FME-7 chip\";\n  this.mapperName[71] = \"Camerica chip\";\n  this.mapperName[78] = \"Irem 74HC161/32-based\";\n  this.mapperName[91] = \"Pirate HK-SF3 chip\";\n};\n\nROM.prototype = {\n  // Mirroring types:\n  VERTICAL_MIRRORING: 0,\n  HORIZONTAL_MIRRORING: 1,\n  FOURSCREEN_MIRRORING: 2,\n  SINGLESCREEN_MIRRORING: 3,\n  SINGLESCREEN_MIRRORING2: 4,\n  SINGLESCREEN_MIRRORING3: 5,\n  SINGLESCREEN_MIRRORING4: 6,\n  CHRROM_MIRRORING: 7,\n\n  header: null,\n  rom: null,\n  vrom: null,\n  vromTile: null,\n\n  romCount: null,\n  vromCount: null,\n  mirroring: null,\n  batteryRam: null,\n  trainer: null,\n  fourScreen: null,\n  mapperType: null,\n  valid: false,\n\n  load: function(data) {\n    var i, j, v;\n\n    if (data.indexOf(\"NES\\x1a\") === -1) {\n      throw new Error(\"Not a valid NES ROM.\");\n    }\n    this.header = new Array(16);\n    for (i = 0; i < 16; i++) {\n      this.header[i] = data.charCodeAt(i) & 0xff;\n    }\n    this.romCount = this.header[4];\n    this.vromCount = this.header[5] * 2; // Get the number of 4kB banks, not 8kB\n    this.mirroring = (this.header[6] & 1) !== 0 ? 1 : 0;\n    this.batteryRam = (this.header[6] & 2) !== 0;\n    this.trainer = (this.header[6] & 4) !== 0;\n    this.fourScreen = (this.header[6] & 8) !== 0;\n    this.mapperType = (this.header[6] >> 4) | (this.header[7] & 0xf0);\n    /* TODO\n        if (this.batteryRam)\n            this.loadBatteryRam();*/\n    // Check whether byte 8-15 are zero's:\n    var foundError = false;\n    for (i = 8; i < 16; i++) {\n      if (this.header[i] !== 0) {\n        foundError = true;\n        break;\n      }\n    }\n    if (foundError) {\n      this.mapperType &= 0xf; // Ignore byte 7\n    }\n    // Load PRG-ROM banks:\n    this.rom = new Array(this.romCount);\n    var offset = 16;\n    for (i = 0; i < this.romCount; i++) {\n      this.rom[i] = new Array(16384);\n      for (j = 0; j < 16384; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.rom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 16384;\n    }\n    // Load CHR-ROM banks:\n    this.vrom = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vrom[i] = new Array(4096);\n      for (j = 0; j < 4096; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.vrom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 4096;\n    }\n\n    // Create VROM tiles:\n    this.vromTile = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vromTile[i] = new Array(256);\n      for (j = 0; j < 256; j++) {\n        this.vromTile[i][j] = new Tile();\n      }\n    }\n\n    // Convert CHR-ROM banks to tiles:\n    var tileIndex;\n    var leftOver;\n    for (v = 0; v < this.vromCount; v++) {\n      for (i = 0; i < 4096; i++) {\n        tileIndex = i >> 4;\n        leftOver = i % 16;\n        if (leftOver < 8) {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver,\n            this.vrom[v][i],\n            this.vrom[v][i + 8]\n          );\n        } else {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver - 8,\n            this.vrom[v][i - 8],\n            this.vrom[v][i]\n          );\n        }\n      }\n    }\n\n    this.valid = true;\n  },\n\n  getMirroringType: function() {\n    if (this.fourScreen) {\n      return this.FOURSCREEN_MIRRORING;\n    }\n    if (this.mirroring === 0) {\n      return this.HORIZONTAL_MIRRORING;\n    }\n    return this.VERTICAL_MIRRORING;\n  },\n\n  getMapperName: function() {\n    if (this.mapperType >= 0 && this.mapperType < this.mapperName.length) {\n      return this.mapperName[this.mapperType];\n    }\n    return \"Unknown Mapper, \" + this.mapperType;\n  },\n\n  mapperSupported: function() {\n    return typeof Mappers[this.mapperType] !== \"undefined\";\n  },\n\n  createMapper: function() {\n    if (this.mapperSupported()) {\n      return new Mappers[this.mapperType](this.nes);\n    } else {\n      throw new Error(\n        \"This ROM uses a mapper not supported by JSNES: \" +\n          this.getMapperName() +\n          \"(\" +\n          this.mapperType +\n          \")\"\n      );\n    }\n  }\n};\n\nmodule.exports = ROM;\n","var utils = require(\"./utils\");\n\nvar Mappers = {};\n\nMappers[0] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[0].prototype = {\n  reset: function() {\n    this.joy1StrobeState = 0;\n    this.joy2StrobeState = 0;\n    this.joypadLastWrite = 0;\n\n    this.zapperFired = false;\n    this.zapperX = null;\n    this.zapperY = null;\n  },\n\n  write: function(address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n      if (address >= 0x6000 && address < 0x8000) {\n        // Write to persistent RAM\n        this.nes.opts.onBatteryRamWrite(address, value);\n      }\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  writelow: function(address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  load: function(address) {\n    // Wrap around:\n    address &= 0xffff;\n\n    // Check address range:\n    if (address > 0x4017) {\n      // ROM:\n      return this.nes.cpu.mem[address];\n    } else if (address >= 0x2000) {\n      // I/O Ports.\n      return this.regLoad(address);\n    } else {\n      // RAM (mirrored)\n      return this.nes.cpu.mem[address & 0x7ff];\n    }\n  },\n\n  regLoad: function(address) {\n    switch (\n      address >> 12 // use fourth nibble (0xF000)\n    ) {\n      case 0:\n        break;\n\n      case 1:\n        break;\n\n      case 2:\n      // Fall through to case 3\n      case 3:\n        // PPU Registers\n        switch (address & 0x7) {\n          case 0x0:\n            // 0x2000:\n            // PPU Control Register 1.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2000];\n\n          case 0x1:\n            // 0x2001:\n            // PPU Control Register 2.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2001];\n\n          case 0x2:\n            // 0x2002:\n            // PPU Status Register.\n            // The value is stored in\n            // main memory in addition\n            // to as flags in the PPU.\n            // (not in the real NES)\n            return this.nes.ppu.readStatusRegister();\n\n          case 0x3:\n            return 0;\n\n          case 0x4:\n            // 0x2004:\n            // Sprite Memory read.\n            return this.nes.ppu.sramLoad();\n          case 0x5:\n            return 0;\n\n          case 0x6:\n            return 0;\n\n          case 0x7:\n            // 0x2007:\n            // VRAM read:\n            return this.nes.ppu.vramLoad();\n        }\n        break;\n      case 4:\n        // Sound+Joypad registers\n        switch (address - 0x4015) {\n          case 0:\n            // 0x4015:\n            // Sound channel enable, DMC Status\n            return this.nes.papu.readReg(address);\n\n          case 1:\n            // 0x4016:\n            // Joystick 1 + Strobe\n            return this.joy1Read();\n\n          case 2:\n            // 0x4017:\n            // Joystick 2 + Strobe\n            // https://wiki.nesdev.com/w/index.php/Zapper\n            var w;\n\n            if (\n              this.zapperX !== null &&\n              this.zapperY !== null &&\n              this.nes.ppu.isPixelWhite(this.zapperX, this.zapperY)\n            ) {\n              w = 0;\n            } else {\n              w = 0x1 << 3;\n            }\n\n            if (this.zapperFired) {\n              w |= 0x1 << 4;\n            }\n            return (this.joy2Read() | w) & 0xffff;\n        }\n        break;\n    }\n    return 0;\n  },\n\n  regWrite: function(address, value) {\n    switch (address) {\n      case 0x2000:\n        // PPU Control register 1\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg1(value);\n        break;\n\n      case 0x2001:\n        // PPU Control register 2\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg2(value);\n        break;\n\n      case 0x2003:\n        // Set Sprite RAM address:\n        this.nes.ppu.writeSRAMAddress(value);\n        break;\n\n      case 0x2004:\n        // Write to Sprite RAM:\n        this.nes.ppu.sramWrite(value);\n        break;\n\n      case 0x2005:\n        // Screen Scroll offsets:\n        this.nes.ppu.scrollWrite(value);\n        break;\n\n      case 0x2006:\n        // Set VRAM address:\n        this.nes.ppu.writeVRAMAddress(value);\n        break;\n\n      case 0x2007:\n        // Write to VRAM:\n        this.nes.ppu.vramWrite(value);\n        break;\n\n      case 0x4014:\n        // Sprite Memory DMA Access\n        this.nes.ppu.sramDMA(value);\n        break;\n\n      case 0x4015:\n        // Sound Channel Switch, DMC Status\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      case 0x4016:\n        // Joystick 1 + Strobe\n        if ((value & 1) === 0 && (this.joypadLastWrite & 1) === 1) {\n          this.joy1StrobeState = 0;\n          this.joy2StrobeState = 0;\n        }\n        this.joypadLastWrite = value;\n        break;\n\n      case 0x4017:\n        // Sound channel frame sequencer:\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      default:\n        // Sound registers\n        // console.log(\"write to sound reg\");\n        if (address >= 0x4000 && address <= 0x4017) {\n          this.nes.papu.writeReg(address, value);\n        }\n    }\n  },\n\n  joy1Read: function() {\n    var ret;\n\n    switch (this.joy1StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[1].state[this.joy1StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy1StrobeState++;\n    if (this.joy1StrobeState === 24) {\n      this.joy1StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  joy2Read: function() {\n    var ret;\n\n    switch (this.joy2StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[2].state[this.joy2StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy2StrobeState++;\n    if (this.joy2StrobeState === 24) {\n      this.joy2StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  loadROM: function() {\n    if (!this.nes.rom.valid || this.nes.rom.romCount < 1) {\n      throw new Error(\"NoMapper: Invalid ROM! Unable to load.\");\n    }\n\n    // Load ROM into memory:\n    this.loadPRGROM();\n\n    // Load CHR-ROM:\n    this.loadCHRROM();\n\n    // Load Battery RAM (if present):\n    this.loadBatteryRam();\n\n    // Reset IRQ:\n    //nes.getCpu().doResetInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n  },\n\n  loadPRGROM: function() {\n    if (this.nes.rom.romCount > 1) {\n      // Load the two first banks into memory.\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(1, 0xc000);\n    } else {\n      // Load the one bank into both memory locations:\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(0, 0xc000);\n    }\n  },\n\n  loadCHRROM: function() {\n    // console.log(\"Loading CHR ROM..\");\n    if (this.nes.rom.vromCount > 0) {\n      if (this.nes.rom.vromCount === 1) {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(0, 0x1000);\n      } else {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(1, 0x1000);\n      }\n    } else {\n      //System.out.println(\"There aren't any CHR-ROM banks..\");\n    }\n  },\n\n  loadBatteryRam: function() {\n    if (this.nes.rom.batteryRam) {\n      var ram = this.nes.rom.batteryRam;\n      if (ram !== null && ram.length === 0x2000) {\n        // Load Battery RAM into memory:\n        utils.copyArrayElements(ram, 0, this.nes.cpu.mem, 0x6000, 0x2000);\n      }\n    }\n  },\n\n  loadRomBank: function(bank, address) {\n    // Loads a ROM bank into the specified address.\n    bank %= this.nes.rom.romCount;\n    //var data = this.nes.rom.rom[bank];\n    //cpuMem.write(address,data,data.length);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank],\n      0,\n      this.nes.cpu.mem,\n      address,\n      16384\n    );\n  },\n\n  loadVromBank: function(bank, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank % this.nes.rom.vromCount],\n      0,\n      this.nes.ppu.vramMem,\n      address,\n      4096\n    );\n\n    var vromTile = this.nes.rom.vromTile[bank % this.nes.rom.vromCount];\n    utils.copyArrayElements(\n      vromTile,\n      0,\n      this.nes.ppu.ptTile,\n      address >> 4,\n      256\n    );\n  },\n\n  load32kRomBank: function(bank, address) {\n    this.loadRomBank((bank * 2) % this.nes.rom.romCount, address);\n    this.loadRomBank((bank * 2 + 1) % this.nes.rom.romCount, address + 16384);\n  },\n\n  load8kVromBank: function(bank4kStart, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    this.loadVromBank(bank4kStart % this.nes.rom.vromCount, address);\n    this.loadVromBank(\n      (bank4kStart + 1) % this.nes.rom.vromCount,\n      address + 4096\n    );\n  },\n\n  load1kVromBank: function(bank1k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank1k / 4) % this.nes.rom.vromCount;\n    var bankoffset = (bank1k % 4) * 1024;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      1024\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 64; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank1k % 4 << 6) + i];\n    }\n  },\n\n  load2kVromBank: function(bank2k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank2k / 2) % this.nes.rom.vromCount;\n    var bankoffset = (bank2k % 2) * 2048;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      2048\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 128; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank2k % 2 << 7) + i];\n    }\n  },\n\n  load8kRomBank: function(bank8k, address) {\n    var bank16k = Math.floor(bank8k / 2) % this.nes.rom.romCount;\n    var offset = (bank8k % 2) * 8192;\n\n    //this.nes.cpu.mem.write(address,this.nes.rom.rom[bank16k],offset,8192);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank16k],\n      offset,\n      this.nes.cpu.mem,\n      address,\n      8192\n    );\n  },\n\n  clockIrqCounter: function() {\n    // Does nothing. This is used by the MMC3 mapper.\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  latchAccess: function(address) {\n    // Does nothing. This is used by MMC2.\n  },\n\n  toJSON: function() {\n    return {\n      joy1StrobeState: this.joy1StrobeState,\n      joy2StrobeState: this.joy2StrobeState,\n      joypadLastWrite: this.joypadLastWrite\n    };\n  },\n\n  fromJSON: function(s) {\n    this.joy1StrobeState = s.joy1StrobeState;\n    this.joy2StrobeState = s.joy2StrobeState;\n    this.joypadLastWrite = s.joypadLastWrite;\n  }\n};\n\nMappers[1] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[1].prototype = new Mappers[0]();\n\nMappers[1].prototype.reset = function() {\n  Mappers[0].prototype.reset.apply(this);\n\n  // 5-bit buffer:\n  this.regBuffer = 0;\n  this.regBufferCounter = 0;\n\n  // Register 0:\n  this.mirroring = 0;\n  this.oneScreenMirroring = 0;\n  this.prgSwitchingArea = 1;\n  this.prgSwitchingSize = 1;\n  this.vromSwitchingSize = 0;\n\n  // Register 1:\n  this.romSelectionReg0 = 0;\n\n  // Register 2:\n  this.romSelectionReg1 = 0;\n\n  // Register 3:\n  this.romBankSelect = 0;\n};\n\nMappers[1].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  // See what should be done with the written value:\n  if ((value & 128) !== 0) {\n    // Reset buffering:\n    this.regBufferCounter = 0;\n    this.regBuffer = 0;\n\n    // Reset register:\n    if (this.getRegNumber(address) === 0) {\n      this.prgSwitchingArea = 1;\n      this.prgSwitchingSize = 1;\n    }\n  } else {\n    // Continue buffering:\n    //regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);\n    this.regBuffer =\n      (this.regBuffer & (0xff - (1 << this.regBufferCounter))) |\n      ((value & 1) << this.regBufferCounter);\n    this.regBufferCounter++;\n\n    if (this.regBufferCounter === 5) {\n      // Use the buffered value:\n      this.setReg(this.getRegNumber(address), this.regBuffer);\n\n      // Reset buffer:\n      this.regBuffer = 0;\n      this.regBufferCounter = 0;\n    }\n  }\n};\n\nMappers[1].prototype.setReg = function(reg, value) {\n  var tmp;\n\n  switch (reg) {\n    case 0:\n      // Mirroring:\n      tmp = value & 3;\n      if (tmp !== this.mirroring) {\n        // Set mirroring:\n        this.mirroring = tmp;\n        if ((this.mirroring & 2) === 0) {\n          // SingleScreen mirroring overrides the other setting:\n          this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n        } else if ((this.mirroring & 1) !== 0) {\n          // Not overridden by SingleScreen mirroring.\n          this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n        } else {\n          this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n        }\n      }\n\n      // PRG Switching Area;\n      this.prgSwitchingArea = (value >> 2) & 1;\n\n      // PRG Switching Size:\n      this.prgSwitchingSize = (value >> 3) & 1;\n\n      // VROM Switching Size:\n      this.vromSwitchingSize = (value >> 4) & 1;\n\n      break;\n\n    case 1:\n      // ROM selection:\n      this.romSelectionReg0 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x0000:\n        if (this.vromSwitchingSize === 0) {\n          // Swap 8kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.load8kVromBank(value & 0xf, 0x0000);\n          } else {\n            this.load8kVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        } else {\n          // Swap 4kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.loadVromBank(value & 0xf, 0x0000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        }\n      }\n\n      break;\n\n    case 2:\n      // ROM selection:\n      this.romSelectionReg1 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x1000:\n        if (this.vromSwitchingSize === 1) {\n          // Swap 4kB of VROM:\n          if (this.romSelectionReg1 === 0) {\n            this.loadVromBank(value & 0xf, 0x1000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x1000\n            );\n          }\n        }\n      }\n      break;\n\n    default:\n      // Select ROM bank:\n      // -------------------------\n      tmp = value & 0xf;\n      var bank;\n      var baseBank = 0;\n\n      if (this.nes.rom.romCount >= 32) {\n        // 1024 kB cart\n        if (this.vromSwitchingSize === 0) {\n          if (this.romSelectionReg0 === 1) {\n            baseBank = 16;\n          }\n        } else {\n          baseBank =\n            (this.romSelectionReg0 | (this.romSelectionReg1 << 1)) << 3;\n        }\n      } else if (this.nes.rom.romCount >= 16) {\n        // 512 kB cart\n        if (this.romSelectionReg0 === 1) {\n          baseBank = 8;\n        }\n      }\n\n      if (this.prgSwitchingSize === 0) {\n        // 32kB\n        bank = baseBank + (value & 0xf);\n        this.load32kRomBank(bank, 0x8000);\n      } else {\n        // 16kB\n        bank = baseBank * 2 + (value & 0xf);\n        if (this.prgSwitchingArea === 0) {\n          this.loadRomBank(bank, 0xc000);\n        } else {\n          this.loadRomBank(bank, 0x8000);\n        }\n      }\n  }\n};\n\n// Returns the register number from the address written to:\nMappers[1].prototype.getRegNumber = function(address) {\n  if (address >= 0x8000 && address <= 0x9fff) {\n    return 0;\n  } else if (address >= 0xa000 && address <= 0xbfff) {\n    return 1;\n  } else if (address >= 0xc000 && address <= 0xdfff) {\n    return 2;\n  } else {\n    return 3;\n  }\n};\n\nMappers[1].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC1: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000); //   First ROM bank..\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000); // ..and last ROM bank.\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n// eslint-disable-next-line no-unused-vars\nMappers[1].prototype.switchLowHighPrgRom = function(oldSetting) {\n  // not yet.\n};\n\nMappers[1].prototype.switch16to32 = function() {\n  // not yet.\n};\n\nMappers[1].prototype.switch32to16 = function() {\n  // not yet.\n};\n\nMappers[1].prototype.toJSON = function() {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.mirroring = this.mirroring;\n  s.oneScreenMirroring = this.oneScreenMirroring;\n  s.prgSwitchingArea = this.prgSwitchingArea;\n  s.prgSwitchingSize = this.prgSwitchingSize;\n  s.vromSwitchingSize = this.vromSwitchingSize;\n  s.romSelectionReg0 = this.romSelectionReg0;\n  s.romSelectionReg1 = this.romSelectionReg1;\n  s.romBankSelect = this.romBankSelect;\n  s.regBuffer = this.regBuffer;\n  s.regBufferCounter = this.regBufferCounter;\n  return s;\n};\n\nMappers[1].prototype.fromJSON = function(s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.mirroring = s.mirroring;\n  this.oneScreenMirroring = s.oneScreenMirroring;\n  this.prgSwitchingArea = s.prgSwitchingArea;\n  this.prgSwitchingSize = s.prgSwitchingSize;\n  this.vromSwitchingSize = s.vromSwitchingSize;\n  this.romSelectionReg0 = s.romSelectionReg0;\n  this.romSelectionReg1 = s.romSelectionReg1;\n  this.romBankSelect = s.romBankSelect;\n  this.regBuffer = s.regBuffer;\n  this.regBufferCounter = s.regBufferCounter;\n};\n\nMappers[2] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[2].prototype = new Mappers[0]();\n\nMappers[2].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value, 0x8000);\n  }\n};\n\nMappers[2].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 003 (CNROM)\n *\n * @constructor\n * @example Solomon's Key, Arkanoid, Arkista's Ring, Bump 'n' Jump, Cybernoid\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_003\n */\nMappers[3] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[3].prototype = new Mappers[0]();\n\nMappers[3].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    // This is a VROM bank select command.\n    // Swap in the given VROM bank at 0x0000:\n    var bank = (value % (this.nes.rom.vromCount / 2)) * 2;\n    this.loadVromBank(bank, 0x0000);\n    this.loadVromBank(bank + 1, 0x1000);\n    this.load8kVromBank(value * 2, 0x0000);\n  }\n};\n\nMappers[4] = function(nes) {\n  this.nes = nes;\n\n  this.CMD_SEL_2_1K_VROM_0000 = 0;\n  this.CMD_SEL_2_1K_VROM_0800 = 1;\n  this.CMD_SEL_1K_VROM_1000 = 2;\n  this.CMD_SEL_1K_VROM_1400 = 3;\n  this.CMD_SEL_1K_VROM_1800 = 4;\n  this.CMD_SEL_1K_VROM_1C00 = 5;\n  this.CMD_SEL_ROM_PAGE1 = 6;\n  this.CMD_SEL_ROM_PAGE2 = 7;\n\n  this.command = null;\n  this.prgAddressSelect = null;\n  this.chrAddressSelect = null;\n  this.pageNumber = null;\n  this.irqCounter = null;\n  this.irqLatchValue = null;\n  this.irqEnable = null;\n  this.prgAddressChanged = false;\n};\n\nMappers[4].prototype = new Mappers[0]();\n\nMappers[4].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x8000:\n      // Command/Address Select register\n      this.command = value & 7;\n      var tmp = (value >> 6) & 1;\n      if (tmp !== this.prgAddressSelect) {\n        this.prgAddressChanged = true;\n      }\n      this.prgAddressSelect = tmp;\n      this.chrAddressSelect = (value >> 7) & 1;\n      break;\n\n    case 0x8001:\n      // Page number for command\n      this.executeCommand(this.command, value);\n      break;\n\n    case 0xa000:\n      // Mirroring select\n      if ((value & 1) !== 0) {\n        this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n      } else {\n        this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n      }\n      break;\n\n    case 0xa001:\n      // SaveRAM Toggle\n      // TODO\n      //nes.getRom().setSaveState((value&1)!=0);\n      break;\n\n    case 0xc000:\n      // IRQ Counter register\n      this.irqCounter = value;\n      //nes.ppu.mapperIrqCounter = 0;\n      break;\n\n    case 0xc001:\n      // IRQ Latch register\n      this.irqLatchValue = value;\n      break;\n\n    case 0xe000:\n      // IRQ Control Reg 0 (disable)\n      //irqCounter = irqLatchValue;\n      this.irqEnable = 0;\n      break;\n\n    case 0xe001:\n      // IRQ Control Reg 1 (enable)\n      this.irqEnable = 1;\n      break;\n\n    default:\n    // Not a MMC3 register.\n    // The game has probably crashed,\n    // since it tries to write to ROM..\n    // IGNORE.\n  }\n};\n\nMappers[4].prototype.executeCommand = function(cmd, arg) {\n  switch (cmd) {\n    case this.CMD_SEL_2_1K_VROM_0000:\n      // Select 2 1KB VROM pages at 0x0000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0000);\n        this.load1kVromBank(arg + 1, 0x0400);\n      } else {\n        this.load1kVromBank(arg, 0x1000);\n        this.load1kVromBank(arg + 1, 0x1400);\n      }\n      break;\n\n    case this.CMD_SEL_2_1K_VROM_0800:\n      // Select 2 1KB VROM pages at 0x0800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0800);\n        this.load1kVromBank(arg + 1, 0x0c00);\n      } else {\n        this.load1kVromBank(arg, 0x1800);\n        this.load1kVromBank(arg + 1, 0x1c00);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1000:\n      // Select 1K VROM Page at 0x1000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1000);\n      } else {\n        this.load1kVromBank(arg, 0x0000);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1400:\n      // Select 1K VROM Page at 0x1400:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1400);\n      } else {\n        this.load1kVromBank(arg, 0x0400);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1800:\n      // Select 1K VROM Page at 0x1800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1800);\n      } else {\n        this.load1kVromBank(arg, 0x0800);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1C00:\n      // Select 1K VROM Page at 0x1C00:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1c00);\n      } else {\n        this.load1kVromBank(arg, 0x0c00);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE1:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n\n      // Select first switchable ROM page:\n      if (this.prgAddressSelect === 0) {\n        this.load8kRomBank(arg, 0x8000);\n      } else {\n        this.load8kRomBank(arg, 0xc000);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE2:\n      // Select second switchable ROM page:\n      this.load8kRomBank(arg, 0xa000);\n\n      // hardwire appropriate bank:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n  }\n};\n\nMappers[4].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC3: Invalid ROM! Unable to load.\");\n  }\n\n  // Load hardwired PRG banks (0xC000 and 0xE000):\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2 + 1, 0xe000);\n\n  // Load swappable PRG banks (0x8000 and 0xA000):\n  this.load8kRomBank(0, 0x8000);\n  this.load8kRomBank(1, 0xa000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nMappers[4].prototype.clockIrqCounter = function() {\n  if (this.irqEnable === 1) {\n    this.irqCounter--;\n    if (this.irqCounter < 0) {\n      // Trigger IRQ:\n      //nes.getCpu().doIrq();\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n      this.irqCounter = this.irqLatchValue;\n    }\n  }\n};\n\nMappers[4].prototype.toJSON = function() {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.command = this.command;\n  s.prgAddressSelect = this.prgAddressSelect;\n  s.chrAddressSelect = this.chrAddressSelect;\n  s.pageNumber = this.pageNumber;\n  s.irqCounter = this.irqCounter;\n  s.irqLatchValue = this.irqLatchValue;\n  s.irqEnable = this.irqEnable;\n  s.prgAddressChanged = this.prgAddressChanged;\n  return s;\n};\n\nMappers[4].prototype.fromJSON = function(s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.command = s.command;\n  this.prgAddressSelect = s.prgAddressSelect;\n  this.chrAddressSelect = s.chrAddressSelect;\n  this.pageNumber = s.pageNumber;\n  this.irqCounter = s.irqCounter;\n  this.irqLatchValue = s.irqLatchValue;\n  this.irqEnable = s.irqEnable;\n  this.prgAddressChanged = s.prgAddressChanged;\n};\n\n/**\n * Mapper005 (MMC5,ExROM)\n *\n * @example Castlevania 3, Just Breed, Uncharted Waters, Romance of the 3 Kingdoms 2, Laser Invasion, Metal Slader Glory, Uchuu Keibitai SDF, Shin 4 Nin Uchi Mahjong - Yakuman Tengoku\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_005\n * @constructor\n */\nMappers[5] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[5].prototype = new Mappers[0]();\n\nMappers[5].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load8kVromBank(value, 0x0000);\n  }\n};\n\nMappers[5].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x5000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x5100:\n      this.prg_size = value & 3;\n      break;\n    case 0x5101:\n      this.chr_size = value & 3;\n      break;\n    case 0x5102:\n      this.sram_we_a = value & 3;\n      break;\n    case 0x5103:\n      this.sram_we_b = value & 3;\n      break;\n    case 0x5104:\n      this.graphic_mode = value & 3;\n      break;\n    case 0x5105:\n      this.nametable_mode = value;\n      this.nametable_type[0] = value & 3;\n      this.load1kVromBank(value & 3, 0x2000);\n      value >>= 2;\n      this.nametable_type[1] = value & 3;\n      this.load1kVromBank(value & 3, 0x2400);\n      value >>= 2;\n      this.nametable_type[2] = value & 3;\n      this.load1kVromBank(value & 3, 0x2800);\n      value >>= 2;\n      this.nametable_type[3] = value & 3;\n      this.load1kVromBank(value & 3, 0x2c00);\n      break;\n    case 0x5106:\n      this.fill_chr = value;\n      break;\n    case 0x5107:\n      this.fill_pal = value & 3;\n      break;\n    case 0x5113:\n      this.SetBank_SRAM(3, value & 3);\n      break;\n    case 0x5114:\n    case 0x5115:\n    case 0x5116:\n    case 0x5117:\n      this.SetBank_CPU(address, value);\n      break;\n    case 0x5120:\n    case 0x5121:\n    case 0x5122:\n    case 0x5123:\n    case 0x5124:\n    case 0x5125:\n    case 0x5126:\n    case 0x5127:\n      this.chr_mode = 0;\n      this.chr_page[0][address & 7] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5128:\n    case 0x5129:\n    case 0x512a:\n    case 0x512b:\n      this.chr_mode = 1;\n      this.chr_page[1][(address & 3) + 0] = value;\n      this.chr_page[1][(address & 3) + 4] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5200:\n      this.split_control = value;\n      break;\n    case 0x5201:\n      this.split_scroll = value;\n      break;\n    case 0x5202:\n      this.split_page = value & 0x3f;\n      break;\n    case 0x5203:\n      this.irq_line = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5204:\n      this.irq_enable = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5205:\n      this.mult_a = value;\n      break;\n    case 0x5206:\n      this.mult_b = value;\n      break;\n    default:\n      if (address >= 0x5000 && address <= 0x5015) {\n        this.nes.papu.exWrite(address, value);\n      } else if (address >= 0x5c00 && address <= 0x5fff) {\n        if (this.graphic_mode === 2) {\n          // ExRAM\n          // vram write\n        } else if (this.graphic_mode !== 3) {\n          // Split,ExGraphic\n          if (this.irq_status & 0x40) {\n            // vram write\n          } else {\n            // vram write\n          }\n        }\n      } else if (address >= 0x6000 && address <= 0x7fff) {\n        if (this.sram_we_a === 2 && this.sram_we_b === 1) {\n          // additional ram write\n        }\n      }\n      break;\n  }\n};\n\nMappers[5].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0x8000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xa000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xc000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xe000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper007 (AxROM)\n * @example Battletoads, Time Lord, Marble Madness\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_007\n * @constructor\n */\nMappers[7] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[7].prototype = new Mappers[0]();\n\nMappers[7].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load32kRomBank(value & 0x7, 0x8000);\n    if (value & 0x10) {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING2);\n    } else {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n    }\n  }\n};\n\nMappers[7].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"AOROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadPRGROM();\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 011 (Color Dreams)\n *\n * @description http://wiki.nesdev.com/w/index.php/Color_Dreams\n * @example Crystal Mines, Metal Fighter\n * @constructor\n */\nMappers[11] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[11].prototype = new Mappers[0]();\n\nMappers[11].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank:\n    var prgbank1 = ((value & 0xf) * 2) % this.nes.rom.romCount;\n    var prgbank2 = ((value & 0xf) * 2 + 1) % this.nes.rom.romCount;\n\n    this.loadRomBank(prgbank1, 0x8000);\n    this.loadRomBank(prgbank2, 0xc000);\n\n    if (this.nes.rom.vromCount > 0) {\n      // Swap in the given VROM bank at 0x0000:\n      var bank = ((value >> 4) * 2) % this.nes.rom.vromCount;\n      this.loadVromBank(bank, 0x0000);\n      this.loadVromBank(bank + 1, 0x1000);\n    }\n  }\n};\n\n/**\n * Mapper 034 (BNROM, NINA-01)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_034\n * @example Darkseed, Mashou, Mission Impossible 2\n * @constructor\n */\nMappers[34] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[34].prototype = new Mappers[0]();\n\nMappers[34].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    this.load32kRomBank(value, 0x8000);\n  }\n};\n\n/**\n * Mapper 038\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_038\n * @example Crime Busters\n * @constructor\n */\nMappers[38] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[38].prototype = new Mappers[0]();\n\nMappers[38].prototype.write = function(address, value) {\n  if (address < 0x7000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank(value & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank(((value >> 2) & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 066 (GxROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_066\n * @example Doraemon, Dragon Power, Gumshoe, Thunder & Lightning,\n * Super Mario Bros. + Duck Hunt\n * @constructor\n */\nMappers[66] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[66].prototype = new Mappers[0]();\n\nMappers[66].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 094 (UN1ROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_094\n * @example Senjou no Ookami\n * @constructor\n */\nMappers[94] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[94].prototype = new Mappers[0]();\n\nMappers[94].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value >> 2, 0x8000);\n  }\n};\n\nMappers[94].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UN1ROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 140\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_140\n * @example Bio Senshi Dan - Increaser Tono Tatakai\n * @constructor\n */\nMappers[140] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[140].prototype = new Mappers[0]();\n\nMappers[140].prototype.write = function(address, value) {\n  if (address < 0x6000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 0xf) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 180\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_180\n * @example Crazy Climber\n * @constructor\n */\nMappers[180] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[180].prototype = new Mappers[0]();\n\nMappers[180].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0xc000:\n    this.loadRomBank(value, 0xc000);\n  }\n};\n\nMappers[180].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"Mapper 180: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nmodule.exports = Mappers;\n","import React from \"react\";\n\nconst config = {\n  ROMS: {\n    owlia: {\n      name: \"The Legends of Owlia\",\n      description: (\n        <span>\n          <a\n            href=\"http://www.gradualgames.com/p/the-legends-of-owlia_1.html\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Owlia by Gradual Games\n          </a>{\" \"}\n          /{\" \"}\n          <a\n            href=\"http://www.infiniteneslives.com/owlia.php\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Buy the cartridge\n          </a>\n        </span>\n      ),\n      url: \"https://cdn.jsdelivr.net/gh/bfirsh/jsnes-roms@master/owlia.nes\"\n    },\n    nomolos: {\n      name: \"Nomolos: Storming the Catsle\",\n      description: (\n        <span>\n          <a\n            href=\"http://www.gradualgames.com/p/nomolos-storming-catsle.html\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Monolos by Gradual Games\n          </a>{\" \"}\n          /{\" \"}\n          <a\n            href=\"http://www.infiniteneslives.com/nomolos.php\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Buy the cartridge\n          </a>\n        </span>\n      ),\n      url: \"https://cdn.jsdelivr.net/gh/bfirsh/jsnes-roms@master/nomolos.nes\"\n    },\n    croom: {\n      name: \"Concentration Room\",\n      description: (\n        <span>\n          <a\n            href=\"http://www.pineight.com/croom/README\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Concentration Room\n          </a>{\" \"}\n          by Damian Yerrick\n        </span>\n      ),\n      url:\n        \"https://cdn.jsdelivr.net/gh/bfirsh/jsnes-roms@master/croom/croom.nes\"\n    },\n    jmj: {\n      name: \"JMJ\",\n      description: \"James Bond Jr.\",\n      url: \"/roms/jmj.nes\"\n    }\n  },\n  GOOGLE_ANALYTICS_CODE: process.env.REACT_APP_GOOGLE_ANALYTICS_CODE,\n  SENTRY_URI: process.env.REACT_APP_SENTRY_URI\n};\n\nexport default config;\n","const pFileReader = function(file) {\n  return new Promise((resolve, reject) => {\n    var reader = new FileReader();\n    reader.onload = resolve;\n    reader.readAsBinaryString(file);\n  });\n};\n\nconst hashFile = function(byteString) {\n  const asHex = buffer => {\n    return Array.from(new Uint8Array(buffer))\n      .map(b => b.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n  };\n\n  const ab = new ArrayBuffer(byteString.length);\n  var ia = new Uint8Array(ab);\n\n  for (var i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  return crypto.subtle.digest(\"SHA-1\", ab).then(asHex);\n};\n\nconst RomLibrary = {\n  getRomInfoByHash: function(hash) {\n    return this.load().find(rom => rom.hash === hash);\n  },\n  save: function(file) {\n    return pFileReader(file)\n      .then(function(readFile) {\n        const byteString = readFile.target.result;\n        return hashFile(byteString).then(hash => {\n          return { hash, byteString };\n        });\n      })\n      .then(({ hash, byteString }) => {\n        const savedRomInfo = localStorage.getItem(\"savedRomInfo\");\n        const existingLibrary = savedRomInfo ? JSON.parse(savedRomInfo) : [];\n\n        const rom = {\n          name: file.name,\n          hash: hash,\n          added: Date.now()\n        };\n\n        const newRomInfo = JSON.stringify(existingLibrary.concat([rom]));\n\n        localStorage.setItem(\"savedRomInfo\", newRomInfo);\n        localStorage.setItem(\"blob-\" + hash, byteString);\n\n        return rom;\n      });\n  },\n  load: function() {\n    const localData = localStorage.getItem(\"savedRomInfo\");\n    if (!localData) return [];\n    const savedRomInfo = JSON.parse(localStorage.getItem(\"savedRomInfo\"));\n    return savedRomInfo || [];\n  },\n  delete: function(hash) {\n    const existingLibrary = this.load();\n    localStorage.removeItem(\"blob-\" + hash);\n    localStorage.setItem(\n      \"savedRomInfo\",\n      JSON.stringify(existingLibrary.filter(rom => rom.hash !== hash))\n    );\n  }\n};\n\nexport default RomLibrary;\n","import React, { Component } from \"react\";\nimport \"./ListPage.css\";\nimport { ListGroup } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport config from \"./config\";\n\nimport RomLibrary from \"./RomLibrary\";\n\nclass ListPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      romLibrary: RomLibrary.load()\n    };\n  }\n  render() {\n    return (\n      <div\n        className=\"container ListPage my-4\"\n        onDragOver={this.handleDragOver}\n        onDrop={this.handleDrop}\n      >\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-8\">\n            <header className=\"mb-4\">\n              <h1 className=\"mb-3\">JSNES</h1>\n              <p>\n                A JavaScript NES emulator.{\" \"}\n                <a href=\"https://github.com/bfirsh/jsnes\">Source on GitHub.</a>\n              </p>\n            </header>\n\n            <ListGroup className=\"mb-4\">\n              {Object.keys(config.ROMS)\n                .sort()\n                .map(key => (\n                  <Link\n                    key={key}\n                    to={\"/run/\" + encodeURIComponent(key)}\n                    className=\"list-group-item\"\n                  >\n                    {config.ROMS[key][\"name\"]}\n                    <span className=\"float-right\">&rsaquo;</span>\n                  </Link>\n                ))}\n            </ListGroup>\n\n            <p>\n              Or, drag and drop a ROM file onto the page to play it. (Google may\n              help you find them.)\n            </p>\n\n            {this.state.romLibrary.length > 0 ? (\n              <div>\n                <p>Previously played:</p>\n\n                <ListGroup className=\"mb-4\">\n                  {this.state.romLibrary\n                    .sort((a, b) => new Date(b.added) - new Date(a.added))\n                    .map(rom => (\n                      <Link\n                        key={rom.hash}\n                        to={\"run/local-\" + rom.hash}\n                        className=\"list-group-item\"\n                      >\n                        {rom.name}\n                        <span\n                          onClick={e => {\n                            e.preventDefault();\n                            this.deleteRom(rom.hash);\n                          }}\n                          className=\"delete\"\n                          title=\"Delete\"\n                        >\n                          &times;\n                        </span>\n                        <span className=\"float-right\">&rsaquo;</span>\n                      </Link>\n                    ))}\n                </ListGroup>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  deleteRom = hash => {\n    RomLibrary.delete(hash);\n    this.updateLibrary();\n  };\n\n  updateLibrary = () => {\n    this.setState({ romLibrary: RomLibrary.load() });\n  };\n\n  handleDragOver = e => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"copy\";\n  };\n\n  handleDrop = e => {\n    e.preventDefault();\n\n    const file = e.dataTransfer.items\n      ? e.dataTransfer.items[0].getAsFile()\n      : e.dataTransfer.files[0];\n\n    RomLibrary.save(file).then(rom => {\n      this.updateLibrary();\n      this.props.history.push({ pathname: \"run/local-\" + rom.hash });\n    });\n  };\n}\n\nexport default ListPage;\n","import React, { Component } from \"react\";\n\nclass ControlMapperRow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerOneButton: \"\",\n      playerTwoButton: \"\",\n      waitingForKey: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    var keys = this.props.keys;\n    var button = this.props.button;\n    var playerButtons = [];\n    for (var key in keys) {\n      if (keys[key][0] === 1 && keys[key][1] === button) {\n        playerButtons[0] = keys[key][2];\n        console.log(playerButtons[0]);\n      } else if (keys[key][0] === 2 && keys[key][1] === button) {\n        playerButtons[1] = keys[key][2];\n      }\n    }\n    this.setState({\n      playerOneButton: playerButtons[0],\n      playerTwoButton: playerButtons[1]\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    var keys = this.props.keys;\n    var button = this.props.button;\n    var playerButtons = [];\n    var gamepadButton;\n    var newButton;\n\n    for (var key in keys) {\n      if (keys[key][0] === 1 && keys[key][1] === button) {\n        playerButtons[0] = keys[key][2];\n        console.log(playerButtons[0]);\n      } else if (keys[key][0] === 2 && keys[key][1] === button) {\n        playerButtons[1] = keys[key][2];\n      }\n    }\n\n    var searchButton = (gamepadConfig, buttonId) => {\n      return gamepadConfig.buttons.filter(b => b.buttonId === buttonId)[0];\n    };\n\n    var searchNewButton = (prevGamepadConfig, gamepadConfig) => {\n      return gamepadConfig.buttons.filter(b => {\n        return (\n          !prevGamepadConfig ||\n          !prevGamepadConfig.buttons.some(b2 => b2.buttonId === b.buttonId)\n        );\n      })[0];\n    };\n\n    var waitingForKey = 0;\n    var waitingForKeyPlayer = 0;\n\n    var gamepadButtonName = gamepadButton => {\n      if (gamepadButton.type === \"button\") return \"Btn-\" + gamepadButton.code;\n      if (gamepadButton.type === \"axis\")\n        return \"Axis-\" + gamepadButton.code + \" \" + gamepadButton.value;\n    };\n\n    if (this.props.gamepadConfig && this.props.gamepadConfig.playerGamepadId) {\n      const playerGamepadId = this.props.gamepadConfig.playerGamepadId;\n      if (playerGamepadId[0]) {\n        playerButtons[0] = \"\";\n        gamepadButton = searchButton(\n          this.props.gamepadConfig.configs[playerGamepadId[0]],\n          button\n        );\n        newButton = searchNewButton(\n          prevProps.gamepadConfig.configs[playerGamepadId[0]],\n          this.props.gamepadConfig.configs[playerGamepadId[0]]\n        );\n        if (gamepadButton) {\n          playerButtons[0] = gamepadButtonName(gamepadButton);\n        } else {\n          if (newButton && newButton.buttonId === this.props.prevButton) {\n            if (!waitingForKey) {\n              waitingForKey = 1;\n              waitingForKeyPlayer = 1;\n            }\n          }\n        }\n      }\n\n      if (playerGamepadId[1]) {\n        playerButtons[1] = \"\";\n        gamepadButton = searchButton(\n          this.props.gamepadConfig.configs[playerGamepadId[1]],\n          button\n        );\n        newButton = searchNewButton(\n          prevProps.gamepadConfig.configs[playerGamepadId[1]],\n          this.props.gamepadConfig.configs[playerGamepadId[1]]\n        );\n        if (gamepadButton) {\n          playerButtons[1] = gamepadButtonName(gamepadButton);\n        } else {\n          if (newButton && newButton.buttonId === this.props.prevButton) {\n            if (!waitingForKey) {\n              waitingForKey = 2;\n              waitingForKeyPlayer = 2;\n            }\n          }\n        }\n      }\n    }\n\n    var newState = {};\n\n    if (waitingForKey) {\n      this.props.handleClick([waitingForKeyPlayer, this.props.button]);\n    }\n    // Prevent setState being called repeatedly\n    if (\n      prevState.playerOneButton !== playerButtons[0] ||\n      prevState.playerTwoButton !== playerButtons[1]\n    ) {\n      newState.playerOneButton = playerButtons[0];\n      newState.playerTwoButton = playerButtons[1];\n    }\n\n    if (waitingForKey) {\n      newState.waitingForKey = waitingForKey;\n    } else if (prevState.waitingForKey === 1) {\n      if (this.props.currentPromptButton !== this.props.button) {\n        newState.waitingForKey = 0;\n      }\n    } else if (prevState.waitingForKey === 2) {\n      if (this.props.currentPromptButton !== this.props.button) {\n        newState.waitingForKey = 0;\n      }\n    }\n\n    if (Object.keys(newState).length > 0) {\n      this.setState(newState);\n    }\n  }\n\n  handleClick(player) {\n    this.props.handleClick([player, this.props.button]);\n    this.setState({\n      waitingForKey: player\n    });\n  }\n\n  render() {\n    const waitingText = \"Press key or button...\";\n    return (\n      <tr>\n        <td>{this.props.buttonName}</td>\n        <td onClick={() => this.handleClick(1)}>\n          {this.state.waitingForKey === 1\n            ? waitingText\n            : this.state.playerOneButton}\n        </td>\n        <td onClick={() => this.handleClick(2)}>\n          {this.state.waitingForKey === 2\n            ? waitingText\n            : this.state.playerTwoButton}\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default ControlMapperRow;\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Table\n} from \"reactstrap\";\nimport { Controller } from \"jsnes\";\nimport ControlMapperRow from \"./ControlMapperRow\";\n\nconst GAMEPAD_ICON = \"../img/nes_controller.png\";\nconst KEYBOARD_ICON = \"../img/keyboard.png\";\n\nclass ControlsModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gamepadConfig: props.gamepadConfig,\n      keys: props.keys,\n      button: undefined,\n      modified: false\n    };\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleGamepadButtonDown = this.handleGamepadButtonDown.bind(this);\n    this.listenForKey = this.listenForKey.bind(this);\n\n    this.state.gamepadConfig = this.state.gamepadConfig || {};\n    this.state.gamepadConfig.playerGamepadId = this.state.gamepadConfig\n      .playerGamepadId || [null, null];\n    this.state.gamepadConfig.configs = this.state.gamepadConfig.configs || {};\n\n    this.state.controllerIcon = this.state.gamepadConfig.playerGamepadId.map(\n      gamepadId => (gamepadId ? GAMEPAD_ICON : KEYBOARD_ICON)\n    );\n    this.state.controllerIconAlt = this.state.gamepadConfig.playerGamepadId.map(\n      gamepadId => (gamepadId ? \"gamepad\" : \"keyboard\")\n    );\n    this.state.currentPromptButton = -1;\n  }\n\n  componentWillUnmount() {\n    if (this.state.modified) {\n      this.props.setKeys(this.state.keys);\n      this.props.setGamepadConfig(this.state.gamepadConfig);\n    }\n    this.removeKeyListener();\n  }\n\n  listenForKey(button) {\n    var currentPromptButton = button[1];\n\n    this.removeKeyListener();\n    this.setState({ button, currentPromptButton });\n    this.props.promptButton(this.handleGamepadButtonDown);\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  handleGamepadButtonDown(buttonInfo) {\n    this.removeKeyListener();\n\n    var button = this.state.button;\n\n    const playerId = button[0];\n    const buttonId = button[1];\n\n    const gamepadId = buttonInfo.gamepadId;\n    const gamepadConfig = this.state.gamepadConfig;\n\n    // link player to gamepad\n    const playerGamepadId = gamepadConfig.playerGamepadId.slice(0);\n    const newConfig = {};\n\n    playerGamepadId[playerId - 1] = gamepadId;\n\n    const rejectButtonId = b => {\n      return b.buttonId !== buttonId;\n    };\n\n    const newButton = {\n      code: buttonInfo.code,\n      type: buttonInfo.type,\n      buttonId: buttonId,\n      value: buttonInfo.value\n    };\n    newConfig[gamepadId] = {\n      buttons: (gamepadConfig.configs[gamepadId] || { buttons: [] }).buttons\n        .filter(rejectButtonId)\n        .concat([newButton])\n    };\n\n    const configs = Object.assign({}, gamepadConfig.configs, newConfig);\n\n    this.setState({\n      gamepadConfig: {\n        configs: configs,\n        playerGamepadId: playerGamepadId\n      },\n      currentPromptButton: -1,\n      controllerIcon: playerGamepadId.map(gamepadId =>\n        gamepadId ? GAMEPAD_ICON : KEYBOARD_ICON\n      ),\n      modified: true\n    });\n  }\n\n  handleKeyDown(event) {\n    this.removeKeyListener();\n\n    var button = this.state.button;\n    var keys = this.state.keys;\n    var newKeys = {};\n    for (var key in keys) {\n      if (keys[key][0] !== button[0] || keys[key][1] !== button[1]) {\n        newKeys[key] = keys[key];\n      }\n    }\n\n    const playerGamepadId = this.state.gamepadConfig.playerGamepadId.slice(0);\n    const playerId = button[0];\n    playerGamepadId[playerId - 1] = null;\n\n    this.setState({\n      keys: {\n        ...newKeys,\n        [event.keyCode]: [\n          ...button.slice(0, 2),\n          event.key.length > 1 ? event.key : String(event.key).toUpperCase()\n        ]\n      },\n      button: undefined,\n      gamepadConfig: {\n        configs: this.state.gamepadConfig.configs,\n        playerGamepadId: playerGamepadId\n      },\n      currentPromptButton: -1,\n      controllerIcon: playerGamepadId.map(gamepadId =>\n        gamepadId ? GAMEPAD_ICON : KEYBOARD_ICON\n      ),\n      controllerIconAlt: playerGamepadId.map(gamepadId =>\n        gamepadId ? \"gamepad\" : \"keyboard\"\n      ),\n      modified: true\n    });\n  }\n\n  removeKeyListener() {\n    this.props.promptButton(null);\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  render() {\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n        toggle={this.props.toggle}\n        className=\"ControlsModal\"\n      >\n        <ModalHeader toggle={this.props.toggle}>Controls</ModalHeader>\n        <ModalBody>\n          <Table>\n            <thead>\n              <tr>\n                <th>Button</th>\n                <th>\n                  Player 1\n                  <img\n                    className=\"controller-icon\"\n                    src={this.state.controllerIcon[0]}\n                    alt={this.state.controllerIconAlt[0]}\n                  />\n                </th>\n                <th>\n                  Player 2\n                  <img\n                    className=\"controller-icon\"\n                    src={this.state.controllerIcon[1]}\n                    alt={this.state.controllerIconAlt[1]}\n                  />\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <ControlMapperRow\n                buttonName=\"Left\"\n                currentPromptButton={this.state.currentPromptButton}\n                button={Controller.BUTTON_LEFT}\n                prevButton={Controller.BUTTON_SELECT}\n                keys={this.state.keys}\n                handleClick={this.listenForKey}\n                gamepadConfig={this.state.gamepadConfig}\n              />\n              <ControlMapperRow\n                buttonName=\"Right\"\n                currentPromptButton={this.state.currentPromptButton}\n                button={Controller.BUTTON_RIGHT}\n                prevButton={Controller.BUTTON_LEFT}\n                keys={this.state.keys}\n                handleClick={this.listenForKey}\n                gamepadConfig={this.state.gamepadConfig}\n              />\n              <ControlMapperRow\n                buttonName=\"Up\"\n                currentPromptButton={this.state.currentPromptButton}\n                button={Controller.BUTTON_UP}\n                prevButton={Controller.BUTTON_RIGHT}\n                keys={this.state.keys}\n                handleClick={this.listenForKey}\n                gamepadConfig={this.state.gamepadConfig}\n              />\n              <ControlMapperRow\n                buttonName=\"Down\"\n                currentPromptButton={this.state.currentPromptButton}\n                button={Controller.BUTTON_DOWN}\n                prevButton={Controller.BUTTON_UP}\n                keys={this.state.keys}\n                handleClick={this.listenForKey}\n                gamepadConfig={this.state.gamepadConfig}\n              />\n              <ControlMapperRow\n                buttonName=\"A\"\n                currentPromptButton={this.state.currentPromptButton}\n                button={Controller.BUTTON_A}\n                prevButton={Controller.BUTTON_DOWN}\n                keys={this.state.keys}\n                handleClick={this.listenForKey}\n                gamepadConfig={this.state.gamepadConfig}\n              />\n              <ControlMapperRow\n                buttonName=\"B\"\n                currentPromptButton={this.state.currentPromptButton}\n                button={Controller.BUTTON_B}\n                prevButton={Controller.BUTTON_A}\n                keys={this.state.keys}\n                handleClick={this.listenForKey}\n                gamepadConfig={this.state.gamepadConfig}\n              />\n              <ControlMapperRow\n                buttonName=\"Start\"\n                currentPromptButton={this.state.currentPromptButton}\n                button={Controller.BUTTON_START}\n                prevButton={Controller.BUTTON_B}\n                keys={this.state.keys}\n                handleClick={this.listenForKey}\n                gamepadConfig={this.state.gamepadConfig}\n              />\n              <ControlMapperRow\n                buttonName=\"Select\"\n                currentPromptButton={this.state.currentPromptButton}\n                button={Controller.BUTTON_SELECT}\n                prevButton={Controller.BUTTON_START}\n                keys={this.state.keys}\n                handleClick={this.listenForKey}\n                gamepadConfig={this.state.gamepadConfig}\n              />\n            </tbody>\n          </Table>\n        </ModalBody>\n        <ModalFooter>\n          <Button outline color=\"primary\" onClick={this.props.toggle}>\n            Close\n          </Button>\n        </ModalFooter>\n      </Modal>\n    );\n  }\n}\n\nexport default ControlsModal;\n","const FPS = 60.098;\n\nexport default class FrameTimer {\n  constructor(props) {\n    // Run at 60 FPS\n    this.onGenerateFrame = props.onGenerateFrame;\n    // Run on animation frame\n    this.onWriteFrame = props.onWriteFrame;\n    this.onAnimationFrame = this.onAnimationFrame.bind(this);\n    this.running = true;\n    this.interval = 1e3 / FPS;\n    this.lastFrameTime = false;\n  }\n\n  start() {\n    this.running = true;\n    this.requestAnimationFrame();\n  }\n\n  stop() {\n    this.running = false;\n    if (this._requestID) window.cancelAnimationFrame(this._requestID);\n    this.lastFrameTime = false;\n  }\n\n  requestAnimationFrame() {\n    this._requestID = window.requestAnimationFrame(this.onAnimationFrame);\n  }\n\n  generateFrame() {\n    this.onGenerateFrame();\n    this.lastFrameTime += this.interval;\n  }\n\n  onAnimationFrame = time => {\n    this.requestAnimationFrame();\n    // how many ms after 60fps frame time\n    let excess = time % this.interval;\n\n    // newFrameTime is the current time aligned to 60fps intervals.\n    // i.e. 16.6, 33.3, etc ...\n    let newFrameTime = time - excess;\n\n    // first frame, do nothing\n    if (!this.lastFrameTime) {\n      this.lastFrameTime = newFrameTime;\n      return;\n    }\n\n    let numFrames = Math.round(\n      (newFrameTime - this.lastFrameTime) / this.interval\n    );\n\n    // This can happen a lot on a 144Hz display\n    if (numFrames === 0) {\n      //console.log(\"WOAH, no frames\");\n      return;\n    }\n\n    // update display on first frame only\n    this.generateFrame();\n    this.onWriteFrame();\n\n    // we generate additional frames evenly before the next\n    // onAnimationFrame call.\n    // additional frames are generated but not displayed\n    // until next frame draw\n    let timeToNextFrame = this.interval - excess;\n    for (let i = 1; i < numFrames; i++) {\n      setTimeout(() => {\n        this.generateFrame();\n      }, (i * timeToNextFrame) / numFrames);\n    }\n    if (numFrames > 1) console.log(\"SKIP\", numFrames - 1, this.lastFrameTime);\n  };\n}\n","export default class GamepadController {\n  constructor(options) {\n    this.onButtonDown = options.onButtonDown;\n    this.onButtonUp = options.onButtonUp;\n    this.gamepadState = [];\n    this.buttonCallback = null;\n  }\n\n  disableIfGamepadEnabled = callback => {\n    var self = this;\n    return (playerId, buttonId) => {\n      if (!self.gamepadConfig) {\n        return callback(playerId, buttonId);\n      }\n\n      var playerGamepadId = self.gamepadConfig.playerGamepadId;\n      if (!playerGamepadId || !playerGamepadId[playerId - 1]) {\n        // allow callback only if player is not associated to any gamepad\n        return callback(playerId, buttonId);\n      }\n    };\n  };\n\n  _getPlayerNumberFromGamepad = gamepad => {\n    if (this.gamepadConfig.playerGamepadId[0] === gamepad.id) {\n      return 1;\n    }\n\n    if (this.gamepadConfig.playerGamepadId[1] === gamepad.id) {\n      return 2;\n    }\n\n    return 1;\n  };\n\n  poll = () => {\n    const gamepads = navigator.getGamepads\n      ? navigator.getGamepads()\n      : navigator.webkitGetGamepads();\n\n    const usedPlayers = [];\n\n    for (let gamepadIndex = 0; gamepadIndex < gamepads.length; gamepadIndex++) {\n      const gamepad = gamepads[gamepadIndex];\n      const previousGamepad = this.gamepadState[gamepadIndex];\n\n      if (!gamepad) {\n        continue;\n      }\n\n      if (!previousGamepad) {\n        this.gamepadState[gamepadIndex] = gamepad;\n        continue;\n      }\n\n      const buttons = gamepad.buttons;\n      const previousButtons = previousGamepad.buttons;\n\n      if (this.buttonCallback) {\n        for (let code = 0; code < gamepad.axes.length; code++) {\n          const axis = gamepad.axes[code];\n          const previousAxis = previousGamepad.axes[code];\n\n          if (axis === -1 && previousAxis !== -1) {\n            this.buttonCallback({\n              gamepadId: gamepad.id,\n              type: \"axis\",\n              code: code,\n              value: axis\n            });\n          }\n\n          if (axis === 1 && previousAxis !== 1) {\n            this.buttonCallback({\n              gamepadId: gamepad.id,\n              type: \"axis\",\n              code: code,\n              value: axis\n            });\n          }\n        }\n\n        for (let code = 0; code < buttons.length; code++) {\n          const button = buttons[code];\n          const previousButton = previousButtons[code];\n          if (button.pressed && !previousButton.pressed) {\n            this.buttonCallback({\n              gamepadId: gamepad.id,\n              type: \"button\",\n              code: code\n            });\n          }\n        }\n      } else if (this.gamepadConfig) {\n        let playerNumber = this._getPlayerNumberFromGamepad(gamepad);\n        if (usedPlayers.length < 2) {\n          if (usedPlayers.indexOf(playerNumber) !== -1) {\n            playerNumber++;\n            if (playerNumber > 2) playerNumber = 1;\n          }\n          usedPlayers.push(playerNumber);\n\n          if (this.gamepadConfig.configs[gamepad.id]) {\n            const configButtons = this.gamepadConfig.configs[gamepad.id]\n              .buttons;\n\n            for (let i = 0; i < configButtons.length; i++) {\n              const configButton = configButtons[i];\n              if (configButton.type === \"button\") {\n                const code = configButton.code;\n                const button = buttons[code];\n                const previousButton = previousButtons[code];\n\n                if (button.pressed && !previousButton.pressed) {\n                  this.onButtonDown(playerNumber, configButton.buttonId);\n                } else if (!button.pressed && previousButton.pressed) {\n                  this.onButtonUp(playerNumber, configButton.buttonId);\n                }\n              } else if (configButton.type === \"axis\") {\n                const code = configButton.code;\n                const axis = gamepad.axes[code];\n                const previousAxis = previousGamepad.axes[code];\n\n                if (\n                  axis === configButton.value &&\n                  previousAxis !== configButton.value\n                ) {\n                  this.onButtonDown(playerNumber, configButton.buttonId);\n                }\n\n                if (\n                  axis !== configButton.value &&\n                  previousAxis === configButton.value\n                ) {\n                  this.onButtonUp(playerNumber, configButton.buttonId);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.gamepadState[gamepadIndex] = {\n        buttons: buttons.map(b => {\n          return { pressed: b.pressed };\n        }),\n        axes: gamepad.axes.slice(0)\n      };\n    }\n  };\n\n  promptButton = f => {\n    if (!f) {\n      this.buttonCallback = f;\n    } else {\n      this.buttonCallback = buttonInfo => {\n        this.buttonCallback = null;\n        f(buttonInfo);\n      };\n    }\n  };\n\n  loadGamepadConfig = () => {\n    var gamepadConfig;\n    try {\n      gamepadConfig = localStorage.getItem(\"gamepadConfig\");\n      if (gamepadConfig) {\n        gamepadConfig = JSON.parse(gamepadConfig);\n      }\n    } catch (e) {\n      console.log(\"Failed to get gamepadConfig from localStorage.\", e);\n    }\n\n    this.gamepadConfig = gamepadConfig;\n  };\n\n  setGamepadConfig = gamepadConfig => {\n    try {\n      localStorage.setItem(\"gamepadConfig\", JSON.stringify(gamepadConfig));\n      this.gamepadConfig = gamepadConfig;\n    } catch (e) {\n      console.log(\"Failed to set gamepadConfig in localStorage\");\n    }\n  };\n\n  startPolling = () => {\n    if (!(navigator.getGamepads || navigator.webkitGetGamepads)) {\n      return { stop: () => {} };\n    }\n\n    let stopped = false;\n    const loop = () => {\n      if (stopped) return;\n\n      this.poll();\n      requestAnimationFrame(loop);\n    };\n    requestAnimationFrame(loop);\n\n    return {\n      stop: () => {\n        stopped = true;\n      }\n    };\n  };\n}\n","  import { Controller } from \"jsnes\";\n\n// Mapping keyboard code to [controller, button]\nconst KEYS = {\n  88: [1, Controller.BUTTON_A, \"X\"], // X\n  89: [1, Controller.BUTTON_B, \"Y\"], // Y (Central European keyboard)\n  90: [1, Controller.BUTTON_B, \"Z\"], // Z\n  17: [1, Controller.BUTTON_SELECT, \"Right Ctrl\"], // Right Ctrl\n  13: [1, Controller.BUTTON_START, \"Enter\"], // Enter\n  38: [1, Controller.BUTTON_UP, \"Up\"], // Up\n  40: [1, Controller.BUTTON_DOWN, \"Down\"], // Down\n  37: [1, Controller.BUTTON_LEFT, \"Left\"], // Left\n  39: [1, Controller.BUTTON_RIGHT, \"Right\"], // Right\n  103: [2, Controller.BUTTON_A, \"Num-7\"], // Num-7\n  105: [2, Controller.BUTTON_B, \"Num-9\"], // Num-9\n  99: [2, Controller.BUTTON_SELECT, \"Num-3\"], // Num-3\n  97: [2, Controller.BUTTON_START, \"Num-1\"], // Num-1\n  104: [2, Controller.BUTTON_UP, \"Num-8\"], // Num-8\n  98: [2, Controller.BUTTON_DOWN, \"Num-2\"], // Num-2\n  100: [2, Controller.BUTTON_LEFT, \"Num-4\"], // Num-4\n  102: [2, Controller.BUTTON_RIGHT, \"Num-6\"] // Num-6\n};\n\nexport default class KeyboardController {\n  constructor(options) {\n    this.onButtonDown = options.onButtonDown;\n    this.onButtonUp = options.onButtonUp;\n  }\n\n  loadKeys = () => {\n    var keys;\n    try {\n      keys = localStorage.getItem(\"keys\");\n      if (keys) {\n        keys = JSON.parse(keys);\n      }\n    } catch (e) {\n      console.log(\"Failed to get keys from localStorage.\", e);\n    }\n\n    this.keys = keys || KEYS;\n  };\n\n  setKeys = newKeys => {\n    try {\n      localStorage.setItem(\"keys\", JSON.stringify(newKeys));\n      this.keys = newKeys;\n    } catch (e) {\n      console.log(\"Failed to set keys in localStorage\");\n    }\n  };\n\n  handleKeyDown = e => {\n    var key = this.keys[e.keyCode];\n    if (key) {\n      this.onButtonDown(key[0], key[1]);\n      e.preventDefault();\n    }\n  };\n\n  handleKeyUp = e => {\n    var key = this.keys[e.keyCode];\n    if (key) {\n      this.onButtonUp(key[0], key[1]);\n      e.preventDefault();\n    }\n  };\n\n  handleKeyPress = e => {\n    e.preventDefault();\n  };\n}\n","import React, { Component } from \"react\";\nimport \"./Screen.css\";\n\nconst SCREEN_WIDTH = 256;\nconst SCREEN_HEIGHT = 240;\n\nclass Screen extends Component {\n  render() {\n    return (\n      <canvas\n        className=\"Screen\"\n        width={SCREEN_WIDTH}\n        height={SCREEN_HEIGHT}\n        onMouseDown={this.handleMouseDown}\n        onMouseUp={this.props.onMouseUp}\n        ref={canvas => {\n          this.canvas = canvas;\n        }}\n      />\n    );\n  }\n\n  componentDidMount() {\n    this.initCanvas();\n  }\n\n  componentDidUpdate() {\n    this.initCanvas();\n  }\n\n  initCanvas() {\n    this.context = this.canvas.getContext(\"2d\");\n    this.imageData = this.context.getImageData(\n      0,\n      0,\n      SCREEN_WIDTH,\n      SCREEN_HEIGHT\n    );\n\n    this.context.fillStyle = \"black\";\n    // set alpha to opaque\n    this.context.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n\n    // buffer to write on next animation frame\n    this.buf = new ArrayBuffer(this.imageData.data.length);\n    // Get the canvas buffer in 8bit and 32bit\n    this.buf8 = new Uint8ClampedArray(this.buf);\n    this.buf32 = new Uint32Array(this.buf);\n\n    // Set alpha\n    for (var i = 0; i < this.buf32.length; ++i) {\n      this.buf32[i] = 0xff000000;\n    }\n  }\n\n  setBuffer = buffer => {\n    var i = 0;\n    for (var y = 0; y < SCREEN_HEIGHT; ++y) {\n      for (var x = 0; x < SCREEN_WIDTH; ++x) {\n        i = y * 256 + x;\n        // Convert pixel from NES BGR to canvas ABGR\n        this.buf32[i] = 0xff000000 | buffer[i]; // Full alpha\n      }\n    }\n  };\n\n  writeBuffer = () => {\n    this.imageData.data.set(this.buf8);\n    this.context.putImageData(this.imageData, 0, 0);\n  };\n\n  fitInParent = () => {\n    let parent = this.canvas.parentNode;\n    // @ts-ignore\n    let parentWidth = parent.clientWidth;\n    // @ts-ignore\n    let parentHeight = parent.clientHeight;\n    let parentRatio = parentWidth / parentHeight;\n    let desiredRatio = SCREEN_WIDTH / SCREEN_HEIGHT;\n    if (desiredRatio < parentRatio) {\n      this.canvas.style.width = `${Math.round(parentHeight * desiredRatio)}px`;\n      this.canvas.style.height = `${parentHeight}px`;\n    } else {\n      this.canvas.style.width = `${parentWidth}px`;\n      this.canvas.style.height = `${Math.round(parentWidth / desiredRatio)}px`;\n    }\n  };\n\n  screenshot() {\n    var img = new Image();\n    img.src = this.canvas.toDataURL(\"image/png\");\n    return img;\n  }\n\n  handleMouseDown = e => {\n    if (!this.props.onMouseDown) return;\n    // Make coordinates unscaled\n    let scale = SCREEN_WIDTH / parseFloat(this.canvas.style.width);\n    let rect = this.canvas.getBoundingClientRect();\n    let x = Math.round((e.clientX - rect.left) * scale);\n    let y = Math.round((e.clientY - rect.top) * scale);\n    this.props.onMouseDown(x, y);\n  };\n}\n\nexport default Screen;\n","import Raven from \"raven-js\";\n\nexport const handleError = (error, errorInfo) => {\n  console.error(error);\n  Raven.captureException(error, { extra: errorInfo });\n};\n","import RingBuffer from \"ringbufferjs\";\nimport { handleError } from \"./utils\";\n\nexport default class Speakers {\n  constructor({ onBufferUnderrun }) {\n    this.onBufferUnderrun = onBufferUnderrun;\n    this.bufferSize = 8192;\n    this.buffer = new RingBuffer(this.bufferSize * 2);\n  }\n\n  getSampleRate() {\n    if (!window.AudioContext) {\n      return 44100;\n    }\n    let myCtx = new window.AudioContext();\n    let sampleRate = myCtx.sampleRate;\n    myCtx.close();\n    return sampleRate;\n  }\n\n  start() {\n    // Audio is not supported\n    if (!window.AudioContext) {\n      return;\n    }\n    this.audioCtx = new window.AudioContext();\n    this.scriptNode = this.audioCtx.createScriptProcessor(1024, 0, 2);\n    this.scriptNode.onaudioprocess = this.onaudioprocess;\n    this.scriptNode.connect(this.audioCtx.destination);\n  }\n\n  stop() {\n    if (this.scriptNode) {\n      this.scriptNode.disconnect(this.audioCtx.destination);\n      this.scriptNode.onaudioprocess = null;\n      this.scriptNode = null;\n    }\n    if (this.audioCtx) {\n      this.audioCtx.close().catch(handleError);\n      this.audioCtx = null;\n    }\n  }\n\n  writeSample = (left, right) => {\n    if (this.buffer.size() / 2 >= this.bufferSize) {\n      console.log(`Buffer overrun`);\n      this.buffer.deqN(this.bufferSize / 2);\n    }\n    this.buffer.enq(left);\n    this.buffer.enq(right);\n  };\n\n  onaudioprocess = e => {\n    var left = e.outputBuffer.getChannelData(0);\n    var right = e.outputBuffer.getChannelData(1);\n    var size = left.length;\n\n    // We're going to buffer underrun. Attempt to fill the buffer.\n    if (this.buffer.size() < size * 2 && this.onBufferUnderrun) {\n      this.onBufferUnderrun(this.buffer.size(), size * 2);\n    }\n\n    try {\n      var samples = this.buffer.deqN(size * 2);\n    } catch (e) {\n      // onBufferUnderrun failed to fill the buffer, so handle a real buffer\n      // underrun\n\n      // ignore empty buffers... assume audio has just stopped\n      var bufferSize = this.buffer.size() / 2;\n      if (bufferSize > 0) {\n        console.log(`Buffer underrun (needed ${size}, got ${bufferSize})`);\n      }\n      for (var j = 0; j < size; j++) {\n        left[j] = 0;\n        right[j] = 0;\n      }\n      return;\n    }\n    for (var i = 0; i < size; i++) {\n      left[i] = samples[i * 2];\n      right[i] = samples[i * 2 + 1];\n    }\n  };\n}\n","import Raven from \"raven-js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { NES } from \"./jsnes/src\";\n\nimport FrameTimer from \"./FrameTimer\";\nimport GamepadController from \"./GamepadController\";\nimport KeyboardController from \"./KeyboardController\";\nimport Screen from \"./Screen\";\nimport Speakers from \"./Speakers\";\n\n/*\n * Runs the emulator.\n *\n * The only UI is a canvas element. It assumes it is a singleton in various ways\n * (binds to window, keyboard, speakers, etc).\n */\nclass Emulator extends Component {\n  render() {\n    return (\n      <Screen\n        ref={screen => {\n          this.screen = screen;\n        }}\n        onGenerateFrame={() => {\n          this.nes.frame();\n        }}\n        onMouseDown={(x, y) => {\n          this.nes.zapperMove(x, y);\n          this.nes.zapperFireDown();\n        }}\n        onMouseUp={() => {\n          this.nes.zapperFireUp();\n        }}\n      />\n    );\n  }\n\n  componentDidMount() {\n    // Initial layout\n    this.fitInParent();\n\n    this.speakers = new Speakers({\n      onBufferUnderrun: (actualSize, desiredSize) => {\n        if (this.props.paused) {\n          return;\n        }\n        // Skip a video frame so audio remains consistent. This happens for\n        // a variety of reasons:\n        // - Frame rate is not quite 60fps, so sometimes buffer empties\n        // - Page is not visible, so requestAnimationFrame doesn't get fired.\n        //   In this case emulator still runs at full speed, but timing is\n        //   done by audio instead of requestAnimationFrame.\n        // - System can't run emulator at full speed. In this case it'll stop\n        //    firing requestAnimationFrame.\n        console.log(\n          \"Buffer underrun, running another frame to try and catch up\"\n        );\n\n        this.frameTimer.generateFrame();\n        // desiredSize will be 2048, and the NES produces 1468 samples on each\n        // frame so we might need a second frame to be run. Give up after that\n        // though -- the system is not catching up\n        if (this.speakers.buffer.size() < desiredSize) {\n          console.log(\"Still buffer underrun, running a second frame\");\n          this.frameTimer.generateFrame();\n        }\n      }\n    });\n\n    this.nes = new NES({\n      onFrame: this.screen.setBuffer,\n      onStatusUpdate: console.log,\n      onAudioSample: this.speakers.writeSample,\n      sampleRate: this.speakers.getSampleRate()\n    });\n\n    // For debugging. ([\"nes\"] instead of .nes to avoid VS Code type errors.)\n    window[\"nes\"] = this.nes;\n\n    this.frameTimer = new FrameTimer({\n      onGenerateFrame: Raven.wrap(this.nes.frame),\n      onWriteFrame: Raven.wrap(this.screen.writeBuffer)\n    });\n\n    // Set up gamepad and keyboard\n    this.gamepadController = new GamepadController({\n      onButtonDown: this.nes.buttonDown,\n      onButtonUp: this.nes.buttonUp\n    });\n\n    this.gamepadController.loadGamepadConfig();\n    this.gamepadPolling = this.gamepadController.startPolling();\n\n    this.keyboardController = new KeyboardController({\n      onButtonDown: this.gamepadController.disableIfGamepadEnabled(\n        this.nes.buttonDown\n      ),\n      onButtonUp: this.gamepadController.disableIfGamepadEnabled(\n        this.nes.buttonUp\n      )\n    });\n\n    // Load keys from localStorage (if they exist)\n    this.keyboardController.loadKeys();\n\n    document.addEventListener(\"keydown\", this.keyboardController.handleKeyDown);\n    document.addEventListener(\"keyup\", this.keyboardController.handleKeyUp);\n    document.addEventListener(\n      \"keypress\",\n      this.keyboardController.handleKeyPress\n    );\n\n    this.nes.loadROM(this.props.romData);\n    this.start();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n\n    // Unbind keyboard\n    document.removeEventListener(\n      \"keydown\",\n      this.keyboardController.handleKeyDown\n    );\n    document.removeEventListener(\"keyup\", this.keyboardController.handleKeyUp);\n    document.removeEventListener(\n      \"keypress\",\n      this.keyboardController.handleKeyPress\n    );\n\n    // Stop gamepad\n    this.gamepadPolling.stop();\n\n    window[\"nes\"] = undefined;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.paused !== prevProps.paused) {\n      if (this.props.paused) {\n        this.stop();\n      } else {\n        this.start();\n      }\n    }\n\n    // TODO: handle changing romData\n  }\n\n  start = () => {\n    this.frameTimer.start();\n    this.speakers.start();\n    this.fpsInterval = setInterval(() => {\n      console.log(`FPS: ${this.nes.getFPS()}`);\n    }, 1000);\n  };\n\n  stop = () => {\n    this.frameTimer.stop();\n    this.speakers.stop();\n    clearInterval(this.fpsInterval);\n  };\n\n  /*\n   * Fill parent element with screen. Typically called if parent element changes size.\n   */\n  fitInParent() {\n    this.screen.fitInParent();\n  }\n}\n\nEmulator.propTypes = {\n  paused: PropTypes.bool,\n  romData: PropTypes.string.isRequired\n};\n\nexport default Emulator;\n","import React, { Component } from \"react\";\nimport { Button, Progress } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport config from \"./config\";\nimport ControlsModal from \"./ControlsModal\";\nimport Emulator from \"./Emulator\";\nimport RomLibrary from \"./RomLibrary\";\n\nimport \"./RunPage.css\";\n\nfunction loadBinary(path, callback, handleProgress) {\n  var req = new XMLHttpRequest();\n  req.open(\"GET\", path);\n  req.overrideMimeType(\"text/plain; charset=x-user-defined\");\n  req.onload = function() {\n    if (this.status === 200) {\n      if (req.responseText.match(/^<!doctype html>/i)) {\n        // Got HTML back, so it is probably falling back to index.html due to 404\n        return callback(new Error(\"Page not found\"));\n      }\n\n      callback(null, this.responseText);\n    } else if (this.status === 0) {\n      // Aborted, so ignore error\n    } else {\n      callback(new Error(req.statusText));\n    }\n  };\n  req.onerror = function() {\n    callback(new Error(req.statusText));\n  };\n  req.onprogress = handleProgress;\n  req.send();\n  return req;\n}\n\n/*\n * The UI for the emulator. Also responsible for loading ROM from URL or file.\n */\nclass RunPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      romName: null,\n      romData: null,\n      running: false,\n      paused: false,\n      controlsModalOpen: false,\n      loading: true,\n      loadedPercent: 3,\n      error: null\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"RunPage\">\n        <nav\n          className=\"navbar navbar-expand\"\n          ref={el => {\n            this.navbar = el;\n          }}\n        >\n          <ul className=\"navbar-nav\" style={{ width: \"200px\" }}>\n            <li className=\"navitem\">\n              <Link to=\"/\" className=\"nav-link\">\n                &lsaquo; Back\n              </Link>\n            </li>\n          </ul>\n          <ul className=\"navbar-nav ml-auto mr-auto\">\n            <li className=\"navitem\">\n              <span className=\"navbar-text mr-3\">{this.state.romName}</span>\n            </li>\n          </ul>\n          <ul className=\"navbar-nav\" style={{ width: \"200px\" }}>\n            <li className=\"navitem\">\n              <Button\n                outline\n                color=\"primary\"\n                onClick={this.loadState}\n                className=\"mr-3\"\n              >\n                Load\n              </Button>\n              <Button\n                outline\n                color=\"primary\"\n                onClick={this.toggleControlsModal}\n                className=\"mr-3\"\n              >\n                Controls\n              </Button>\n            </li>\n          </ul>\n        </nav>\n\n        {this.state.error ? (\n          this.state.error\n        ) : (\n          <div\n            className=\"screen-container\"\n            ref={el => {\n              this.screenContainer = el;\n            }}\n          >\n            {this.state.loading ? (\n              <Progress\n                value={this.state.loadedPercent}\n                style={{\n                  position: \"absolute\",\n                  width: \"70%\",\n                  left: \"15%\",\n                  top: \"48%\"\n                }}\n              />\n            ) : this.state.romData ? (\n              <Emulator\n                romData={this.state.romData}\n                paused={this.state.paused}\n                ref={emulator => {\n                  this.emulator = emulator;\n                }}\n              />\n            ) : null}\n\n            {/* TODO: lift keyboard and gamepad state up */}\n            {this.state.controlsModalOpen && (\n              <ControlsModal\n                isOpen={this.state.controlsModalOpen}\n                toggle={this.toggleControlsModal}\n                keys={this.emulator.keyboardController.keys}\n                setKeys={this.emulator.keyboardController.setKeys}\n                promptButton={this.emulator.gamepadController.promptButton}\n                gamepadConfig={this.emulator.gamepadController.gamepadConfig}\n                setGamepadConfig={\n                  this.emulator.gamepadController.setGamepadConfig\n                }\n              />\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  loadState() {\n    fetch('/bank.txt').then((res) => {\n      return res.text();\n    }).then((res) => {\n      var decodedData = JSON.parse(JSON.parse(res));\n      window.nes.fromJSON(decodedData);\n    });\n  }\n\n  saveState() {\n    const xx = window.nes.toJSON()\n    // xx.romData = (xx.romData)\n\n    localStorage.setItem(\"yy\", JSON.stringify(xx));\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.layout);\n    this.layout();\n    this.load();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.layout);\n    if (this.currentRequest) {\n      this.currentRequest.abort();\n    }\n  }\n\n  load = () => {\n    const rom = \"jmj\";\n\n    if (rom) {\n      const slug = rom;\n      const isLocalROM = /^local-/.test(slug);\n      const romHash = slug.split(\"-\")[1];\n      const romInfo = isLocalROM\n        ? RomLibrary.getRomInfoByHash(romHash)\n        : config.ROMS[slug];\n\n      if (!romInfo) {\n        this.setState({ error: `No such ROM: ${slug}` });\n        return;\n      }\n\n      if (isLocalROM) {\n        this.setState({ romName: romInfo.name });\n        const localROMData = localStorage.getItem(\"blob-\" + romHash);\n        this.handleLoaded(localROMData);\n      } else {\n        this.setState({ romName: romInfo.description });\n        this.currentRequest = loadBinary(\n          romInfo.url,\n          (err, data) => {\n            if (err) {\n              this.setState({ error: `Error loading ROM: ${err.message}` });\n            } else {\n              this.handleLoaded(data);\n            }\n          },\n          this.handleProgress\n        );\n      }\n    } else if (this.props.location.state && this.props.location.state.file) {\n      let reader = new FileReader();\n      reader.readAsBinaryString(this.props.location.state.file);\n      reader.onload = e => {\n        this.currentRequest = null;\n        this.handleLoaded(reader.result);\n      };\n    } else {\n      this.setState({ error: \"No ROM provided\" });\n    }\n  };\n\n  handleProgress = e => {\n    if (e.lengthComputable) {\n      this.setState({ loadedPercent: (e.loaded / e.total) * 100 });\n    }\n  };\n\n  handleLoaded = data => {\n    this.setState({ running: true, loading: false, romData: data });\n  };\n\n  handlePauseResume = () => {\n    this.setState({ paused: !this.state.paused });\n  };\n\n  layout = () => {\n    let navbarHeight = parseFloat(window.getComputedStyle(this.navbar).height);\n    this.screenContainer.style.height = `${window.innerHeight -\n      navbarHeight}px`;\n    if (this.emulator) {\n      this.emulator.fitInParent();\n    }\n  };\n\n  toggleControlsModal = () => {\n    this.setState({ controlsModalOpen: !this.state.controlsModalOpen });\n  };\n}\n\nexport default RunPage;\n","import React, { Component } from \"react\";\nimport GoogleAnalytics from \"react-ga\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport ListPage from \"./ListPage\";\nimport RunPage from \"./RunPage\";\nimport config from \"./config\";\nimport { handleError } from \"./utils\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null };\n    if (config.GOOGLE_ANALYTICS_CODE) {\n      GoogleAnalytics.initialize(config.GOOGLE_ANALYTICS_CODE);\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <div className=\"container my-4\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col-md-8\">\n              Oops - there has been an error. It has been logged to the console.\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={RunPage} />\n          <Route path=\"/\" render={this.recordPageview} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({ error });\n    handleError(error, errorInfo);\n  }\n\n  recordPageview = ({ location }) => {\n    GoogleAnalytics.pageview(location.pathname);\n    return null;\n  };\n}\n\nexport default App;\n","import Raven from \"raven-js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport config from \"./config\";\nimport \"./index.scss\";\n\nif (config.SENTRY_URI) {\n  Raven.config(config.SENTRY_URI).install();\n}\n\nRaven.context(function() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n});\n"],"sourceRoot":""}